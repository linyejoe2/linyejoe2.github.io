<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[JaveScript] Behind The Scenes JS深度解析 NO.1</title>
    <url>/2022/01/25/Behind_The_Scenes_JS_1/</url>
    <content><![CDATA[<h1 id="hoisting-in-js"><a class="markdownIt-Anchor" href="#hoisting-in-js"></a> Hoisting in JS</h1>
<p>在JS中我們可以<strong>先撰寫呼叫函式的程式碼，再撰寫函式的宣告部分</strong>，但程式碼仍會<strong>正常運作</strong>，對於寫習慣JS的人可能習以為常，但 Behind The Scenes 你真的知道在這之中發生了什麼事嗎?</p>
<span id="more"></span>
<h2 id="what-is-hoisting什麼是提升"><a class="markdownIt-Anchor" href="#what-is-hoisting什麼是提升"></a> What is Hoisting(什麼是<strong>提升</strong>)</h2>
<p>首先，我們先來看一段程式碼。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line"><span class="title function_">getY</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&#x27;x&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getY</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;y&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!-- TODO -->
<h5 id="參考資料"><a class="markdownIt-Anchor" href="#參考資料"></a> 參考資料</h5>
<ol>
<li><a href="https://www.youtube.com/watch?v=Fnlnw8uY6jo&amp;t=916s">Hoisting in JavaScript</a></li>
<li><a href="https://shubo.io/javascript-hoisting/#javascript-hoisting-%E6%8F%90%E5%8D%87">JavaScript 中的 Hoisting 是什麼意思？let const var 的差異居然是這個？</a></li>
</ol>
]]></content>
      <tags>
        <tag>JaveScript</tag>
        <tag>Behind The Scenes JS深度解析</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Geth 建立 POA 私鏈</title>
    <url>/2024/11/14/Build_POA_chain_with_Geth/</url>
    <content><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1>
<p>私鏈作為區塊鏈的應用之一擁有很高的發展性，任何人、單位、機關，都可以建立自己的私鏈來儲存重要資訊，並且私鏈也提供了跟公鏈一樣的以下幾種特性:</p>
<ul>
<li>不可竄改性(immutable): 任何人都不能竄改已經寫入鏈上的資料，就算修改了，也會在鏈上留下永久性的修改紀錄。</li>
<li>公開性(transparent): 所有數據都被公開記錄在區塊鏈上，只要有辦法存取區塊鏈節點(EtherScan, JSON-RPC)，也就可以查詢這些紀錄。</li>
<li>匿名性(anonymous): 所有錢包都是匿名的，你不能透過錢包得知錢包主人的其他資訊。</li>
<li>共識機制(consensus): 半數鏈上的簽名節點都必須承認某一筆交易，交易才會達成共識，也就是被這條區塊鏈承認，這個機制的好處就是，除了社交工程之外，比較難用黑客技術竄改交易紀錄或偷錢，當然還是有例外(51%攻擊)</li>
</ul>
<p>今天要實作的是 POA(授權證明) 鏈， POA 也是私鏈最常用的共識機制，以下簡單的分析一下POA 跟其他共識機制(POS, POW)的差別。</p>
<ol>
<li>交易確認方式: POA 由數個指定的<strong>權威節點</strong>來簽名交易，沒經過同意的其他人是不能加入進來<strong>挖礦</strong>的。</li>
<li>高性能，低延遲: 由於 POA 只能由權威節點簽名交易，不需要大量的計算來驗證交易，因此交易確認速度比起其他共識機制要快，非常適合需要高吞吐量和低延遲的應用，例如供應鏈、物流追蹤等。</li>
<li>中心化: 由於簽名的權力掌握在少數的權威節點手上，也就代表它不再去中心化。</li>
<li>節能: 不需要大量的計算及驗證。</li>
</ol>
<h1 id="前置工作"><a class="markdownIt-Anchor" href="#前置工作"></a> 前置工作</h1>
<p>以下我們把 POA 私鏈簡稱為 POA ，我們要做的是一個權威節點(authority node)，以下簡稱節點，一個 POA 最少只需要一個權威節點就可以運作。</p>
<p>想要做一個 POA ，必須先準備以下的東西:</p>
<ul>
<li>一台電腦(伺服器)，最好是 linux 作業系統的，筆者使用的是 Ubuntu 22.04.2 LTS(Docker:<a href="https://hub.docker.com/r/alnoda/ubuntu-workspace">alnoda/ubuntu-workspace</a>)</li>
<li>Geth 主程式: 從 <a href="https://github.com/ethereum/go-ethereum/tags">https://github.com/ethereum/go-ethereum/tags</a> 可以下載到，注意 Geth 從版本 1.14 之後就不支持 POA 共識機制了，所以必須使用 1.14 前的，筆者使用的是 <a href="https://github.com/ethereum/go-ethereum/releases/tag/v1.9.25">v1.9.25</a></li>
<li>可以自訂連線區塊鏈網路的 ethereum wallet，筆者使用 <a href="https://metamask.io/">MetaMask</a></li>
</ul>
<h1 id="安裝並運行-geth"><a class="markdownIt-Anchor" href="#安裝並運行-geth"></a> 安裝並運行 Geth</h1>
<blockquote>
<p>由於筆者使用 Docker 來做練習，不使用 Docker 的可以跳過這節。</p>
</blockquote>
<h2 id="運行-docker-container"><a class="markdownIt-Anchor" href="#運行-docker-container"></a> 運行 Docker Container</h2>
<p>筆者使用 Docker on windows(WSL) 來練習架設 Geth ，所以我們先來啟動一個 container 。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 運行 container</span></span><br><span class="line">docker run --name space-1 -d -p 3051:3051 -p 30303:30303 -v C:\geth:/root/geth alnoda/ubuntu-workspace</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用 zsh 進入 container</span></span><br><span class="line">docker <span class="built_in">exec</span> -it --user=root space-1 zsh</span><br></pre></td></tr></table></figure>
<ul>
<li>–name: container 的名字</li>
<li>-d: 背景運行(daemon)</li>
<li>-p: 指定 container 跟 host 的埠映射，設定方式是 <code>-p &#123;host-port&#125;:&#123;container-port&#125;</code>
<ul>
<li>3051: 讓使用者連接節點的埠。</li>
<li>30303: Geth 的 p2p port ，讓節點間可以互相搜尋並建立連線的 port ，這個 port 讓我們以後可以擴充我們的 POA ，加入更多的節點。</li>
</ul>
</li>
<li>-v: volume ，讓 Geth 裡的資訊可以持久化存取，可以簡單的看成把 <code>C:\geth</code> 這個資料夾 mount 到 <code>/root/geth</code> 上</li>
<li>alnoda/ubuntu-workspace: 指定的 docker image ，我使用的這個 image 讓 docker container 可以像 VM 一樣做一些簡單的沙盒測試。</li>
</ul>
<p>然後我們 <code>cd /root/geth</code> 可以看到筆者把 geth 主程式放在這個資料夾底下:</p>
<p><img src="https://i.imgur.com/ZpfqhJi.png" alt="container-1" /></p>
<h2 id="撰寫-genesisjson"><a class="markdownIt-Anchor" href="#撰寫-genesisjson"></a> 撰寫 genesis.json</h2>
<p>現在我們在 <code>/root/geth</code> 目錄底下，有 geth 主程式，我們要撰寫創世區塊 genesis.json ，這個檔案可以幫助 geth 設定鏈的資訊。</p>
<p><code>/root/geth/genesis.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;chainId&quot;</span><span class="punctuation">:</span> <span class="number">66</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;homesteadBlock&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eip150Block&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eip155Block&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eip158Block&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;byzantiumBlock&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;constantinopleBlock&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;petersburgBlock&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;istanbulBlock&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;clique&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;period&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;epoch&quot;</span><span class="punctuation">:</span> <span class="number">30000</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;alloc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;556c1aaea8c1ec17a544ba6787a346b6bb05fa9e&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x52b7d2dcc80cd2e4000000&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;extraData&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000556c1aaea8c1ec17a544ba6787a346b6bb05fa9e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;coinbase&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x0000000000000000000000000000000000000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;difficulty&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;gasLimit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x77359400&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;gasUsed&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;nonce&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mixHash&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;parentHash&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x5ff27a04&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>chainId: 鏈 ID</li>
<li>homesteadBlock, eip150Block, eip155Block, eip158Block, byzantiumBlock, constantinopleBlock, petersburgBlock, istanbulBlock: 這些是 Ethereum 歷史上的硬分岔，設為 0 表示啟用這些硬分叉。</li>
<li>clique: POA 的一種
<ul>
<li>period: 幾秒生成一個新的區塊，設定為零是因為這是私鏈，我們不希望有空的區塊被產生。</li>
<li>epoch: 經過幾個區塊後重新選舉驗證者。</li>
</ul>
</li>
<li>alloc: 初始資金要分配給誰，後續我們會修改分配的地址。</li>
<li>extraData: 設定 POA 的驗證者是誰，目前是 <code>0x556c1aaea8c1ec17a544ba6787a346b6bb05fa9e</code> 這個地址，等等也會修改。</li>
<li>coinbase: 礦工地址， POA 沒有礦工。</li>
<li>difficulty: 挖出區塊的難度， POA 可以設定為沒有難度。</li>
<li>gasLimit: 每個區塊的 gas 上限。</li>
<li>gasUsed: 創世區塊使用的 gas 數量。</li>
<li>nonce, mixHash, parentHash: 創世區塊默認。</li>
</ul>
<p><img src="https://i.imgur.com/Cr1YAZV.png" alt="container-2" /></p>
<p>到目前為止我們在 <code>/root/geth</code> 裡有 geth 主程式跟創世區塊設定檔 <code>genesis.json</code>。</p>
<h2 id="創建使用者"><a class="markdownIt-Anchor" href="#創建使用者"></a> 創建使用者</h2>
<p><code>./geth account new</code> 建立新的使用者(地址)，創建過程會需要使用者輸入密碼。</p>
<p><img src="https://i.imgur.com/5Rv6Hmn.png" alt="container-3" /></p>
<p>將密碼寫入 <code>/root/geth/password</code> 裡備用<br />
我們得到了一個新的帳號 0x7d454A2fA9487B563ecc1d96C9339Ce4e74163ED ，現在修改 <code>genesis.json</code> ，把 alloc 跟 extraData 裡的地址都改成剛剛創建的地址，如下顯示修改完的檔案:</p>
<p><code>genesis.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;chainId&quot;</span><span class="punctuation">:</span> <span class="number">66</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;homesteadBlock&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eip150Block&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eip155Block&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eip158Block&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;byzantiumBlock&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;constantinopleBlock&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;petersburgBlock&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;istanbulBlock&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;clique&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;period&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;epoch&quot;</span><span class="punctuation">:</span> <span class="number">30000</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;alloc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;7d454A2fA9487B563ecc1d96C9339Ce4e74163ED&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x52b7d2dcc80cd2e4000000&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;extraData&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x00000000000000000000000000000000000000000000000000000000000000007d454A2fA9487B563ecc1d96C9339Ce4e74163ED0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;coinbase&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x0000000000000000000000000000000000000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;difficulty&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;gasLimit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x77359400&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;gasUsed&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;nonce&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mixHash&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;parentHash&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x5ff27a04&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="初始化後運行-geth"><a class="markdownIt-Anchor" href="#初始化後運行-geth"></a> 初始化後運行 Geth</h2>
<p>使用 <code>./geth init genesis.json</code> 初始化創世區塊:</p>
<p><img src="https://i.imgur.com/DgObQ3H.png" alt="container-4" /></p>
<p>可以看到由於筆者使用的是 Docker ，所以在 USB Device 的地方有報錯，不過這不影響 POA 。<br />
最後顯示成功寫入創世狀態。</p>
<p>使用以下指令開始運行 Geth</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./geth \</span><br><span class="line">--miner.gastarget 2000000000 \</span><br><span class="line">--mine \</span><br><span class="line">--allow-insecure-unlock \</span><br><span class="line">--unlock 0x7d454A2fA9487B563ecc1d96C9339Ce4e74163ED \</span><br><span class="line">--password /root/geth/password \</span><br><span class="line">--http \</span><br><span class="line">--http.port 3051 \</span><br><span class="line">--http.api net,eth,web3 \</span><br><span class="line">--networkid 66 \</span><br><span class="line">--http.addr 0.0.0.0 \</span><br><span class="line">--miner.gasprice 0 \</span><br><span class="line">--nousb \</span><br><span class="line">--nodiscover \</span><br><span class="line">--cache 256</span><br></pre></td></tr></table></figure>
<ul>
<li>–miner.gastarget: 每個區塊的油錢消耗</li>
<li>–mine: 啟用挖礦模式</li>
<li>–miner.gasprice: 設置 gas 價格，這邊設置為零代表接受沒有手續費的交易。</li>
<li>–allow-insecure-unlock: 可以直接解鎖帳戶</li>
<li>–unlock 0x7d454A2fA9487B563ecc1d96C9339Ce4e74163ED: 解鎖我們剛剛創建的帳戶</li>
<li>–password: 放置解鎖帳戶用的密碼</li>
<li>–http: 啟用 http 交互</li>
<li>–http.port: 連線的 port</li>
<li>–http.api net,eth,web3: 可以透過 api 使用的功能</li>
<li>–http.addr 0.0.0.0: 綁定到所有 interface</li>
<li>–networkid: 要跟剛剛 <code>genesis.json</code> 裡定義的 chainId 一致</li>
<li>–nousb: 禁用 usb 錢包</li>
<li>–cache 256: 設置節點快取大小</li>
</ul>
<p><img src="https://i.imgur.com/YMmkfV1.png" alt="alt text" /></p>
<p>到這邊我們就成功運行一個節點了，可以著手測試。</p>
<h1 id="測試-geth"><a class="markdownIt-Anchor" href="#測試-geth"></a> 測試 Geth</h1>
<p>開啟 MetaMask ，加入 custom network ，參考以下設定:</p>
<p><img src="https://i.imgur.com/LIgg9gD.png" alt="alt text" /></p>
<p>Chain Name: POA<br />
RPC URL: localhost:3051<br />
Chain ID: 66<br />
Token Name: POAT (POA Token)</p>
<p>接著使用 MetaMask 原有的帳號轉 0 POAT 給我們剛剛用 geth 做出來的帳號<br />
(0x7d454A2fA9487B563ecc1d96C9339Ce4e74163ED)看看</p>
<p><img src="https://i.imgur.com/kCRssbD.png" alt="alt text" /></p>
<p>下圖可以看到我們的交易被確認了</p>
<p><img src="https://i.imgur.com/MeD6tGg.png" alt="alt text" /></p>
<p>也可以用 <code>geth</code> 的控制台查看 block 有沒有增加</p>
<p><code>./geth attach</code> 進入主控台後 <code>eth.blockNumber</code> 看現在的區塊高度是 1</p>
<p><img src="https://i.imgur.com/ysDYUo4.png" alt="alt text" /></p>
<p>最後，我們把剛剛做出來的帳號(0x7d454A2fA9487B563ecc1d96C9339Ce4e74163ED)匯入到 MetaMask ，可以看到有 100,000,000 顆 POAT ，並且我們將 20 POAT 打入另一個帳號</p>
<p><img src="https://i.imgur.com/JKwj3KV.png" alt="alt text" /></p>
<p><img src="https://i.imgur.com/GHVFZoE.png" alt="alt text" /></p>
<p>到這邊，我們就算建立了一個單權威節點的 POA 鏈。</p>
]]></content>
      <tags>
        <tag>geth</tag>
        <tag>block chain</tag>
        <tag>私鏈</tag>
        <tag>ethereum</tag>
        <tag>區塊鏈</tag>
      </tags>
  </entry>
  <entry>
    <title>[JSP]JSP標準標籤庫(JSTL)</title>
    <url>/2022/02/11/JSTL_tutorial/</url>
    <content><![CDATA[<h1 id="jsp標準標籤庫jstl"><a class="markdownIt-Anchor" href="#jsp標準標籤庫jstl"></a> JSP標準標籤庫(JSTL)</h1>
<p>JSTL標籤分為五個類別(功能)</p>
<ul>
<li>core標籤</li>
<li>格式化標籤</li>
<li>SQL標籤</li>
<li>XML標籤</li>
<li>JSTL函數</li>
</ul>
<span id="more"></span>
<h2 id="jstl庫安裝"><a class="markdownIt-Anchor" href="#jstl庫安裝"></a> JSTL庫安裝</h2>
<h3 id="下載jstl庫"><a class="markdownIt-Anchor" href="#下載jstl庫"></a> 下載JSTL庫</h3>
<p>從<a href="http://archive.apache.org/dist/jakarta/taglibs/standard/binaries/">Apache標準標籤庫</a>中下載<strong>jakarta-taglibs-standard-1.1.2.zip</strong>(Windows)或是<strong>jakarta-taglibs-standard-1.1.2.tar.gz</strong>(Linux)<br />
再把壓縮檔lib的內容複製至服務的/WEB-INF/lib/中<br />
tld也複製至程式的/WEB-INF/tld/中即可</p>
<h3 id="引用jstl庫"><a class="markdownIt-Anchor" href="#引用jstl庫"></a> 引用JSTL庫</h3>
<p>編輯/WEB-INF/web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">&quot;2.4&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/j2ee&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/j2ee </span></span></span><br><span class="line"><span class="string"><span class="tag">        http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">taglib</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">taglib-uri</span>&gt;</span>http://java.sun.com/jsp/jstl/fmt<span class="tag">&lt;/<span class="name">taglib-uri</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">taglib-location</span>&gt;</span>/WEB-INF/fmt.tld<span class="tag">&lt;/<span class="name">taglib-location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">taglib</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">taglib</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">taglib-uri</span>&gt;</span>http://java.sun.com/jsp/jstl/fmt-rt<span class="tag">&lt;/<span class="name">taglib-uri</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">taglib-location</span>&gt;</span>/WEB-INF/fmt-rt.tld<span class="tag">&lt;/<span class="name">taglib-location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">taglib</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">taglib</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">taglib-uri</span>&gt;</span>http://java.sun.com/jsp/jstl/core<span class="tag">&lt;/<span class="name">taglib-uri</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">taglib-location</span>&gt;</span>/WEB-INF/c.tld<span class="tag">&lt;/<span class="name">taglib-location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">taglib</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">taglib</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">taglib-uri</span>&gt;</span>http://java.sun.com/jsp/jstl/core-rt<span class="tag">&lt;/<span class="name">taglib-uri</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">taglib-location</span>&gt;</span>/WEB-INF/c-rt.tld<span class="tag">&lt;/<span class="name">taglib-location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">taglib</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">taglib</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">taglib-uri</span>&gt;</span>http://java.sun.com/jsp/jstl/sql<span class="tag">&lt;/<span class="name">taglib-uri</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">taglib-location</span>&gt;</span>/WEB-INF/sql.tld<span class="tag">&lt;/<span class="name">taglib-location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">taglib</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">taglib</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">taglib-uri</span>&gt;</span>http://java.sun.com/jsp/jstl/sql-rt<span class="tag">&lt;/<span class="name">taglib-uri</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">taglib-location</span>&gt;</span>/WEB-INF/sql-rt.tld<span class="tag">&lt;/<span class="name">taglib-location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">taglib</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">taglib</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">taglib-uri</span>&gt;</span>http://java.sun.com/jsp/jstl/x<span class="tag">&lt;/<span class="name">taglib-uri</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">taglib-location</span>&gt;</span>/WEB-INF/x.tld<span class="tag">&lt;/<span class="name">taglib-location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">taglib</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">taglib</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">taglib-uri</span>&gt;</span>http://java.sun.com/jsp/jstl/x-rt<span class="tag">&lt;/<span class="name">taglib-uri</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">taglib-location</span>&gt;</span>/WEB-INF/x-rt.tld<span class="tag">&lt;/<span class="name">taglib-location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">taglib</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jsp-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="core標籤程式庫"><a class="markdownIt-Anchor" href="#core標籤程式庫"></a> Core標籤程式庫</h2>
<table>
<thead>
<tr>
<th>標籤</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="#lt-c-out-gt">&lt;c:out&gt;</a></td>
<td>輸出EL資料</td>
</tr>
<tr>
<td><a href="#lt-c-if-gt">&lt;c:if&gt;</a></td>
<td>if判斷成功才顯示內容</td>
</tr>
<tr>
<td>TODO</td>
<td></td>
</tr>
</tbody>
</table>
<hr />
<h2 id="cout"><a class="markdownIt-Anchor" href="#cout"></a> &lt;c:out&gt;</h2>
<h3 id="語法"><a class="markdownIt-Anchor" href="#語法"></a> 語法</h3>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c:out value=<span class="string">&quot;&lt;string&gt;&quot;</span> <span class="keyword">default</span>=<span class="string">&quot;&lt;string&gt;&quot;</span> escapeXml=<span class="string">&quot;&lt;true|false&gt;&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>
<h3 id="屬性"><a class="markdownIt-Anchor" href="#屬性"></a> 屬性</h3>
<p>其中需要填入三個屬性</p>
<table>
<thead>
<tr>
<th>Attribute</th>
<th>description</th>
<th>Required</th>
<th>Default</th>
</tr>
</thead>
<tbody>
<tr>
<td>value</td>
<td>要输出的内容</td>
<td>Yes</td>
<td>None</td>
</tr>
<tr>
<td>default</td>
<td>輸出默認值</td>
<td>No</td>
<td>body</td>
</tr>
<tr>
<td>escapeXml</td>
<td>是否忽略XML特殊字符</td>
<td>No</td>
<td>true</td>
</tr>
</tbody>
</table>
<h3 id="示範"><a class="markdownIt-Anchor" href="#示範"></a> 示範</h3>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c:out value=<span class="string">&quot;$&#123;paramaction. &#125;&quot;</span> <span class="keyword">default</span>=<span class="string">&quot;no values&quot;</span> /&gt;&lt;/c:out&gt;</span><br></pre></td></tr></table></figure>
<p>此結果若paramaction不存在,就顯示no values的內容</p>
<hr />
<h2 id="cif"><a class="markdownIt-Anchor" href="#cif"></a> &lt;c:if&gt;</h2>
<h3 id="語法-2"><a class="markdownIt-Anchor" href="#語法-2"></a> 語法</h3>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;&lt;boolean&gt;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;&lt;string&gt;&quot;</span> scope=<span class="string">&quot;&lt;string&gt;&quot;</span>&gt;</span><br><span class="line">   ...</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br></pre></td></tr></table></figure>
<h3 id="屬性-2"><a class="markdownIt-Anchor" href="#屬性-2"></a> 屬性</h3>
<p>其中需要填入三個屬性</p>
<table>
<thead>
<tr>
<th>Attribute</th>
<th>description</th>
<th>Required</th>
<th>Default</th>
</tr>
</thead>
<tbody>
<tr>
<td>test</td>
<td>條件</td>
<td>Yes</td>
<td>None</td>
</tr>
<tr>
<td>var</td>
<td>儲存條件結果</td>
<td>No</td>
<td>None</td>
</tr>
<tr>
<td>scope</td>
<td>作用域</td>
<td>No</td>
<td>page</td>
</tr>
</tbody>
</table>
<h3 id="示範-2"><a class="markdownIt-Anchor" href="#示範-2"></a> 示範</h3>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;param.action == &#x27;add&#x27;&#125;&quot;</span>&gt;</span><br><span class="line"> &lt;table&gt;</span><br><span class="line"> &lt;tr&gt;</span><br><span class="line">   &lt;td&gt;name:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span> /&gt;&lt;/td&gt;</span><br><span class="line"> &lt;/tr&gt;</span><br><span class="line"> &lt;tr&gt;</span><br><span class="line">   &lt;td&gt;number:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;number&quot;</span> /&gt;&lt;/td&gt;</span><br><span class="line"> &lt;/tr&gt;</span><br><span class="line"> &lt;/table&gt;</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br></pre></td></tr></table></figure>
<p>此結果若param.action不等於&quot;add&quot;,就不顯示c:if內部內容</p>
<h5 id="參考資料"><a class="markdownIt-Anchor" href="#參考資料"></a> 參考資料</h5>
<ol>
<li><a href="https://www.runoob.com/jsp/jsp-jstl.html">菜鳥教程</a></li>
<li><a href="https://www.tutorialspoint.com/jsp/jstl_core_out_tag.htm">JSTL - Core &lt;c:out&gt; Tag</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10186941">30 days JSP &amp; Servlet學習紀錄</a></li>
</ol>
]]></content>
      <tags>
        <tag>JSP</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>[JaveScript]JS全端大冒險No.1</title>
    <url>/2022/01/11/JS_adventure_1/</url>
    <content><![CDATA[<h1 id="js認定的資料格式"><a class="markdownIt-Anchor" href="#js認定的資料格式"></a> JS認定的資料格式</h1>
<p>JS跟大多數的語言一樣，都可以用if(data)的簡寫來判斷資料是否存在。</p>
<span id="more"></span>
<h2 id="if判斷"><a class="markdownIt-Anchor" href="#if判斷"></a> if判斷</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numArr = [<span class="number">0</span>,<span class="number">1</span>,<span class="string">&#x27;&#x27;</span>,<span class="literal">null</span>,<span class="literal">undefined</span>];</span><br><span class="line"></span><br><span class="line">numArr.<span class="title function_">forEach</span>(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (element) <span class="variable language_">console</span>.<span class="title function_">log</span>(element);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// $ 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stringArr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="literal">null</span>,<span class="literal">undefined</span>];</span><br><span class="line"></span><br><span class="line">stringArr.<span class="title function_">forEach</span>(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (element) <span class="variable language_">console</span>.<span class="title function_">log</span>(element);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// &quot;a&quot; &quot;B&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> objArr = [&#123;&#125;,&#123;<span class="attr">key</span>:<span class="string">&#x27;&#x27;</span>&#125;,&#123;<span class="attr">key</span>:<span class="literal">null</span>&#125;,&#123;<span class="literal">undefined</span>&#125;];</span><br><span class="line"></span><br><span class="line">objArr.<span class="title function_">forEach</span>(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (element) <span class="variable language_">console</span>.<span class="title function_">log</span>(element);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 全部都成立</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arrArr = [[],[<span class="string">&#x27;&#x27;</span>],[<span class="literal">null</span>],[<span class="literal">undefined</span>],[<span class="number">0</span>],[<span class="string">&#x27;&#x27;</span>,<span class="number">0</span>]];</span><br><span class="line"></span><br><span class="line">arrArr.<span class="title function_">forEach</span>(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (element) <span class="variable language_">console</span>.<span class="title function_">log</span>(element);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 全部都成立</span></span><br></pre></td></tr></table></figure>
<p>所以經過上面的驗證，可以得知JS的資料只要遇到下方這四種狀況，就為false，其他則為true</p>
<pre><code>1. null
2. undefined
3. ''
4. 0
</code></pre>
<blockquote>
<p>巢狀Object及Array則不能直接從最外面判斷，需要寫<strong>深度判斷</strong>。</p>
</blockquote>
<h2 id="typeof判斷"><a class="markdownIt-Anchor" href="#typeof判斷"></a> typeof判斷</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> a);  <span class="comment">//  number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> b);  <span class="comment">//  string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> c);  <span class="comment">//  object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = [];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> d);  <span class="comment">//  object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(d)); <span class="comment">//  [object Array]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> e = <span class="literal">false</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> e);  <span class="comment">//  boolean</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Person</span>); <span class="comment">//  function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jane&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> f);  <span class="comment">//  object</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span>);  <span class="comment">//  undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>); <span class="comment">//  object</span></span><br></pre></td></tr></table></figure>
<p>MDN條列了typeof可能的回傳值</p>
<p><img src="https://i.imgur.com/uXDR4wx.png" alt="" /><br />
來源:<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/typeof">MDN</a></p>
]]></content>
      <tags>
        <tag>JaveScript</tag>
        <tag>JS全端大冒險</tag>
      </tags>
  </entry>
  <entry>
    <title>[JaveScript]JS全端大冒險No.2</title>
    <url>/2022/01/12/JS_adventure_2/</url>
    <content><![CDATA[<h1 id="簡單介紹js資料型別data-type"><a class="markdownIt-Anchor" href="#簡單介紹js資料型別data-type"></a> 簡單介紹JS資料型別(data type)</h1>
<p>JS在資料型別上有以下幾種特點</p>
<ol>
<li>弱型別(loosely typed):JS宣告變數時不需要特別指定型別 類似的語言有PHP Python等等</li>
</ol>
<span id="more"></span>
<p>JS一共有7種資料型別</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 布林</span></span><br><span class="line"><span class="keyword">const</span> booleanData = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Null空集合</span></span><br><span class="line"><span class="keyword">const</span> nullData = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. undefined未定義</span></span><br><span class="line"><span class="keyword">const</span> undefinedData = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 數字</span></span><br><span class="line"><span class="keyword">const</span> numberData = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 大數字BigInt</span></span><br><span class="line"><span class="keyword">const</span> bigintData = <span class="number">9007199254740992n</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 字串String</span></span><br><span class="line"><span class="keyword">const</span> stringData = <span class="string">&#x27;str&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. Symbol</span></span><br><span class="line"><span class="keyword">const</span> symbolData = <span class="title class_">Symbol</span>(<span class="string">&quot;sym&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JaveScript</tag>
        <tag>JS全端大冒險</tag>
      </tags>
  </entry>
  <entry>
    <title>[JaveScript]JS全端大冒險No.3</title>
    <url>/2022/01/14/JS_adventure_3/</url>
    <content><![CDATA[<h1 id="spread-operator"><a class="markdownIt-Anchor" href="#spread-operator"></a> Spread Operator(…)</h1>
<p>Spread Operator(…) 中文稱做拓展運算子，是ES6加入的，用途是<strong>簡化陣列展開</strong>的過程，可以改善以下操作:</p>
<span id="more"></span>
<ul>
<li>取值</li>
<li>複製</li>
<li>合併</li>
<li>轉換型態</li>
</ul>
<h2 id="定義"><a class="markdownIt-Anchor" href="#定義"></a> 定義</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Arr1</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Arr1</span>);</span><br><span class="line"><span class="comment">//$ [ 1, 2, 3, 4 ]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...<span class="title class_">Arr1</span>);</span><br><span class="line"><span class="comment">//$ 1 2 3 4</span></span><br></pre></td></tr></table></figure>
<ul>
<li>展開陣列並轉化為<strong>多個逗點隔開的獨立參數</strong></li>
<li>在陣列前方加上…即可</li>
</ul>
<h2 id="用途"><a class="markdownIt-Anchor" href="#用途"></a> 用途</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//呼叫函式</span></span><br><span class="line"><span class="title function_">myFunction</span>(...iterableObj);</span><br><span class="line"></span><br><span class="line"><span class="comment">//陣列或字串</span></span><br><span class="line">[...iterableObj, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;five&#x27;</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//ECMAScript 2018新增 可用於複製物件</span></span><br><span class="line"><span class="keyword">let</span> objClone = &#123; ...obj &#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JaveScript</tag>
        <tag>JS全端大冒險</tag>
      </tags>
  </entry>
  <entry>
    <title>[JaveScript]JS全端大冒險No.5</title>
    <url>/2022/01/20/JS_adventure_5/</url>
    <content><![CDATA[<h1 id="array及object排序的一些方法分享"><a class="markdownIt-Anchor" href="#array及object排序的一些方法分享"></a> Array及Object排序的一些方法分享</h1>
<p>我們在對Array或Object做一系列處理之後常常會需要使用到排序來讓資料按照我想要的順序排列，例如輸出成CSV，或是按照既定格式塞資料等等的，這時我們該如何排序我們的Array及Object呢?</p>
<span id="more"></span>
<h2 id="array"><a class="markdownIt-Anchor" href="#array"></a> Array</h2>
<h2 id="object"><a class="markdownIt-Anchor" href="#object"></a> Object</h2>
<h5 id="參考資料"><a class="markdownIt-Anchor" href="#參考資料"></a> 參考資料</h5>
<ol>
<li><a href="https://dotblogs.com.tw/lance_blog/2019/03/07/201504">在 JavaScript 中，如何以 Object 內的 properties 進行陣列排序</a></li>
<li><a href="https://mrcodingroom.freesite.host/jsarray%E3%80%81object%E6%8E%92%E5%BA%8F-%E6%8E%92%E5%A4%A7%E5%B0%8F/">[JS]Array、Object排序 排大小</a></li>
</ol>
]]></content>
      <tags>
        <tag>JaveScript</tag>
        <tag>JS全端大冒險</tag>
      </tags>
  </entry>
  <entry>
    <title>[JaveScript]JS全端大冒險No.4</title>
    <url>/2022/01/17/JS_adventure_4/</url>
    <content><![CDATA[<h1 id="jquery控制html表單元素"><a class="markdownIt-Anchor" href="#jquery控制html表單元素"></a> jQuery控制HTML表單元素</h1>
<p>jQuery可以輕鬆的獲取及控制HTML元素，這也是他受到前端工程師廣泛喜愛的原因之一，今天我們來整理一下jQuery如何實現對Form Element的<strong>CRUD</strong>，主要有以下幾個元素:</p>
<span id="more"></span>
<ul>
<li>&lt;input&gt; :我個人 應該也是所有人寫前端最常用到的元素
<ul>
<li>type=“text” :文字輸入欄</li>
<li>type=“checkbox” :核取方塊(打勾,多選)</li>
<li>type=“radio” :選取按鈕(圈圈,單選)</li>
</ul>
</li>
<li>&lt;select&gt;, &lt;option&gt;
<ul>
<li>select 宣告下拉式選單的範圍</li>
<li>option 宣告選項</li>
</ul>
</li>
</ul>
<h2 id="html示範表單"><a class="markdownIt-Anchor" href="#html示範表單"></a> HTML示範表單</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;!--文字輸入 --&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; id=&#x27;inputDataID&#x27;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;!--核取方塊 --&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; name=&quot;checkBox1&quot; id=&quot;checkBox1ID&quot;&gt;</span><br><span class="line">    &lt;label for=&quot;checkBox1ID&quot; value=&quot;I am checkBox1&quot;&gt;checkBox1&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; name=&quot;checkBox2&quot; id=&quot;checkBox2ID&quot;&gt;</span><br><span class="line">    &lt;label for=&quot;checkBox2ID&quot; value=&quot;I am checkBox2&quot;&gt;checkBox2&lt;/label&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;!--選取按鈕 --&gt;</span><br><span class="line">    &lt;input type=&quot;radio&quot; name=&quot;radioButtonGroup&quot; id=&quot;radioButton1ID&quot; value=&quot;I am radioButton1&quot;&gt;</span><br><span class="line">    &lt;label for=&quot;radioButton1ID&quot;&gt;radioButton1&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;radio&quot; name=&quot;radioButtonGroup&quot; id=&quot;radioButton2ID&quot; value=&quot;I am radioButton2&quot;&gt;</span><br><span class="line">    &lt;label for=&quot;radioButton2ID&quot;&gt;radioButton2&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;radio&quot; name=&quot;radioButtonGroup&quot; id=&quot;radioButton3ID&quot; value=&quot;I am radioButton3&quot;&gt;</span><br><span class="line">    &lt;label for=&quot;radioButton3ID&quot;&gt;radioButton3&lt;/label&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;!--下拉式選單 --&gt;</span><br><span class="line">    &lt;select id=&quot;selectGroup&quot;&gt;</span><br><span class="line">        &lt;option id=&quot;option0ID&quot; value=&quot;&quot;&gt;&lt;/option&gt;</span><br><span class="line">        &lt;option id=&quot;option1ID&quot; value=&quot;I am Option 1&quot;&gt;Option 1&lt;/option&gt;</span><br><span class="line">        &lt;option id=&quot;option2ID&quot; value=&quot;I am Option 2&quot;&gt;Option 2&lt;/option&gt;</span><br><span class="line">        &lt;option id=&quot;option3ID&quot; value=&quot;I am Option 3&quot;&gt;Option 3&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;button id=&quot;sandRequest&quot;&gt;sand&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;label id=&quot;result&quot;&gt;&lt;/label&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h2 id="獲取值read"><a class="markdownIt-Anchor" href="#獲取值read"></a> 獲取值(Read)</h2>
<p>jQuery可以用下面這兩行簡單的程式碼來獲取HTML element的值(value)或是文字(text)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#inputDataID&quot;</span>).<span class="title function_">text</span>(); <span class="comment">//取出文字</span></span><br><span class="line">$(<span class="string">&quot;#option1ID&quot;</span>).<span class="title function_">val</span>(); <span class="comment">//取出值</span></span><br></pre></td></tr></table></figure>
<p>其中</p>
<ul>
<li>錢字符($)代表引用jQuery</li>
<li>#inputDataID透過ID選取element(當然你想用class或是name 甚至直接指定element tag都可以)</li>
<li>text()取出element裡的文字(如果要取出value的話則要寫成val()</li>
</ul>
<h2 id="修改值update"><a class="markdownIt-Anchor" href="#修改值update"></a> 修改值(Update)</h2>
<h2 id="增加elementcreate"><a class="markdownIt-Anchor" href="#增加elementcreate"></a> 增加element(Create)</h2>
<h2 id="刪除elementdelete"><a class="markdownIt-Anchor" href="#刪除elementdelete"></a> 刪除element(Delete)</h2>
]]></content>
      <tags>
        <tag>JaveScript</tag>
        <tag>JS全端大冒險</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>[JaveScript]JS全端大冒險No.6</title>
    <url>/2022/01/21/JS_adventure_6/</url>
    <content><![CDATA[<h1 id="如何在js中把有小數點的數值四捨五入到小數點後兩位"><a class="markdownIt-Anchor" href="#如何在js中把有小數點的數值四捨五入到小數點後兩位"></a> 如何在JS中把有小數點的數值四捨五入到小數點後兩位?</h1>
<p>假設我們有<code>[123,123.005,123.49598347,0]</code>這樣的一個陣列，我想把陣列裡的數值都算到小數點後第2位，而且要四捨五入，得到類似<code>[123,123.01,123.5,0]</code>的陣列，我可以怎麼做呢?</p>
<span id="more"></span>
<h2 id="1-使用正規表達式"><a class="markdownIt-Anchor" href="#1-使用正規表達式"></a> 1. 使用正規表達式</h2>
<p>先寫出一個正規表達式，偵測</p>
<ul>
<li>如果有小數點，那小數點後的位數只能到2位</li>
<li>如果沒有小數點，那就直接過關(group1)</li>
</ul>
<blockquote>
<p>正規表達式究竟該怎麼寫，怎麼讀，請按<a href="#//TODO">這邊</a></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> regforTest = <span class="regexp">/(^.*.\...)|(^.*.)/</span>;</span><br></pre></td></tr></table></figure>
<p>接著 我們對目標陣列使用<code>filter()</code>回傳符合正規表達式的數值，就會得到答案如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numArr = [<span class="number">123</span>,<span class="number">123.005</span>,<span class="number">123.49598347</span>,<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">numArr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">element,index</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> match = regforTest.<span class="title function_">exec</span>(element);</span><br><span class="line">    <span class="keyword">if</span> (match[<span class="number">1</span>])&#123;</span><br><span class="line">        numArr[index] = match[<span class="number">1</span>];</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        numArr[index] = match[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numArr);<span class="comment">// [123,123.00,123.49,0]</span></span><br></pre></td></tr></table></figure>
<p>到小數點後這個目標是達成了，但是卻我們不需要小數點後多餘的00，於是改良一下這個語法，運用<code>parseFloat()</code>自動刪除多餘的00:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numArr = [<span class="number">123</span>,<span class="number">123.005</span>,<span class="number">123.49598347</span>,<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">numArr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">element,index</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> match = regforTest.<span class="title function_">exec</span>(element);</span><br><span class="line">        <span class="keyword">if</span> (match[<span class="number">1</span>])&#123;</span><br><span class="line">        numArr[index] = <span class="built_in">parseFloat</span>(match[<span class="number">1</span>].<span class="title function_">toString</span>());</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        numArr[index] = <span class="built_in">parseFloat</span>(match[<span class="number">2</span>].<span class="title function_">toString</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numArr);<span class="comment">// [123,123,123.49,0]</span></span><br></pre></td></tr></table></figure>
<p>到這一步，總算是成功刪到剩兩位了，如果你只想要簡單的<strong>完全進位</strong>那到這邊就可以啦!</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用正規表達式 完整程式碼</span></span><br><span class="line"><span class="keyword">let</span> numArr = [<span class="number">123</span>,<span class="number">123.005</span>,<span class="number">123.49598347</span>,<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> regforTest = <span class="regexp">/(^.*.\...)|(^.*.)/</span>;</span><br><span class="line"></span><br><span class="line">numArr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">element,index</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> match = regforTest.<span class="title function_">exec</span>(element);</span><br><span class="line">        <span class="keyword">if</span> (match[<span class="number">1</span>])&#123;</span><br><span class="line">        numArr[index] = <span class="built_in">parseFloat</span>(match[<span class="number">1</span>].<span class="title function_">toString</span>());</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        numArr[index] = <span class="built_in">parseFloat</span>(match[<span class="number">2</span>].<span class="title function_">toString</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numArr);</span><br></pre></td></tr></table></figure>
<hr />
<p>但是如果你想要學的是四捨五入的進位，那你可能還要接著看下去。</p>
<h2 id="2-直接寫一個函式判斷進位"><a class="markdownIt-Anchor" href="#2-直接寫一個函式判斷進位"></a> 2. 直接寫一個函式判斷進位!</h2>
<!-- TODO -->
<h5 id="參考資料"><a class="markdownIt-Anchor" href="#參考資料"></a> 參考資料</h5>
<ol>
<li><a href="https://www.delftstack.com/zh-tw/howto/javascript/javascript-round-to-2-decimal-places/">在 JavaScript 中將數字四捨五入到小數點後兩位</a></li>
</ol>
]]></content>
      <tags>
        <tag>JaveScript</tag>
        <tag>JS全端大冒險</tag>
        <tag>RegEx</tag>
      </tags>
  </entry>
  <entry>
    <title>[JaveScript]JS全端大冒險No.7 body-parse</title>
    <url>/2022/04/06/JS_adventure_7/</url>
    <content><![CDATA[<h1 id="body-parse是什麼"><a class="markdownIt-Anchor" href="#body-parse是什麼"></a> body-parse是什麼</h1>
<p>假設我們有<code>[123,123.005,123.49598347,0]</code>這樣的一個陣列，我想把陣列裡的數值都算到小數點後第2位，而且要四捨五入，得到類似<code>[123,123.01,123.5,0]</code>的陣列，我可以怎麼做呢?</p>
<span id="more"></span>
<h2 id="1-使用正規表達式"><a class="markdownIt-Anchor" href="#1-使用正規表達式"></a> 1. 使用正規表達式</h2>
<p>先寫出一個正規表達式，偵測</p>
<ul>
<li>如果有小數點，那小數點後的位數只能到2位</li>
<li>如果沒有小數點，那就直接過關(group1)</li>
</ul>
<blockquote>
<p>正規表達式究竟該怎麼寫，怎麼讀，請按<a href="#//TODO">這邊</a></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> regforTest = <span class="regexp">/(^.*.\...)|(^.*.)/</span>;</span><br></pre></td></tr></table></figure>
<p>接著 我們對目標陣列使用<code>filter()</code>回傳符合正規表達式的數值，就會得到答案如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numArr = [<span class="number">123</span>,<span class="number">123.005</span>,<span class="number">123.49598347</span>,<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">numArr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">element,index</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> match = regforTest.<span class="title function_">exec</span>(element);</span><br><span class="line">    <span class="keyword">if</span> (match[<span class="number">1</span>])&#123;</span><br><span class="line">        numArr[index] = match[<span class="number">1</span>];</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        numArr[index] = match[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numArr);<span class="comment">// [123,123.00,123.49,0]</span></span><br></pre></td></tr></table></figure>
<p>到小數點後這個目標是達成了，但是卻我們不需要小數點後多餘的00，於是改良一下這個語法，運用<code>parseFloat()</code>自動刪除多餘的00:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numArr = [<span class="number">123</span>,<span class="number">123.005</span>,<span class="number">123.49598347</span>,<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">numArr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">element,index</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> match = regforTest.<span class="title function_">exec</span>(element);</span><br><span class="line">        <span class="keyword">if</span> (match[<span class="number">1</span>])&#123;</span><br><span class="line">        numArr[index] = <span class="built_in">parseFloat</span>(match[<span class="number">1</span>].<span class="title function_">toString</span>());</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        numArr[index] = <span class="built_in">parseFloat</span>(match[<span class="number">2</span>].<span class="title function_">toString</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numArr);<span class="comment">// [123,123,123.49,0]</span></span><br></pre></td></tr></table></figure>
<p>到這一步，總算是成功刪到剩兩位了，如果你只想要簡單的<strong>完全進位</strong>那到這邊就可以啦!</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用正規表達式 完整程式碼</span></span><br><span class="line"><span class="keyword">let</span> numArr = [<span class="number">123</span>,<span class="number">123.005</span>,<span class="number">123.49598347</span>,<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> regforTest = <span class="regexp">/(^.*.\...)|(^.*.)/</span>;</span><br><span class="line"></span><br><span class="line">numArr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">element,index</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> match = regforTest.<span class="title function_">exec</span>(element);</span><br><span class="line">        <span class="keyword">if</span> (match[<span class="number">1</span>])&#123;</span><br><span class="line">        numArr[index] = <span class="built_in">parseFloat</span>(match[<span class="number">1</span>].<span class="title function_">toString</span>());</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        numArr[index] = <span class="built_in">parseFloat</span>(match[<span class="number">2</span>].<span class="title function_">toString</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numArr);</span><br></pre></td></tr></table></figure>
<hr />
<p>但是如果你想要學的是四捨五入的進位，那你可能還要接著看下去。</p>
<h2 id="2-直接寫一個函式判斷進位"><a class="markdownIt-Anchor" href="#2-直接寫一個函式判斷進位"></a> 2. 直接寫一個函式判斷進位!</h2>
<!-- TODO -->
<h5 id="參考資料"><a class="markdownIt-Anchor" href="#參考資料"></a> 參考資料</h5>
<ol>
<li><a href="https://www.delftstack.com/zh-tw/howto/javascript/javascript-round-to-2-decimal-places/">在 JavaScript 中將數字四捨五入到小數點後兩位</a></li>
</ol>
]]></content>
      <tags>
        <tag>JaveScript</tag>
        <tag>express</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>[金屬樂團]Shokran</title>
    <url>/2020/03/30/Shokran_band_refer/</url>
    <content><![CDATA[<h1 id="金屬樂團shokran"><a class="markdownIt-Anchor" href="#金屬樂團shokran"></a> [金屬樂團]Shokran</h1>
<blockquote>
<p>一群誤入邪教的毛子</p>
</blockquote>
<hr />
<table>
<thead>
<tr>
<th>樂團</th>
<th>Shokran</th>
</tr>
</thead>
<tbody>
<tr>
<td>地區</td>
<td>俄羅斯</td>
</tr>
<tr>
<td>年代</td>
<td>2012~至今</td>
</tr>
<tr>
<td>經紀公司</td>
<td>獨立樂團</td>
</tr>
<tr>
<td>曲風</td>
<td>Djent,Metalcore</td>
</tr>
<tr>
<td>社群</td>
<td><a href="https://www.facebook.com/Sh0kran">Facebook</a>,<a href="https://www.instagram.com/shokran_band/">Instagram</a>,<a href="https://www.youtube.com/user/ShokranBand">YouTube</a>,<a href="https://vk.com/shokran">vk</a></td>
</tr>
</tbody>
</table>
<h2 id="團員"><a class="markdownIt-Anchor" href="#團員"></a> 團員</h2>
<ul>
<li>主唱 - Andrew Ivashchenko</li>
<li>吉他 - Dmitry Demyanenko</li>
<li>貝斯 - Rodion Shevchenko</li>
<li>爵士鼓 - Michael Isaev</li>
<li>鍵盤 - Ivan Tsoyjiv</li>
</ul>
<h3 id="曾經的團員"><a class="markdownIt-Anchor" href="#曾經的團員"></a> 曾經的團員</h3>
<ul>
<li>主唱 - Sereza Raev</li>
<li>貝斯 - Valery Yushkevich</li>
<li>吉他 - Alexander Burlakov</li>
</ul>
<p>成軍於2012年的Shokran，最早只是吉他手Dmitry Demyanenko的一張個人EP <strong>Sixth Sense</strong>，<br />
純音樂的Djent，聽一次是不錯，但是沒辦法反覆聽，不是很合我的胃口。</p>
<blockquote>
<p><img src="https://i.imgur.com/BDNdGP4.jpg" alt="" /><br />
個人評分:2.5</p>
</blockquote>
<p>聞訊而來的主唱Sereza Raev、爵士鼓Michael Isaev、節奏吉他Alexander Burlakov還有貝斯Rodion Shevchenko隨即加入了樂團，不到一年的時間，Shokran就由一人成長成一個完整的樂團。</p>
<p>2014年，Shokran發行了他們的第一張專輯<strong>Supreme Truth</strong>，並開始在俄羅斯各地巡迴，此時他們在專輯裡就展現了濃厚的埃及氣氛，主唱的聲音也很有變化性，整張專輯聽起來給人耳目一新的清新感。</p>
<blockquote>
<p><img src="https://i.imgur.com/p3ND6OY.jpg" alt="" /><br />
個人評分:4</p>
</blockquote>
<p>正當樂團平步青雲時，主唱貝斯跟節奏吉他的退團影響了整個樂團，也導致了樂團成型為現在的成員。</p>
<p>2016年，Shokran發行了樂團第二張專輯<strong>Exodus</strong>，這張專輯原定是2015年發行，但是遲遲沒有找到經紀公司，於是最後便獨立發行，這張專輯也是濃濃的埃及風，並且因為鍵盤的加入，使得整張專輯聽起來更為豐富，主唱感覺也更適合這類型的音樂。</p>
<blockquote>
<p><img src="https://i.imgur.com/MNyr0cI.jpg" alt="" /><br />
個人評分:4.5</p>
</blockquote>
<p>2016年Exodus的成功使得Shokran逐漸進入大眾的視野，原本的區域巡迴也變成了世界巡演，原Bass手Rodion Shevchenko也在這時回歸了。</p>
<p>2019，Shokran發行了他們最新的一張專輯，我認為也是他們的登峰造極之作，<strong>Ethereal</strong>，不過這張專輯的熱度顯然沒有上一張高，稍嫌可惜，總體評價算是我19年覺得最好聽的專輯TOP5了，值得細細品嘗。</p>
<blockquote>
<p><img src="https://i.imgur.com/2DQN9g4.jpg" alt="" /><br />
個人評價:5(超過一百分)</p>
</blockquote>
<h2 id="推薦幾首單曲"><a class="markdownIt-Anchor" href="#推薦幾首單曲"></a> 推薦幾首單曲</h2>
<iframe width="560" height="315" src="https://www.youtube.com/embed/FqgnGq_x2uU" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
<iframe width="560" height="315" src="https://www.youtube.com/embed/ed6oROIWDn8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
<iframe width="560" height="315" src="https://www.youtube.com/embed/EO18nR1pWOw" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
]]></content>
      <categories>
        <category>金屬樂團</category>
      </categories>
      <tags>
        <tag>Metal</tag>
        <tag>Djent</tag>
        <tag>Metalcore</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hexo]運用自訂css調整inline codeblock style</title>
    <url>/2022/01/22/Use_customCSS_for_inlineCodeBlockStyle_on_Hexo_NexT/</url>
    <content><![CDATA[<h1 id="運用自訂css調整inline-codeblock-style"><a class="markdownIt-Anchor" href="#運用自訂css調整inline-codeblock-style"></a> 運用自訂css調整inline codeblock style</h1>
<p>前幾天開始嘗試第N次架設自己的Blog(每次都無法持之以恆QQ) 使用了中文社群資源很多的Hexo NexT 遇上了一個小問題 我用的是深色的主題 而且我已經在config裡配置codeblock的highlight_theme了(如下) 但是inline codeblock居然是白色的(感覺是優化還沒做很好)</p>
<p><img src="https://i.imgur.com/gDzu94b.png" alt="inline codeblock background color is white" /></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span></span><br><span class="line">  <span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">night</span> <span class="string">eighties</span> <span class="comment">#就是這一行調整顏色</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span></span><br></pre></td></tr></table></figure>
<p>看久了真的很矮油(台語) 所以便著手處理 找了網上幾篇文章之後 便找到了類似的自己寫CSS的教學 於是今天就趁這個機會來學怎麼自己寫自己網站的CSS吧!</p>
<h2 id="文件配置"><a class="markdownIt-Anchor" href="#文件配置"></a> 文件配置</h2>
<p>首先 themes/next/source/css/ 這就是NexT使用的css資料夾 在裡面建立 _custom/custom.styl<br />
第二步 開啟themes/next/source/css/_schemes/{你的主題 這邊我是選Pisces}/index.styl<br />
在裡面import剛剛建立的新檔案</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;_layout&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;_header&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;_menu&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;_sub-menu&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;_sidebar&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;../../_custom/custom&#x27;</span>; <span class="comment">//這邊import</span></span><br></pre></td></tr></table></figure>
<p>最後 我們就可以快樂的在custom裡寫下我們想要的樣式啦!</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#282828</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">margin</span> : auto <span class="number">2px</span> auto <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">179</span>, <span class="number">179</span>, <span class="number">179</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然後我們就可以得到美美的inline codeblock 完結灑花~</p>
<p><img src="https://i.imgur.com/iRbS8Uk.png" alt="inline codeblock background color is black (end)" /></p>
<h5 id="參考資料"><a class="markdownIt-Anchor" href="#參考資料"></a> 參考資料</h5>
<ol>
<li><a href="https://www.cnblogs.com/LyShark/p/11834144.html">Hexo之Next主题美化代码</a></li>
</ol>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>Blog</tag>
        <tag>CSS</tag>
        <tag>SCSS</tag>
      </tags>
  </entry>
  <entry>
    <title>到底怎麼寫好函式的說明</title>
    <url>/2022/03/07/Write_A_Comments_in_your_code/</url>
    <content><![CDATA[<h1 id="引言"><a class="markdownIt-Anchor" href="#引言"></a> 引言</h1>
<p>註解，通常被工程師用來寫下一些自己想看但是不想給電腦看的東西。</p>
<ul>
<li>//TODO</li>
<li><a href="//system.print">//system.print</a>(‘1’);</li>
<li>//哈哈哈我是註解啦</li>
</ul>
<p>但是註解也有一些特別的用途<br />
例如幫我們寫的程式加上說明，以方便之後維護或是你有一大堆function要引用時知道哪個是幹嘛用的，<br />
但程式碼五花八門，他們的註解寫法也各不相同，所以就來看我幫你們寫好的統整吧哈哈哈!</p>
<span id="more"></span>
<h1 id="目錄"><a class="markdownIt-Anchor" href="#目錄"></a> 目錄</h1>
<ul>
<li><a href="#C#">C#</a></li>
<li><a href="#Python">Python</a></li>
<li><a href="#JavaScript">JavaScript</a></li>
</ul>
<h1 id="c"><a class="markdownIt-Anchor" href="#c"></a> C#</h1>
<p>C# 可以使用一種XML標記的方法來撰寫說明，有以下兩種寫法</p>
<ul>
<li>在每行備註前面使用三個斜線<code>///</code>來使用</li>
<li>使用/**和**/把說明包住(適用單行與多行註解)</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>Class <span class="doctag">&lt;c&gt;</span>Point<span class="doctag">&lt;/c&gt;</span> models a point in a two-dimensional</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> plane.<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Point</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>method <span class="doctag">&lt;c&gt;</span>draw<span class="doctag">&lt;/c&gt;</span> renders the point.<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span>()</span> &#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** &lt;summary&gt;Class &lt;c&gt;Point&lt;/c&gt; models a point in a two-dimensional</span></span><br><span class="line"><span class="comment">plane.&lt;/summary&gt;</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Point</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>method <span class="doctag">&lt;c&gt;</span>draw<span class="doctag">&lt;/c&gt;</span> renders the point.<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span>()</span> &#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="xml標記規則速查表"><a class="markdownIt-Anchor" href="#xml標記規則速查表"></a> XML標記規則速查表</h2>
<table>
<thead>
<tr>
<th>Tag</th>
<th>目的</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href=""><code>&lt;c&gt;</code></a></td>
<td>以類似程式碼的字形設定文字</td>
</tr>
<tr>
<td><a href="#code"><code>&lt;code&gt;</code></a></td>
<td>程式碼</td>
</tr>
<tr>
<td><a href="#example"><code>&lt;example&gt;</code></a></td>
<td>範例</td>
</tr>
<tr>
<td><a href=""><code>&lt;exception&gt;</code></a></td>
<td>例外狀況</td>
</tr>
<tr>
<td><a href="#param"><code>&lt;param&gt;</code></a></td>
<td>描述參數</td>
</tr>
<tr>
<td><a href="#summary"><code>&lt;summary&gt;</code></a></td>
<td>描述類型或類型的成員</td>
</tr>
</tbody>
</table>
<h2 id="c-2"><a class="markdownIt-Anchor" href="#c-2"></a> <code>&lt;c&gt;</code></h2>
<p>行內程式碼(inline) 如markdown中的行內程式碼區塊</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">## `&lt;code&gt;`</span></span><br><span class="line">一段程式碼 如markdown中的程式碼區塊</span><br><span class="line"></span><br><span class="line">語法:</span><br><span class="line">```xml</span><br><span class="line">    &lt;code&gt;source code <span class="keyword">or</span> program output&lt;/code&gt;</span><br></pre></td></tr></table></figure>
<p>範例:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**&lt;summary&gt;This method changes the point&#x27;s location by</span></span><br><span class="line"><span class="comment">   the given x- and y-offsets.</span></span><br><span class="line"><span class="comment">&lt;example&gt;For example:</span></span><br><span class="line"><span class="comment">&lt;code&gt;</span></span><br><span class="line"><span class="comment">   Point p = new Point(3,5);</span></span><br><span class="line"><span class="comment">   p.Translate(-1,3);</span></span><br><span class="line"><span class="comment">&lt;/code&gt;</span></span><br><span class="line"><span class="comment">results in &lt;c&gt;p&lt;/c&gt;&#x27;s having the value (2,8).</span></span><br><span class="line"><span class="comment">&lt;/example&gt;</span></span><br><span class="line"><span class="comment">&lt;/summary&gt;</span></span><br><span class="line"><span class="comment">**/</span>    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Translate</span>(<span class="params"><span class="built_in">int</span> xor, <span class="built_in">int</span> yor</span>)</span> &#123;</span><br><span class="line">    X += xor;</span><br><span class="line">    Y += yor;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>
<h2 id="example"><a class="markdownIt-Anchor" href="#example"></a> <code>&lt;example&gt;</code></h2>
<p>在說明內寫入簡單的範例，一般也會使用到<a href="#code"><code>&lt;code&gt;</code></a></p>
<p>語法:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">example</span>&gt;</span>description<span class="tag">&lt;/<span class="name">example</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>範例:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">&lt;summary&gt;This method changes the point&#x27;s    location by</span></span><br><span class="line"><span class="comment">    the given x- and y-offsets.</span></span><br><span class="line"><span class="comment">&lt;example&gt;For example:</span></span><br><span class="line"><span class="comment">&lt;code&gt;</span></span><br><span class="line"><span class="comment">   Point p = new Point(3,5);</span></span><br><span class="line"><span class="comment">   p.Translate(-1,3);</span></span><br><span class="line"><span class="comment">&lt;/code&gt;</span></span><br><span class="line"><span class="comment">results in &lt;c&gt;p&lt;/c&gt;&#x27;s having the value  (2,8).</span></span><br><span class="line"><span class="comment">&lt;/example&gt;</span></span><br><span class="line"><span class="comment">&lt;/summary&gt; </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Translate</span>(<span class="params"><span class="built_in">int</span> xor, <span class="built_in">int</span> yor</span>)</span> &#123;</span><br><span class="line">    X += xor;</span><br><span class="line">    Y += yor;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>
<h2 id="param"><a class="markdownIt-Anchor" href="#param"></a> <code>&lt;param&gt;</code></h2>
<p>這個標記是用來描述方法、函式或索引子的參數。</p>
<p>語法:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span>description<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>範例:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** &lt;summary&gt;This method changes the point&#x27;s location to</span></span><br><span class="line"><span class="comment">/    the given coordinates.&lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/ &lt;param name=&quot;xor&quot;&gt;the new x-coordinate.&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/ &lt;param name=&quot;yor&quot;&gt;the new y-coordinate.&lt;/param&gt;</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Move</span>(<span class="params"><span class="built_in">int</span> xor, <span class="built_in">int</span> yor</span>)</span> &#123;</span><br><span class="line">    X = xor;</span><br><span class="line">    Y = yor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="summary"><a class="markdownIt-Anchor" href="#summary"></a> <code>&lt;summary&gt;</code></h2>
<p>在說明內寫入簡單的範例，一般也會使用到<a href="#code"><code>&lt;code&gt;</code></a></p>
<p>語法:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">summary</span>&gt;</span>description<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>範例:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>This constructor initializes the new Point to (0,0).<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Point</span>() : <span class="title">this</span>(<span class="params"><span class="number">0</span>,<span class="number">0</span></span>)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="javascript"><a class="markdownIt-Anchor" href="#javascript"></a> JavaScript</h1>
<h2 id="範例"><a class="markdownIt-Anchor" href="#範例"></a> 範例</h2>
<h2 id="returns"><a class="markdownIt-Anchor" href="#returns"></a> <a href="https://jsdoc.app/tags-returns.html">@returns</a></h2>
<p>returns 就是定義你的函式要回傳什麼，這應該是不需多解釋。</p>
<h3 id="synteax"><a class="markdownIt-Anchor" href="#synteax"></a> Synteax</h3>
<p><code>@returns [&#123;type&#125;] [description]</code></p>
<h3 id="常見的幾種寫法"><a class="markdownIt-Anchor" href="#常見的幾種寫法"></a> 常見的幾種寫法</h3>
<ul>
<li>回傳一個值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the sum of a and b</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">a</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">b</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">number</span>&#125; Sum of a and b</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>可能會有多個回傳值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the sum of a and b</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">a</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">b</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">boolean</span>&#125; retArr If set to true, the function will return an array</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">(number|Array)</span>&#125; Sum of a and b or an array that contains a, b and the sum of a and b.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b, retArr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (retArr) &#123;</span><br><span class="line">        <span class="keyword">return</span> [a, b, a + b];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>回傳一個 promise</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the sum of a and b</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">a</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">b</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">Promise</span>&#125; Promise object represents the sum of a and b</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sumAsync</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(a + b);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="python"><a class="markdownIt-Anchor" href="#python"></a> Python</h1>
<h5 id="參考資料"><a class="markdownIt-Anchor" href="#參考資料"></a> 參考資料</h5>
<ol>
<li><a href="https://docs.microsoft.com/zh-tw/dotnet/csharp/language-reference/language-specification/documentation-comments#introduction">文件註解</a></li>
<li><a href="https://jsdoc.app/tags-returns.html">@use JSDoc</a></li>
</ol>
]]></content>
      <tags>
        <tag>C#</tag>
        <tag>Csharp</tag>
      </tags>
  </entry>
  <entry>
    <title>怎麼建立及使用 GitHub Deploy Keys</title>
    <url>/2022/10/14/GitHub/github-deploy-keys-tutorial/</url>
    <content><![CDATA[<h1 id="怎麼建立及使用-github-deploy-keys"><a class="markdownIt-Anchor" href="#怎麼建立及使用-github-deploy-keys"></a> 怎麼建立及使用 GitHub Deploy Keys</h1>
<p>跟小夥伴一起使用 GitHub 時，每次都只能使用 https 來連接遠端伺服器(也就是 GitHub )，今天就來教大家怎麼建立及使用 GitHub Deply Keys ，然後快樂的用 ssh 來操作 repo !</p>
<p>首先，要建立 Deploy Keys 之前，必須先有一個 repository ，這邊使用我新建立的專案如下：</p>
<p><img src="https://i.imgur.com/ga1anpt.png" alt="GitHub-Repo-GoPlayground" /></p>
<p>這是一個讓我練習 <code>Golang</code> 的專案。</p>
<p>在還沒建立 Deploy Keys 之前，我們可以先試試看現在用 SSH 會怎麼樣，這邊我們使用的 <code>GUI Client</code> 是 <a href="https://tortoisegit.org/"><code>TortoiseGit</code></a></p>
<blockquote>
<p>如果你想使用其他的 <code>GUI Client</code> 可以參考<a href="https://git-scm.com/downloads/guis">這份官方文件</a>～</p>
</blockquote>
<p><img src="https://i.imgur.com/5OjmWf4.png" alt="tortioseGit-Git-clone-when-non-sshkey" /></p>
<p>按下 ok</p>
<p>跳出了一個錯誤，跟我們說沒有足夠的權限存取專案。</p>
<p><img src="https://i.imgur.com/jBDwYgF.png" alt="tortioseGit-Git-clone-when-non-sshkey-err-msg" /></p>
<p>接著我們就來把這個問題解決吧～</p>
<h2 id="建立-deploy-keys"><a class="markdownIt-Anchor" href="#建立-deploy-keys"></a> 建立 <code>Deploy Keys</code></h2>
<h3 id="開啟-github-裡加入-deploy-keys-的畫面"><a class="markdownIt-Anchor" href="#開啟-github-裡加入-deploy-keys-的畫面"></a> 開啟 <code>GitHub</code> 裡加入 <code>Deploy Keys</code> 的畫面</h3>
<blockquote>
<p><code>Deploy Keys</code> 是一串 <code>SSh key</code> ，可以用在很多地方。</p>
</blockquote>
<p><code>Deploy Keys</code> 是分專案建立的，所以首先我們先打開要建立 <code>Deploy Keys</code> 的專案，點擊工具列的 <code>Settings</code></p>
<p><img src="https://i.imgur.com/7cRv9rM.png" alt="open-github-to-repo-setting" /></p>
<p>然後我們要點擊左邊功能列裡的 <code>Deploy keys</code></p>
<p><img src="https://i.imgur.com/ratAggU.png" alt="github-on-deploy-keys" /></p>
<p>這時可以看到畫面上，我們還沒有任何 Deploy keys</p>
<p>點擊右方 <code>Add deploy key</code> 按鈕跳出以下畫面</p>
<p><img src="https://i.imgur.com/JN3UV20.png" alt="add-deploy-key" /></p>
<p>這個地方就是我們要輸入 <code>Deploy Key</code> 的地方，這時我們必須使用到 <code>SSH-keygen</code> 來產生 <code>SSH key</code> 或是有些人會說金鑰</p>
<h3 id="使用-ssh-keygen-產生-ssh-key"><a class="markdownIt-Anchor" href="#使用-ssh-keygen-產生-ssh-key"></a> 使用 <code>SSH-keygen</code> 產生 <code>SSH key</code></h3>
<p>此次教學使用 <a href="https://www.puttygen.com/"><code>puTTYgen</code></a> 簡單，快速。</p>
<p>開啟 <a href="https://www.puttygen.com/"><code>puTTYgen</code></a> ：</p>
<p><img src="https://i.imgur.com/qJQZ11f.png" alt="puTTYgen" /></p>
<p>下方是加密的演算法，我推薦使用中下紅框處的 ECDSA ，勾選起來。</p>
<p>設定好後就可以按左方紅框處的 <code>Generate</code> 了，按完之後 <a href="https://www.puttygen.com/"><code>puTTYgen</code></a> 會提示你在程式內移動滑鼠，這時 <a href="https://www.puttygen.com/"><code>puTTYgen</code></a> 會按照滑鼠的軌跡生成獨一無二的 <code>SSH Key</code> ，就是下方的 <code>Key</code> 裡面的東東，還會生成一份私鑰，但是不會顯示出來。</p>
<p><img src="https://i.imgur.com/41LnP1C.png" alt="ssh-key" /></p>
<p>點擊下方紅框處 <code>Save private key</code> ，把私鑰先儲存起來，這時他會提示我們沒有加密，沒關係，因為這是要給 GitHub 使用的。</p>
<blockquote>
<p>私鑰請儲存在安全的地方，也不要放到網路上，避免被其他人盜用！</p>
</blockquote>
<p><img src="https://i.imgur.com/T9pcEHJ.png" alt="private-key" /></p>
<h3 id="把產生出來的-public-key-放到-github-上"><a class="markdownIt-Anchor" href="#把產生出來的-public-key-放到-github-上"></a> 把產生出來的 <code>Public key</code> 放到 <code>GitHub</code> 上</h3>
<p>下方紅框處就是產生出來的 <code>Public key</code> 我們把他複製起來</p>
<p><img src="https://i.imgur.com/16G6xih.png" alt="public-key" /></p>
<p>貼上到剛剛第一步打開的畫面，如下：</p>
<p><img src="https://i.imgur.com/DExwvaL.png" alt="github-deploy-keys-add-public-key" /></p>
<p>然後把紅框處的 Title 填下，可以填你喜歡的就好，如果你需要寫入權限的話， <code>Allow write access</code> 記得打勾，全部做完如下：</p>
<p><img src="https://i.imgur.com/HpX1Nx8.png" alt="github-deploy-keys-add-title" /></p>
<p>點擊 <code>Add key</code> ，這時你就可以看到成功建立 <code>Deploy keys</code> 了！</p>
<p><img src="https://i.imgur.com/43elqH7.png" alt="successfully-add-deploy-key" /></p>
<h2 id="使用-deploy-keys"><a class="markdownIt-Anchor" href="#使用-deploy-keys"></a> 使用 <code>Deploy Keys</code></h2>
<h3 id="clone-一份-repository"><a class="markdownIt-Anchor" href="#clone-一份-repository"></a> <code>clone</code> 一份 <code>repository</code></h3>
<p>打開剛剛失敗的 <a href="https://tortoisegit.org/"><code>TortoiseGit</code></a> 畫面，勾選 <code>Load Putty Key</code> ，把剛剛儲存起來的 <code>private key</code> 導入到裡面，如下：</p>
<p><img src="https://i.imgur.com/qzHl4MM.png" alt="tortoisegit-with-putty-key" /></p>
<p>接著按下 <code>OK</code> 試試看！</p>
<p><img src="https://i.imgur.com/csVhs3a.png" alt="successfully-clone" /></p>
<p>成功！</p>
<h3 id="push-到-github-上"><a class="markdownIt-Anchor" href="#push-到-github-上"></a> <code>push</code> 到 <code>GitHub</code> 上</h3>
<p>我用 <code>Golang</code> 寫了一個簡單的程式如下：</p>
<p><img src="https://i.imgur.com/trhxnOq.png" alt="go-hello-world" /></p>
<p>接著我們嘗試把這個程式 <code>push</code> 到 <code>GitHub</code> 上</p>
<p>先 <code>commit</code> ，由於這步是在本地端，所以用不到 <code>Deploy Key</code></p>
<p><img src="https://i.imgur.com/pLm4Wyu.png" alt="torotisegit-commit" /></p>
<p>接著 <code>push</code> 到 <code>GitHub</code> 上，這時會看到下方可以選擇 <code>Autoload Putty Key</code></p>
<p><img src="https://i.imgur.com/EYtni47.png" alt="torotisegit-push" /></p>
<p>按下 <code>OK</code></p>
<p><img src="https://i.imgur.com/TTb0qig.png" alt="tortoisegit-push-success" /></p>
<blockquote>
<p>如果在加入 <code>Deploy Key</code> 的時候沒有勾選 <code>Allow write access</code> ，那麼在這步就會失敗了。</p>
</blockquote>
<p>可以看到已經成功了，這時我們到 <code>GitHub</code> 上去看看檔案是否有被更動</p>
<p><img src="https://i.imgur.com/sf8cLFy.png" alt="github-push-success" /></p>
<p>可以看到檔案的確有被更動，到此就大功告成啦！</p>
]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]1026. Maximum Difference Between Node and Ancestor</title>
    <url>/2022/12/09/leetcode/1026-maximum-difference-between-node-and-ancestor/</url>
    <content><![CDATA[<ul>
<li>難度: <code>Medium</code></li>
<li>花費時間: 20 min</li>
<li>題目: <a href="https://leetcode.com/problems/maximum-difference-between-node-and-ancestor/">1026. Maximum Difference Between Node and Ancestor</a></li>
</ul>
<p>給定你一個 <code>Binary Tree</code> ，假定我們要求一個數 <code>v</code> ， <code>v</code> 的定義是這個樹的父節點減去子節點取絕對值，而我們要找出最大的 <code>v</code></p>
<ul>
<li>設 <code>a</code> 為任一父節點， <code>b</code> 為任一子節點</li>
<li><code>v = |a - b|</code></li>
</ul>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
<p><strong>限制:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[2, 5000]</code>.</li>
<li><code>0 &lt;= Node.val &lt;= 10^5</code></li>
</ul>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/11/09/tmp-tree.jpg" alt="example-image-1" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = [8,3,10,1,6,null,14,null,null,4,7,13]</span><br><span class="line">Output: 7</span><br><span class="line">Explanation: We have various ancestor-node differences, some of which are given below :</span><br><span class="line">|8 - 3| = 5</span><br><span class="line">|3 - 7| = 4</span><br><span class="line">|8 - 1| = 7</span><br><span class="line">|10 - 13| = 3</span><br><span class="line">Among all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7.</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/11/09/tmp-tree-1.jpg" alt="example-image-1" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = [1,null,2,null,0,3]</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>
<p><strong>Definition for  a binary tree node.</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="attr">val</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">left</span>: <span class="title class_">TreeNode</span> | <span class="literal">null</span></span><br><span class="line">    <span class="attr">right</span>: <span class="title class_">TreeNode</span> | <span class="literal">null</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">val?: <span class="built_in">number</span>, left?: TreeNode | <span class="literal">null</span>, right?: TreeNode | <span class="literal">null</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">val</span> = (val===<span class="literal">undefined</span> ? <span class="number">0</span> : val)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">left</span> = (left===<span class="literal">undefined</span> ? <span class="literal">null</span> : left)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">right</span> = (right===<span class="literal">undefined</span> ? <span class="literal">null</span> : right)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<!-- <details><summary>點我開啟思路</summary>

<p class="text-h2"> 思路 </p>

</details> -->
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<ol>
<li>深度優先遍歷陣列</li>
<li>找出最大跟最小的值</li>
<li>每次訪問都比大小，如果更大就更新結果</li>
<li>回傳結果</li>
</ol>
<h2 id="程式"><a class="markdownIt-Anchor" href="#程式"></a> 程式</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">maxAncestorDiff</span>(<span class="params">root: TreeNode | <span class="literal">null</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">_dfs</span>(root!)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_dfs</span>(<span class="params">root: TreeNode, max = <span class="built_in">Number</span>.MIN_VALUE, min = <span class="built_in">Number</span>.MAX_VALUE, res: <span class="built_in">number</span> = <span class="number">0</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root.<span class="property">val</span> &gt; max) max = root.<span class="property">val</span></span><br><span class="line">    <span class="keyword">if</span> (root.<span class="property">val</span> &lt; min) min = root.<span class="property">val</span></span><br><span class="line"></span><br><span class="line">    res = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(max - min), res)</span><br><span class="line">    <span class="keyword">if</span> (root.<span class="property">left</span>) res = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="title function_">_dfs</span>(root.<span class="property">left</span>, max, min, res))</span><br><span class="line">    <span class="keyword">if</span> (root.<span class="property">right</span>) res = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="title function_">_dfs</span>(root.<span class="property">right</span>, max, min, res))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<table>
<thead>
<tr>
<th>&lt;!-- Language</th>
<th>Runtime</th>
<th>Beats</th>
<th>Memory Usage</th>
<th>Beats</th>
</tr>
</thead>
<tbody>
<tr>
<td>TS iterative</td>
<td>91 ms</td>
<td>74.63%</td>
<td>44.7 MB</td>
<td>18.41%</td>
</tr>
<tr>
<td>TS recursive</td>
<td>80 ms</td>
<td>82.21%</td>
<td>43.9 MB</td>
<td>87.98% --&gt;</td>
</tr>
</tbody>
</table>
<p><img src="https://i.imgur.com/5r3jarm.png" alt="score-image" /></p>
<!-- ##### 參考資料

+ [discuss]

[discuss]: https://leetcode.com/problems/house-robber/discuss/156523/From-good-to-great.-How-to-approach-most-of-DP-problems. -->
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Depth-First Search</tag>
        <tag>Tree</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]1657. Determine if Two Strings Are Close</title>
    <url>/2022/12/02/leetcode/1657-determine-if-two-strings-are-close/</url>
    <content><![CDATA[<ul>
<li>難度: <code>Medium</code></li>
<li>花費時間: 30 min</li>
<li>題目: <a href="https://leetcode.com/problems/determine-if-two-strings-are-close/">1657. Determine if Two Strings Are Close</a></li>
</ul>
<p>給你兩個字串 <code>word1</code> 與 <code>word2</code> ，判斷這兩個字串是否 [相似]</p>
<p>兩個 [相似] 的字串必須在進行以下兩個操作之後可以相等，這兩個操作都可以做無數次。</p>
<ol>
<li>交換兩個字母</li>
<li>把字串內的某字母與字串內的另一個某字母互換</li>
</ol>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
<p><strong>限制:</strong></p>
<ul>
<li><code>1 &lt;= word1.length, word2.length &lt;= 10^5</code></li>
<li><code>word1</code> and <code>word2</code> contain only lowercase English letters.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: word1 = &quot;abc&quot;, word2 = &quot;bca&quot;</span><br><span class="line">Output: true</span><br><span class="line">Explanation: You can attain word2 from word1 in 2 operations.</span><br><span class="line">Apply Operation 1: &quot;abc&quot; -&gt; &quot;acb&quot;</span><br><span class="line">Apply Operation 1: &quot;acb&quot; -&gt; &quot;bca&quot;</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: word1 = &quot;a&quot;, word2 = &quot;aa&quot;</span><br><span class="line">Output: false</span><br><span class="line">Explanation: It is impossible to attain word2 from word1, or vice versa, in any number of operations.</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: word1 = &quot;cabbba&quot;, word2 = &quot;abbccc&quot;</span><br><span class="line">Output: true</span><br><span class="line">Explanation: You can attain word2 from word1 in 3 operations.</span><br><span class="line">Apply Operation 1: &quot;cabbba&quot; -&gt; &quot;caabbb&quot;</span><br><span class="line">Apply Operation 2: &quot;caabbb&quot; -&gt; &quot;baaccc&quot;</span><br><span class="line">Apply Operation 2: &quot;baaccc&quot; -&gt; &quot;abbccc&quot;</span><br></pre></td></tr></table></figure>
</details>
<!-- <details><summary>點我開啟思路</summary>

<p class="text-h2"> 思路 </p>

</details> -->
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>雖然題目說得很玄學，但是其實就是簡單的幾個限制：</p>
<ol>
<li>兩串文字必須長度一模一樣</li>
<li>兩串文字內含的字母數量必須一模一樣</li>
<li>每個字母分別計算出字母的數量，最後兩邊是合的上的</li>
</ol>
<p>滿足以上三個條件，就一定有題目所謂 [相似] 的字串。</p>
<p>綜合上述，我認為使用 <code>map</code> 會是最簡單最快速的作法。</p>
<h2 id="程式"><a class="markdownIt-Anchor" href="#程式"></a> 程式</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">closeStrings</span>(<span class="params">word1: <span class="built_in">string</span>, word2: <span class="built_in">string</span></span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="comment">// 1. length check</span></span><br><span class="line">  <span class="keyword">if</span> (word1.<span class="property">length</span> != word2.<span class="property">length</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. create map</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">word1Map</span>: <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt; = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">word2Map</span>: <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt; = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; word1.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!word1Map.<span class="title function_">has</span>(word1[i])) &#123;</span><br><span class="line">      word1Map.<span class="title function_">set</span>(word1[i], <span class="number">1</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      word1Map.<span class="title function_">set</span>(word1[i], word1Map.<span class="title function_">get</span>(word1[i])! + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!word2Map.<span class="title function_">has</span>(word2[i])) &#123;</span><br><span class="line">      word2Map.<span class="title function_">set</span>(word2[i], <span class="number">1</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      word2Map.<span class="title function_">set</span>(word2[i], word2Map.<span class="title function_">get</span>(word2[i])! + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. char check</span></span><br><span class="line">  <span class="keyword">let</span> word1Char = [...word1Map.<span class="title function_">keys</span>()]</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> ele <span class="keyword">of</span> word1Char) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!word2Map.<span class="title function_">has</span>(ele)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. count check</span></span><br><span class="line">  <span class="keyword">let</span> word1Count = [...word1Map.<span class="title function_">values</span>()]</span><br><span class="line">  <span class="keyword">let</span> word2Count = [...word2Map.<span class="title function_">values</span>()]</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> ele <span class="keyword">of</span> word1Count) &#123;</span><br><span class="line">    <span class="keyword">if</span> (word2Count.<span class="title function_">indexOf</span>(ele) != -<span class="number">1</span>) &#123;</span><br><span class="line">      word2Count = word2Count.<span class="title function_">slice</span>(<span class="number">0</span>, word2Count.<span class="title function_">indexOf</span>(ele)).<span class="title function_">concat</span>(word2Count.<span class="title function_">slice</span>(word2Count.<span class="title function_">indexOf</span>(ele) + <span class="number">1</span>))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> word2Count.<span class="property">length</span> === <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<table>
<thead>
<tr>
<th>&lt;!-- Language</th>
<th>Runtime</th>
<th>Beats</th>
<th>Memory Usage</th>
<th>Beats</th>
</tr>
</thead>
<tbody>
<tr>
<td>TS iterative</td>
<td>91 ms</td>
<td>74.63%</td>
<td>44.7 MB</td>
<td>18.41%</td>
</tr>
<tr>
<td>TS recursive</td>
<td>80 ms</td>
<td>82.21%</td>
<td>43.9 MB</td>
<td>87.98% --&gt;</td>
</tr>
</tbody>
</table>
<p><img src="https://i.imgur.com/VQC1wQ7.png" alt="score-image" /></p>
<!-- ##### 參考資料

+ [discuss]

[discuss]: https://leetcode.com/problems/house-robber/discuss/156523/From-good-to-great.-How-to-approach-most-of-DP-problems. -->
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Map</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]1971. Find if Path Exists in Graph</title>
    <url>/2022/12/19/leetcode/1971-find-if-path-exists-in-graph/</url>
    <content><![CDATA[<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間:</li>
<li>題目: <a href="https://leetcode.com/problems/find-if-path-exists-in-graph/">1971. Find if Path Exists in Graph</a></li>
</ul>
<p>給你一張包含 <code>n</code> 個節點的圖，這張圖的每個節點會沿著邊緣 <code>edge</code> 連向其他節點(不會連向自己)。<br />
給你 <code>source</code> 跟 <code>destination</code> 兩個節點，判斷 <code>source</code> 有沒有辦法透過 <code>dege</code> 走到 <code>destination</code> 。</p>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
<p><strong>限制:</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 2 * 10^5</code></li>
<li><code>0 &lt;= edges.length &lt;= 2 * 10^5</code></li>
<li><code>edges[i].length == 2</code></li>
<li><code>0 &lt;= ui, vi &lt;= n - 1</code></li>
<li><code>ui != vi</code></li>
<li><code>0 &lt;= source, destination &lt;= n - 1</code></li>
<li>There are no duplicate edges.</li>
<li>There are no self edges.</li>
</ul>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/08/14/validpath-ex1.png" alt="example-image-1" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 3, edges = [[0,1],[1,2],[2,0]], source = 0, destination = 2</span><br><span class="line">Output: true</span><br><span class="line">Explanation: There are two paths from vertex 0 to vertex 2:</span><br><span class="line">- 0 → 1 → 2</span><br><span class="line">- 0 → 2</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/08/14/validpath-ex2.png" alt="example-image-2" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 6, edges = [[0,1],[0,2],[3,5],[5,4],[4,3]], source = 0, destination = 5</span><br><span class="line">Output: false</span><br><span class="line">Explanation: There is no path from vertex 0 to vertex 5.</span><br></pre></td></tr></table></figure>
</details>
<h2 id="第一印象"><a class="markdownIt-Anchor" href="#第一印象"></a> 第一印象</h2>
<ul>
<li>用遍歷做</li>
<li>感覺用 <code>BFS</code> 會更好</li>
<li>先確定 <code>source</code> 可以連到哪</li>
<li>如果有碰到 <code>destination</code> 就回傳 <code>true</code></li>
<li>沒碰到，那就繼續往下個找。</li>
<li>找過的 <code>edge</code> 刪掉</li>
<li>最後沒有 <code>edge</code> 就回傳 <code>false</code></li>
</ul>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<ol>
<li>深度優先遍歷陣列</li>
<li>找出最大跟最小的值</li>
<li>每次訪問都比大小，如果更大就更新結果</li>
<li>回傳結果</li>
</ol>
<h2 id="程式"><a class="markdownIt-Anchor" href="#程式"></a> 程式</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">maxAncestorDiff</span>(<span class="params">root: TreeNode | <span class="literal">null</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">_dfs</span>(root!)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_dfs</span>(<span class="params">root: TreeNode, max = <span class="built_in">Number</span>.MIN_VALUE, min = <span class="built_in">Number</span>.MAX_VALUE, res: <span class="built_in">number</span> = <span class="number">0</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root.<span class="property">val</span> &gt; max) max = root.<span class="property">val</span></span><br><span class="line">    <span class="keyword">if</span> (root.<span class="property">val</span> &lt; min) min = root.<span class="property">val</span></span><br><span class="line"></span><br><span class="line">    res = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(max - min), res)</span><br><span class="line">    <span class="keyword">if</span> (root.<span class="property">left</span>) res = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="title function_">_dfs</span>(root.<span class="property">left</span>, max, min, res))</span><br><span class="line">    <span class="keyword">if</span> (root.<span class="property">right</span>) res = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="title function_">_dfs</span>(root.<span class="property">right</span>, max, min, res))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<table>
<thead>
<tr>
<th>&lt;!-- Language</th>
<th>Runtime</th>
<th>Beats</th>
<th>Memory Usage</th>
<th>Beats</th>
</tr>
</thead>
<tbody>
<tr>
<td>TS iterative</td>
<td>91 ms</td>
<td>74.63%</td>
<td>44.7 MB</td>
<td>18.41%</td>
</tr>
<tr>
<td>TS recursive</td>
<td>80 ms</td>
<td>82.21%</td>
<td>43.9 MB</td>
<td>87.98% --&gt;</td>
</tr>
</tbody>
</table>
<p><img src="https://i.imgur.com/5r3jarm.png" alt="score-image" /></p>
<!-- ##### 參考資料

+ [discuss]

[discuss]: https://leetcode.com/problems/house-robber/discuss/156523/From-good-to-great.-How-to-approach-most-of-DP-problems. -->
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Depth-First Search</tag>
        <tag>Graph</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]2269. Find the K-Beauty of a Number</title>
    <url>/2022/08/23/leetcode/2269-find-the-k-beauty-of-a-number/</url>
    <content><![CDATA[<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>之前寫了兩題比較難的 <code>Sliding Window</code> ，覺得自己還沒有到很熟悉，所以找了幾題來練習。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 30 min</li>
<li><a href="https://leetcode.com/problems/find-the-k-beauty-of-a-number/">題目</a></li>
</ul>
<p>給你兩個數字 <code>num</code> 跟 <code>k</code> ，前者是你要處理的數字，後者是 <code>substring</code> 的寬度，<br />
依照 <code>Sliding Window</code> 的原理，在 <code>num</code> 裡取出所有大小為 <code>k</code> 的 <code>substring</code> ，回傳<strong>這些值之中可以整除 num 的值的數量</strong>。</p>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
    <pre>
<p><strong>限制:</strong></p>
<ul>
<li><code>1 &lt;= num &lt;= 109</code></li>
<li><code>1 &lt;= k &lt;= num.length</code> (taking <code>num</code> as a string)</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: num = 240, k = 2</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The following are the substrings of num of length k:</span><br><span class="line">- &quot;24&quot; from &quot;240&quot;: 24 is a divisor of 240.</span><br><span class="line">- &quot;40&quot; from &quot;240&quot;: 40 is a divisor of 240.</span><br><span class="line">Therefore, the k-beauty is 2.</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: num = 430043, k = 2</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The following are the substrings of num of length k:</span><br><span class="line">- &quot;43&quot; from &quot;430043&quot;: 43 is a divisor of 430043.</span><br><span class="line">- &quot;30&quot; from &quot;430043&quot;: 30 is not a divisor of 430043.</span><br><span class="line">- &quot;00&quot; from &quot;430043&quot;: 0 is not a divisor of 430043.</span><br><span class="line">- &quot;04&quot; from &quot;430043&quot;: 4 is not a divisor of 430043.</span><br><span class="line">- &quot;43&quot; from &quot;430043&quot;: 43 is a divisor of 430043.</span><br><span class="line">Therefore, the k-beauty is 2.</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;pwwkew&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The answer is &quot;wke&quot;, with the length of 3.</span><br><span class="line">Notice that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring.</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>這題很明顯的告訴你他用到 <code>Sliding Window</code><br />
並且思路也不難，基本上算是練手題。</p>
<ol>
<li>設定 <code>window</code> 左邊，右邊基本上就是左邊 + k ，所以也不用設。</li>
<li>把每個當下的 <code>window</code> 拿出來跟 <code>num</code> 比，沒有餘數就可以把 <code>count</code> + 1 了</li>
</ol>
<h2 id="程式碼"><a class="markdownIt-Anchor" href="#程式碼"></a> 程式碼</h2>
<p>java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">divisorSubstrings</span><span class="params">(<span class="type">int</span> num, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">  <span class="type">String</span> <span class="variable">numString</span> <span class="operator">=</span> String.valueOf(num);</span><br><span class="line">  <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>; </span><br><span class="line">  <span class="type">int</span> <span class="variable">window</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (left + k &lt; numString.length() + <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left; i &lt; left + k; i++) &#123;</span><br><span class="line">      window = window * <span class="number">10</span> + Integer.parseInt(String.valueOf(numString.charAt(i)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (window != <span class="number">0</span> &amp;&amp; num % window == <span class="number">0</span>) count++;</span><br><span class="line">    left++;</span><br><span class="line">    window = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>TS</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">divisorSubstrings</span>(<span class="params">num: <span class="built_in">number</span>, k: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">window</span>: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((left + k) &lt; num.<span class="title function_">toString</span>().<span class="property">length</span> + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = left; i &lt; (left + k); i++) &#123;</span><br><span class="line">            <span class="variable language_">window</span> = <span class="variable language_">window</span> * <span class="number">10</span> + <span class="built_in">parseInt</span>(num.<span class="title function_">toString</span>().<span class="title function_">charAt</span>(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (num % <span class="variable language_">window</span> === <span class="number">0</span>) count++;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>);</span><br><span class="line">        left++;</span><br><span class="line">        <span class="variable language_">window</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/3qt5Xge.png" alt="" /></p>
<details style='display:none;'><summary>點我開啟舊寫法/失敗寫法</summary>
<pre>
<p></pre></details></p>
<!-- ##### 參考資料 -->]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]326. Power Of Three</title>
    <url>/2022/08/24/leetcode/326-power-of-three/</url>
    <content><![CDATA[<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>寫每日練習</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 5 min</li>
<li><a href="https://leetcode.com/problems/power-of-three/">題目</a></li>
</ul>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
    <pre>
<p><strong>限制:</strong></p>
<ul>
<li><code>-231 &lt;= n &lt;= 231 - 1</code></li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 27</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 0</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 9</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>題目的需求很簡單，所以有多種做法可以完成。</p>
<h3 id="1-迴圈作法直覺"><a class="markdownIt-Anchor" href="#1-迴圈作法直覺"></a> 1. 迴圈作法(直覺)</h3>
<p>直覺上來說，怎麼做怎麼來。</p>
<p>javascript</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isPowerOfThree = <span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="comment">// 例外處理</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 n 可以被 3 整除，那就除下去</span></span><br><span class="line">    <span class="keyword">while</span> (n % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        n /= <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最後除完，看看有沒有等於 1 ，如果等於 1 那就代表成立</span></span><br><span class="line">    <span class="keyword">return</span> n == <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="2-數學作法"><a class="markdownIt-Anchor" href="#2-數學作法"></a> 2. 數學作法</h3>
<blockquote>
<p>n = 3^i<br />
i = log3(n)<br />
i = log10(n)/log10(3)</p>
</blockquote>
<p>按照上面的邏輯，檢查 n 有沒有符合即可。</p>
<p>javascript</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isPowerOfThree = <span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> ((<span class="title class_">Math</span>.<span class="title function_">log10</span>(n) / <span class="title class_">Math</span>.<span class="title function_">log10</span>(<span class="number">3</span>)) % <span class="number">1</span> == <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="3-數學作法特殊"><a class="markdownIt-Anchor" href="#3-數學作法特殊"></a> 3. 數學作法(特殊)</h3>
<p>上評論區看到的，直接拿題目裡最大的 <code>power of 3</code> 跟 n 取餘數檢查。</p>
<p>非常的簡潔，且是最佳的做法</p>
<p>java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPowerOfThree</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="comment">// 1162261467 is 3^19,  3^20 is bigger than int</span></span><br><span class="line"><span class="keyword">return</span> (n &gt; <span class="number">0</span> &amp;&amp; <span class="number">1162261467</span> % n == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/Aq2G1BX.png" alt="" /></p>
<details style='display:none;'><summary>點我開啟舊寫法/失敗寫法</summary>
<pre></pre></details>
<!-- ##### 參考資料 -->]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]869. Reordered Power of 2</title>
    <url>/2022/08/26/leetcode/869-reordered-power-of-2/</url>
    <content><![CDATA[<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>寫每日練習</p>
<ul>
<li>難度: <code>Medium</code></li>
<li>花費時間: 30 min</li>
<li><a href="https://leetcode.com/problems/reordered-power-of-2/">題目</a></li>
</ul>
<p>給你一個數字 <code>n</code> ，找出這個數字在任何排列下(前面不能為零)如果有 2 的冪次就回傳 <code>true</code> 沒有則回傳 <code>false</code> 。</p>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
    <pre>
<p><strong>限制:</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 109</code></li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 1</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 10</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>看到題目是數學就昏頭轉向了，於是參考了下評論區非常精妙的解答(窮舉)，這題主要有幾個重點。</p>
<ul>
<li>題目限制 <code>n</code> 最大是 10^9 ，意即如果他有解，最大也會是 10^9(base 10) == 2^30(base 2)</li>
<li>如果真的有符合的，那麼那個數字做排序之後會跟 <code>n</code> 做排序之後一樣。</li>
</ul>
<p>所以重點就是，如果有答案，那麼 <code>n.sort()</code> 會跟 2^30(base 2) 裡面某個數字轉十進位後作 <code>sort()</code> 一樣。</p>
<p>我自己直覺上會想要窮舉 <code>n</code> 的排序，再去檢查，但其實<strong>直接窮舉 2^30(base 2) 然後做排序</strong>再比較是最快的(因為總共也才 31 個)。</p>
<h3 id="javascript"><a class="markdownIt-Anchor" href="#javascript"></a> JavaScript</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reorderedPowerOf2 = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="comment">// 先把 n 轉成字串後做排序</span></span><br><span class="line">    <span class="keyword">let</span> sortedN = n.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">sort</span>().<span class="title function_">join</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 再窮舉 2^30(base 2)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++)&#123;</span><br><span class="line">        <span class="comment">// 一樣把他換成字串方便排序</span></span><br><span class="line">        <span class="keyword">let</span> sortedBinaryToDecimal = (<span class="number">1</span> &lt;&lt; i).<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">sort</span>().<span class="title function_">join</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 把排序過的兩個數字做比較</span></span><br><span class="line">        <span class="keyword">if</span> (sortedN === sortedBinaryToDecimal) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 最後跑完還是沒有答案就回傳 false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p>JS 成績<br />
<img src="https://i.imgur.com/qJPUtcK.png" alt="" /></p>
<details style='display:none;'><summary>點我開啟舊寫法/失敗寫法</summary>
<pre></pre></details>
<h5 id="參考資料"><a class="markdownIt-Anchor" href="#參考資料"></a> 參考資料</h5>
<ul>
<li><a href="https://leetcode.com/problems/reordered-power-of-2/discuss/1120106/JS-Python-Java-C%2B%2B-or-Easy-Short-Solution-w-Explanation">Discuss: multiple language solution</a></li>
</ul>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Math</tag>
        <tag>Daily Challenge</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]876. Middle of the Linked List</title>
    <url>/2022/12/05/leetcode/876-middle-of-the-linked-list/</url>
    <content><![CDATA[<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 5 min</li>
<li>題目: <a href="https://leetcode.com/problems/middle-of-the-linked-list/">876. Middle of the Linked List</a></li>
</ul>
<p>給你一個 <code>Linked List</code> ，回傳他的中間，如果他的中間有兩個，就回傳第二個。</p>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
<p><strong>限制:</strong></p>
<ul>
<li>The number of nodes in the list is in the range <code>[1, 100]</code>.</li>
<li><code>1 &lt;= Node.val &lt;= 100</code></li>
</ul>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/07/23/lc-midlist1.jpg" alt="example-image-1" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: head = [1,2,3,4,5]</span><br><span class="line">Output: [3,4,5]</span><br><span class="line">Explanation: The middle node of the list is node 3.</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/07/23/lc-midlist2.jpg" alt="example-image-1" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: head = [1,2,3,4,5,6]</span><br><span class="line">Output: [4,5,6]</span><br><span class="line">Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.</span><br></pre></td></tr></table></figure>
<p><strong>Definition for singly-linked list.</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">  <span class="attr">val</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">next</span>: <span class="title class_">ListNode</span> | <span class="literal">null</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">val?: <span class="built_in">number</span>, next?: ListNode | <span class="literal">null</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">val</span> = (val === <span class="literal">undefined</span> ? <span class="number">0</span> : val)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">next</span> = (next === <span class="literal">undefined</span> ? <span class="literal">null</span> : next)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<!-- <details><summary>點我開啟思路</summary>

<p class="text-h2"> 思路 </p>

</details> -->
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>這題非常好做，幾乎算是秒殺題，只要你會 <code>Two Pointer</code> 的基礎邏輯就好：</p>
<ol>
<li>設置一個領先旗標跟一個滯後旗標</li>
<li>領先旗標一次跳兩個節點，滯後旗標一次跳一個節點</li>
<li>領先旗標觸底之後如果前面還有一個節點，那就回傳滯後旗標的 <code>next</code></li>
<li>領先旗標如果剛好跳到終點，那就回傳滯後旗標的 <code>node</code></li>
</ol>
<h2 id="程式"><a class="markdownIt-Anchor" href="#程式"></a> 程式</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">middleNode</span>(<span class="params">head: ListNode | <span class="literal">null</span></span>): <span class="title class_">ListNode</span> | <span class="literal">null</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> leadP = head, delayP = head</span><br><span class="line">  <span class="keyword">while</span> (leadP?.<span class="property">next</span>?.<span class="property">next</span>) &#123;</span><br><span class="line">    leadP = leadP.<span class="property">next</span>.<span class="property">next</span></span><br><span class="line">    delayP = delayP!.<span class="property">next</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (leadP?.<span class="property">next</span>) <span class="keyword">return</span> delayP!.<span class="property">next</span></span><br><span class="line">  <span class="keyword">return</span> delayP</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<table>
<thead>
<tr>
<th>&lt;!-- Language</th>
<th>Runtime</th>
<th>Beats</th>
<th>Memory Usage</th>
<th>Beats</th>
</tr>
</thead>
<tbody>
<tr>
<td>TS iterative</td>
<td>91 ms</td>
<td>74.63%</td>
<td>44.7 MB</td>
<td>18.41%</td>
</tr>
<tr>
<td>TS recursive</td>
<td>80 ms</td>
<td>82.21%</td>
<td>43.9 MB</td>
<td>87.98% --&gt;</td>
</tr>
</tbody>
</table>
<p><img src="https://i.imgur.com/yQ1CxD5.png" alt="score-image" /></p>
<!-- ##### 參考資料

+ [discuss]

[discuss]: https://leetcode.com/problems/house-robber/discuss/156523/From-good-to-great.-How-to-approach-most-of-DP-problems. -->
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Linked List</tag>
        <tag>Two Pointer</tag>
      </tags>
  </entry>
  <entry>
    <title>[線性代數] Basis (基)(基向量)</title>
    <url>/2024/11/07/linear-algebra/basis/</url>
    <content><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1>
<p><strong>基</strong>(basis) 是線性代數中的核心概念之一。基的概念起源於我們想要在一個向量空間中找到一組向量，使其能夠<strong>生成</strong>(span)整個空間，並且每個向量之間都是<strong>線性獨立</strong>(linear Independence)的。這一組向量集合可以用來表示空間中的任意向量，使得我們能夠對向量進行更簡單的操作和理解。</p>
<p>基廣泛應用於許多領域，如工程、物理、電腦科學和數據分析。在軟體工程中，特別是與計算和優化有關的應用中。</p>
<h1 id="定義"><a class="markdownIt-Anchor" href="#定義"></a> 定義</h1>
<p>設 V 為一個在域 F 裡的向量空間，設 I 是在 V 裡的 Basis 向量的索引的集合，一組向量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><mo>=</mo><mo stretchy="false">{</mo><msub><mi>v</mi><mi>i</mi></msub><msub><mo stretchy="false">}</mo><mrow><mi>i</mi><mo>∈</mo><mi>I</mi></mrow></msub><mo>⊆</mo><mi>V</mi></mrow><annotation encoding="application/x-tex">B = \{v_i\}_{i \in I} \subseteq V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">}</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.17737em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊆</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span> 稱為 V 的 Basis</p>
<blockquote>
<p>域 F 指的就是某一個數域，例如實數 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="double-struck">R</mi></mrow><annotation encoding="application/x-tex">\mathbb{R}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbb">R</span></span></span></span></span> 或是複數 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="double-struck">C</mi></mrow><annotation encoding="application/x-tex">\mathbb{C}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbb">C</span></span></span></span></span></p>
</blockquote>
<h3 id="linear-independence-線性無關"><a class="markdownIt-Anchor" href="#linear-independence-線性無關"></a> Linear Independence (線性無關)</h3>
<p>存在有限個純量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><msub><mi>a</mi><mi>i</mi></msub><mtext>​</mtext></mrow><mo>⊆</mo><mi>F</mi></mrow><annotation encoding="application/x-tex">{a_i​}⊆F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">​</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊆</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span></span></span>，對於每個在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span> 裡的子集 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">{v_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span> 來說</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munder><mo>∑</mo><mrow><mi>i</mi><mo>∈</mo><mi>I</mi></mrow></munder><msub><mi>a</mi><mi>i</mi></msub><msub><mi>v</mi><mi>i</mi></msub><mo>=</mo><mn>0</mn><mo>⇒</mo><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><mn>0</mn><mtext> for all </mtext><mi>i</mi><mo>∈</mo><mi>I</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">\sum_{i \in I} a_i v_i = 0 \Rightarrow a_i = 0 \text{ for all } i \in I.
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.3717110000000003em;vertical-align:-1.321706em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord">0</span><span class="mord text"><span class="mord"> for all </span></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord">.</span></span></span></span></span></p>
<h3 id="spanning-property-生成律"><a class="markdownIt-Anchor" href="#spanning-property-生成律"></a> Spanning Property (生成律)</h3>
<p>存在有限個純量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><msub><mi>b</mi><mi>i</mi></msub><mtext>​</mtext></mrow><mo>⊆</mo><mi>F</mi></mrow><annotation encoding="application/x-tex">{b_i​}⊆F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">​</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊆</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>v</mi><mo>=</mo><munder><mo>∑</mo><mrow><mi>i</mi><mo>∈</mo><mi>I</mi></mrow></munder><msub><mi>b</mi><mi>i</mi></msub><msub><mi>v</mi><mi>i</mi></msub><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">v = \sum_{i \in I} b_i v_i.
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.3717110000000003em;vertical-align:-1.321706em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span></span></span></span></span></p>
<ul>
<li>線性無關: 對於所有在 I  裡的 i 來說，若 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">{a_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span> 乘上 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">{v_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span> 的結果加總 = 0 ，則所有的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">{a_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span> 都是 0
<ul>
<li>白話文來講，對於這幾個 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 來說，可以讓他們加總 = 0 的常量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 一定不能是 0 以外的任何數。</li>
<li>反例: 對於集合 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><mn>2</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[(1,2),(2,4)]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mclose">)</span><span class="mclose">]</span></span></span></span> 來說，存在 [-2, 1] 讓 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mn>2</mn><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo stretchy="false">(</mo><mn>2</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mn>6</mn><mo>+</mo><mn>6</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">-2(1,2) + 1(2,4) = -6 + 6 = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord">2</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mopen">(</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> ，則這時 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo mathvariant="normal">≠</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">a_i \neq 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></li>
<li>這邊的 0 指的是零向量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mn>0</mn><mi>v</mi></msub></mrow><annotation encoding="application/x-tex">0_v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li>
</ul>
</li>
<li>生成律: 對於所有在 I 裡的 i 來說，在空間裡的任意一個向量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi><mo>∈</mo><mi>V</mi></mrow><annotation encoding="application/x-tex">{v \in V}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span></span>，必定可以用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">{b_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span> 乘上 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">{v_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span> 的和來表示。</li>
<li>代數解釋
<ul>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi></mrow><annotation encoding="application/x-tex">F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span></span></span>: 某一個數域</li>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span>: (vector space) 在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi></mrow><annotation encoding="application/x-tex">F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span></span></span> 裡的向量空間</li>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi><mo separator="true">,</mo><mi>v</mi><mo>∈</mo><mi>V</mi></mrow><annotation encoding="application/x-tex">v , v \in V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span>: (vector) 在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span> 裡的任意向量</li>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span>: 所有的基向量的索引集合</li>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo separator="true">,</mo><mi>i</mi><mo>∈</mo><mi>I</mi></mrow><annotation encoding="application/x-tex">i, i \in I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span>: 任意的基向量索引</li>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><mo>=</mo><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">B = v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>: 在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span> 裡的所有基向量</li>
</ul>
</li>
</ul>
<p><img src="https://i.imgur.com/7QTsXE0.png" alt="image.png" /></p>
<p>用以上的圖來舉例，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>2</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\begin{bmatrix}
1 &amp; 0 &amp; -2\\
0 &amp; 1 &amp; 1
\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">2</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span> 任取兩個都可表示為這個二維空間的 Basis vector ，我們用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>2</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\begin{bmatrix}
0 &amp; -2\\
1 &amp; 1
\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">2</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span> 驗證上面兩個定義</p>
<ol>
<li>線性無關: 設常量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo stretchy="false">]</mo><mo>=</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[a_1,a_2] = [0,0]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose">]</span></span></span></span> ，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>0</mn><mo stretchy="false">(</mo><mo>−</mo><mn>2</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">0(0,1) + 0(-2,1) = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mopen">(</span><span class="mord">−</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> ，而 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[a_1,a_2]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>  在這裡只能是 0</li>
<li>生成率: 我們可以用這兩個基向量來表示 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(1,0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span> : <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy="false">(</mo><mo>−</mo><mn>2</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mo>−</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">-\frac{1}{2} (-2,1) + \frac{1}{2} (0,1) = (1,-\frac{1}{2}) + (0, \frac{1}{2}) = (1,0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span></li>
</ol>
<h1 id="性質"><a class="markdownIt-Anchor" href="#性質"></a> 性質</h1>
<ul>
<li>一個空間裡最少可以表示該空間的基向量總數就是該空間的維度
<ul>
<li>二維空間 = 最少兩個基向量</li>
<li>三維空間 = 最少三個基向量</li>
</ul>
</li>
</ul>
<h1 id="應用"><a class="markdownIt-Anchor" href="#應用"></a> 應用</h1>
<p>考慮以下問題：</p>
<p>設 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span> 為 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="double-struck">R</mi><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">\mathbb{R}^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span> 空間，且有三個向量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="bold">v</mi><mn>1</mn></msub><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathbf{v}_1 = (1, 0, 0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.59444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">v</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="bold">v</mi><mn>2</mn></msub><mo>=</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathbf{v}_2 = (0, 1, 0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.59444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">v</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="bold">v</mi><mn>3</mn></msub><mo>=</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathbf{v}_3 = (0, 0, 1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.59444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">v</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>。證明 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">{</mo><msub><mi mathvariant="bold">v</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi mathvariant="bold">v</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi mathvariant="bold">v</mi><mn>3</mn></msub><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{\mathbf{v}_1, \mathbf{v}_2, \mathbf{v}_3\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord"><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">v</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">v</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">v</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="double-struck">R</mi><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">\mathbb{R}^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span> 的基底，並使用這組基底表示向量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">w</mi><mo>=</mo><mo stretchy="false">(</mo><mn>3</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>5</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathbf{w} = (3, 2, 5)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">w</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mclose">)</span></span></span></span>。</p>
<p>解答：</p>
<ol>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">{</mo><msub><mi mathvariant="bold">v</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi mathvariant="bold">v</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi mathvariant="bold">v</mi><mn>3</mn></msub><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{\mathbf{v}_1, \mathbf{v}_2, \mathbf{v}_3\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord"><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">v</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">v</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">v</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span> 中的向量彼此獨立。</li>
<li>任意 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="double-struck">R</mi><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">\mathbb{R}^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span> 中的向量都可以表示為 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><msub><mi mathvariant="bold">v</mi><mn>1</mn></msub><mo>+</mo><msub><mi>a</mi><mn>2</mn></msub><msub><mi mathvariant="bold">v</mi><mn>2</mn></msub><mo>+</mo><msub><mi>a</mi><mn>3</mn></msub><msub><mi mathvariant="bold">v</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">a_1\mathbf{v}_1 + a_2\mathbf{v}_2 + a_3\mathbf{v}_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">v</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">v</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.59444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">v</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，因此滿足生成性。</li>
<li>所以，這組向量是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="double-struck">R</mi><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">\mathbb{R}^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span> 的基底。</li>
<li>對於 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">w</mi><mo>=</mo><mo stretchy="false">(</mo><mn>3</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>5</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathbf{w} = (3, 2, 5)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">w</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mclose">)</span></span></span></span>，我們可以將其表示為：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">w</mi><mo>=</mo><mn>3</mn><msub><mi mathvariant="bold">v</mi><mn>1</mn></msub><mo>+</mo><mn>2</mn><msub><mi mathvariant="bold">v</mi><mn>2</mn></msub><mo>+</mo><mn>5</mn><msub><mi mathvariant="bold">v</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">\mathbf{w} = 3\mathbf{v}_1 + 2\mathbf{v}_2 + 5\mathbf{v}_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">w</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">3</span><span class="mord"><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">v</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">2</span><span class="mord"><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">v</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">5</span><span class="mord"><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">v</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</li>
</ol>
]]></content>
      <tags>
        <tag>線性代數</tag>
        <tag>basis</tag>
        <tag>基</tag>
        <tag>基向量</tag>
        <tag>basis vector</tag>
      </tags>
  </entry>
  <entry>
    <title>[線性代數] Vector Space (向量空間)</title>
    <url>/2024/11/05/linear-algebra/linear-space/</url>
    <content><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1>
<p>向量空間（Vector Space）是線性代數中的核心概念之一。向量空間的概念源於數學家們研究物理空間中的向量運算，隨著研究的深入，數學家發現可以把向量運算的基本規則推廣到更抽象的結構中。向量空間的定義既適用於熟悉的二維或三維空間，也<strong>適用於高維空間</strong>甚至是無限維空間，因此應用範圍非常廣泛。</p>
<p>在向量空間中，我們可以定義<strong>向量加法和純量乘法</strong>，並能夠將這些運算規則推廣到更抽象的數學結構，如函數空間。</p>
<h1 id="定義"><a class="markdownIt-Anchor" href="#定義"></a> 定義</h1>
<p>向量空間 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span> 是一組向量和數量運算的集合，並滿足一些基本性質。我們定義 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span> 是在<a href="https://zh.wikipedia.org/wiki/%E5%9F%9F_(%E6%95%B0%E5%AD%A6)">體</a> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="double-struck">F</mi></mrow><annotation encoding="application/x-tex">\mathbb{F}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbb">F</span></span></span></span></span> 上的向量空間，若滿足以下條件：</p>
<ol>
<li><strong>向量加法</strong>：對於任意的向量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>u</mi><mo>⃗</mo></mover><mo separator="true">,</mo><mover accent="true"><mi>v</mi><mo>⃗</mo></mover><mo>∈</mo><mi>V</mi></mrow><annotation encoding="application/x-tex">\vec{u}, \vec{v} \in V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9084399999999999em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">u</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span>，定義一個運算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>+</mo></mrow><annotation encoding="application/x-tex">+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">+</span></span></span></span> 使得 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>u</mi><mo>⃗</mo></mover><mo>+</mo><mover accent="true"><mi>v</mi><mo>⃗</mo></mover><mo>∈</mo><mi>V</mi></mrow><annotation encoding="application/x-tex">\vec{u} + \vec{v} \in V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79733em;vertical-align:-0.08333em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">u</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7531em;vertical-align:-0.0391em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span>。</li>
<li><strong>數量乘法</strong>：對於任意的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>∈</mo><mi mathvariant="double-struck">F</mi></mrow><annotation encoding="application/x-tex">a \in \mathbb{F}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbb">F</span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>v</mi><mo>⃗</mo></mover><mo>∈</mo><mi>V</mi></mrow><annotation encoding="application/x-tex">\vec{v} \in V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7531em;vertical-align:-0.0391em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span>，定義一個運算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⋅</mo></mrow><annotation encoding="application/x-tex">\cdot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord">⋅</span></span></span></span> 使得 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>⋅</mo><mover accent="true"><mi>v</mi><mo>⃗</mo></mover><mo>∈</mo><mi>V</mi></mrow><annotation encoding="application/x-tex">a \cdot \vec{v} \in V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7531em;vertical-align:-0.0391em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span>。</li>
</ol>
<p>此外，向量空間滿足以下八個<a href="https://zh.wikipedia.org/wiki/%E5%85%AC%E7%90%86">公理(Axiom)</a></p>
<blockquote>
<p>公理是那些沒有經過證明，但不證自明的定義，如 1+1=2, a+b=b+a</p>
</blockquote>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left right left" columnspacing="0em 1em 0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mtext>2. 加法交換律：</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi mathvariant="normal">∀</mi><mover accent="true"><mi>u</mi><mo>⃗</mo></mover><mo separator="true">,</mo><mover accent="true"><mi>v</mi><mo>⃗</mo></mover><mo>∈</mo><mi>V</mi><mo separator="true">,</mo><mtext> </mtext><mover accent="true"><mi>u</mi><mo>⃗</mo></mover><mo>+</mo><mover accent="true"><mi>v</mi><mo>⃗</mo></mover><mo>=</mo><mover accent="true"><mi>v</mi><mo>⃗</mo></mover><mo>+</mo><mover accent="true"><mi>u</mi><mo>⃗</mo></mover></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mtext>3. 加法結合律：</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi mathvariant="normal">∀</mi><mover accent="true"><mi>u</mi><mo>⃗</mo></mover><mo separator="true">,</mo><mover accent="true"><mi>v</mi><mo>⃗</mo></mover><mo separator="true">,</mo><mover accent="true"><mi>w</mi><mo>⃗</mo></mover><mo>∈</mo><mi>V</mi><mo separator="true">,</mo><mtext> </mtext><mo stretchy="false">(</mo><mover accent="true"><mi>u</mi><mo>⃗</mo></mover><mo>+</mo><mover accent="true"><mi>v</mi><mo>⃗</mo></mover><mo stretchy="false">)</mo><mo>+</mo><mover accent="true"><mi>w</mi><mo>⃗</mo></mover><mo>=</mo><mover accent="true"><mi>u</mi><mo>⃗</mo></mover><mo>+</mo><mo stretchy="false">(</mo><mover accent="true"><mi>v</mi><mo>⃗</mo></mover><mo>+</mo><mover accent="true"><mi>w</mi><mo>⃗</mo></mover><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mtext>4. 零向量存在：</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi mathvariant="normal">∃</mi><mover accent="true"><mn>0</mn><mo>⃗</mo></mover><mo>∈</mo><mi>V</mi><mo separator="true">,</mo><mtext> </mtext><mi mathvariant="normal">∀</mi><mover accent="true"><mi>v</mi><mo>⃗</mo></mover><mo>∈</mo><mi>V</mi><mo separator="true">,</mo><mtext> </mtext><mover accent="true"><mi>v</mi><mo>⃗</mo></mover><mo>+</mo><mover accent="true"><mn>0</mn><mo>⃗</mo></mover><mo>=</mo><mover accent="true"><mi>v</mi><mo>⃗</mo></mover></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mtext>5. 反向量存在：</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi mathvariant="normal">∀</mi><mover accent="true"><mi>v</mi><mo>⃗</mo></mover><mo>∈</mo><mi>V</mi><mo separator="true">,</mo><mtext> </mtext><mi mathvariant="normal">∃</mi><mo stretchy="false">(</mo><mo>−</mo><mover accent="true"><mi>v</mi><mo>⃗</mo></mover><mo stretchy="false">)</mo><mo>∈</mo><mi>V</mi><mo separator="true">,</mo><mtext> </mtext><mover accent="true"><mi>v</mi><mo>⃗</mo></mover><mo>+</mo><mo stretchy="false">(</mo><mo>−</mo><mover accent="true"><mi>v</mi><mo>⃗</mo></mover><mo stretchy="false">)</mo><mo>=</mo><mover accent="true"><mn>0</mn><mo>⃗</mo></mover></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mtext>7. 純量乘法跟純量乘於向量的兼容性：</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi mathvariant="normal">∀</mi><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo>∈</mo><mi mathvariant="double-struck">F</mi><mo separator="true">,</mo><mtext> </mtext><mo stretchy="false">(</mo><mi>a</mi><mo>⋅</mo><mi>b</mi><mo stretchy="false">)</mo><mo>⋅</mo><mover accent="true"><mi>v</mi><mo>⃗</mo></mover><mo>=</mo><mi>a</mi><mo>⋅</mo><mo stretchy="false">(</mo><mi>b</mi><mo>⋅</mo><mover accent="true"><mi>v</mi><mo>⃗</mo></mover><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mtext>8. 分配律：</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>a</mi><mo>⋅</mo><mo stretchy="false">(</mo><mover accent="true"><mi>u</mi><mo>⃗</mo></mover><mo>+</mo><mover accent="true"><mi>v</mi><mo>⃗</mo></mover><mo stretchy="false">)</mo><mo>=</mo><mi>a</mi><mo>⋅</mo><mover accent="true"><mi>u</mi><mo>⃗</mo></mover><mo>+</mo><mi>a</mi><mo>⋅</mo><mover accent="true"><mi>v</mi><mo>⃗</mo></mover></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo stretchy="false">)</mo><mo>⋅</mo><mover accent="true"><mi>v</mi><mo>⃗</mo></mover><mo>=</mo><mi>a</mi><mo>⋅</mo><mover accent="true"><mi>v</mi><mo>⃗</mo></mover><mo>+</mo><mi>b</mi><mo>⋅</mo><mover accent="true"><mi>v</mi><mo>⃗</mo></mover></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}
&amp;\text{2. 加法交換律：} &amp;&amp; \forall \vec{u}, \vec{v} \in V, \, \vec{u} + \vec{v} = \vec{v} + \vec{u} \\
&amp;\text{3. 加法結合律：} &amp;&amp; \forall \vec{u}, \vec{v}, \vec{w} \in V, \, (\vec{u} + \vec{v}) + \vec{w} = \vec{u} + (\vec{v} + \vec{w}) \\
&amp;\text{4. 零向量存在：} &amp;&amp; \exists \vec{0} \in V, \, \forall \vec{v} \in V, \, \vec{v} + \vec{0} = \vec{v} \\
&amp;\text{5. 反向量存在：} &amp;&amp; \forall \vec{v} \in V, \, \exists (-\vec{v}) \in V, \, \vec{v} + (-\vec{v}) = \vec{0} \\
&amp;\text{7. 純量乘法跟純量乘於向量的兼容性：} &amp;&amp; \forall a, b \in \mathbb{F}, \, (a \cdot b) \cdot \vec{v} = a \cdot (b \cdot \vec{v}) \\
&amp;\text{8. 分配律：} &amp;&amp; a \cdot (\vec{u} + \vec{v}) = a \cdot \vec{u} + a \cdot \vec{v} \\
&amp; &amp; &amp; (a + b) \cdot \vec{v} = a \cdot \vec{v} + b \cdot \vec{v}
\end{aligned}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:10.674880000000002em;vertical-align:-5.087440000000002em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.587440000000001em;"><span style="top:-7.674880000000001em;"><span class="pstrut" style="height:2.92744em;"></span><span class="mord"></span></span><span style="top:-6.17488em;"><span class="pstrut" style="height:2.92744em;"></span><span class="mord"></span></span><span style="top:-4.587439999999999em;"><span class="pstrut" style="height:2.92744em;"></span><span class="mord"></span></span><span style="top:-2.999999999999999em;"><span class="pstrut" style="height:2.92744em;"></span><span class="mord"></span></span><span style="top:-1.4999999999999991em;"><span class="pstrut" style="height:2.92744em;"></span><span class="mord"></span></span><span style="top:1.7763568394002505e-15em;"><span class="pstrut" style="height:2.92744em;"></span><span class="mord"></span></span><span style="top:1.5000000000000018em;"><span class="pstrut" style="height:2.92744em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.087440000000002em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.587440000000001em;"><span style="top:-7.747440000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord text"><span class="mord">2. </span><span class="mord cjk_fallback">加法交換律：</span></span></span></span><span style="top:-6.24744em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord text"><span class="mord">3. </span><span class="mord cjk_fallback">加法結合律：</span></span></span></span><span style="top:-4.659999999999999em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord text"><span class="mord">4. </span><span class="mord cjk_fallback">零向量存在：</span></span></span></span><span style="top:-3.0725599999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord text"><span class="mord">5. </span><span class="mord cjk_fallback">反向量存在：</span></span></span></span><span style="top:-1.5725599999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord text"><span class="mord">7. </span><span class="mord cjk_fallback">純量乘法跟純量乘於向量的兼容性：</span></span></span></span><span style="top:-0.0725599999999984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord text"><span class="mord">8. </span><span class="mord cjk_fallback">分配律：</span></span></span></span><span style="top:1.4274400000000016em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.087440000000002em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.587440000000001em;"><span style="top:-7.674880000000001em;"><span class="pstrut" style="height:2.92744em;"></span><span class="mord"></span></span><span style="top:-6.17488em;"><span class="pstrut" style="height:2.92744em;"></span><span class="mord"></span></span><span style="top:-4.587439999999999em;"><span class="pstrut" style="height:2.92744em;"></span><span class="mord"></span></span><span style="top:-2.999999999999999em;"><span class="pstrut" style="height:2.92744em;"></span><span class="mord"></span></span><span style="top:-1.4999999999999991em;"><span class="pstrut" style="height:2.92744em;"></span><span class="mord"></span></span><span style="top:1.7763568394002505e-15em;"><span class="pstrut" style="height:2.92744em;"></span><span class="mord"></span></span><span style="top:1.5000000000000018em;"><span class="pstrut" style="height:2.92744em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.087440000000002em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.587440000000001em;"><span style="top:-7.747440000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord">∀</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">u</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">u</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">u</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span><span style="top:-6.24744em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord">∀</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">u</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.15216em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">u</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.15216em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">u</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.15216em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-4.659999999999999em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord">∃</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.92744em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.21344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∀</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.92744em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.21344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span><span style="top:-3.0725599999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord">∀</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∃</span><span class="mopen">(</span><span class="mord">−</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.92744em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.21344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span><span style="top:-1.5725599999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord">∀</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathbb">F</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-0.0725599999999984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">u</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">u</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span><span style="top:1.4274400000000016em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.087440000000002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<blockquote>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∃</mi></mrow><annotation encoding="application/x-tex">\exists</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">∃</span></span></span></span>: exists(存在): 表示 “存在<strong>至少一個</strong>符合條件的對象” 。<br />
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∀</mi></mrow><annotation encoding="application/x-tex">\forall</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">∀</span></span></span></span>: for all(對於所有的): 表示 “對於所有符合條件的對象，條件都成立” 。</p>
</blockquote>
<h1 id="性質"><a class="markdownIt-Anchor" href="#性質"></a> 性質</h1>
<p>向量空間具備以下性質：</p>
<ol>
<li>零向量(向量加法的單位元素唯一性)：每個向量空間包含唯一的零向量，記為 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mn>0</mn><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.92744em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.92744em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.21344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span> ，零向量又是這個向量空間的<strong>向量加法單位元素</strong>。</li>
<li>反向量：每個向量都有一個反向量，使得兩者相加得到零向量，此時這個反向量又可以說是這個向量的<strong>向量加法反元素</strong>。</li>
<li>交換律和結合律：向量加法具有交換律和結合律，且純量乘法滿足分配律和結合律。</li>
<li>線性組合：向量空間的任意元素都可以由一組基向量的線性組合表示。</li>
<li>維度：向量空間的維度是基向量的數量。</li>
<li>線性變換：在向量空間之間可以定義線性變換，這些變換保留了加法和數量乘法的結構。</li>
</ol>
<blockquote>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/%E5%96%AE%E4%BD%8D%E5%85%83">單位元素</a>: 任何元素跟單位元素做二元運算會得到元素本身
<ul>
<li>舉例: 20 + 0 = 20, 20 * 1 = 20</li>
<li>0 即是實數加法單位元素</li>
<li>1 即是實數乘法單位元素</li>
<li>而在向量加法中的單位元素就是零向量。</li>
</ul>
</li>
<li><a href="https://zh.wikipedia.org/zh-tw/%E9%80%86%E5%85%83%E7%B4%A0">反元素</a>: 跟元素做二元運算之後會得到單位元素的元素就叫做反元素
<ul>
<li>舉例: 20 + (-20) = 0, 20 * (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mn>20</mn></mrow><annotation encoding="application/x-tex">1/20</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mord">2</span><span class="mord">0</span></span></span></span>) = 1</li>
<li>-20 即是 20 的加法反元素</li>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mn>20</mn></mrow><annotation encoding="application/x-tex">1/20</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mord">2</span><span class="mord">0</span></span></span></span> 即是 20 的乘法反元素</li>
</ul>
</li>
</ul>
</blockquote>
<h1 id="向量空間的符號"><a class="markdownIt-Anchor" href="#向量空間的符號"></a> 向量空間的符號</h1>
<h2 id="1-一般向量空間的符號-v"><a class="markdownIt-Anchor" href="#1-一般向量空間的符號-v"></a> 1. 一般向量空間的符號 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span></h2>
<p>在數學定義中，我們經常用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span> 來表示一個抽象的向量空間。這個 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span> 可以代表任何符合向量空間定義的集合，不限於特定的數學對象。當我們講到「定義」或「性質」時，通常用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span> 來強調通用性，因為我們討論的是任意的、符合向量空間性質的空間。</p>
<h2 id="2-特定的向量空間符號-mathbbrn"><a class="markdownIt-Anchor" href="#2-特定的向量空間符號-mathbbrn"></a> 2. 特定的向量空間符號 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="double-struck">R</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">\mathbb{R}^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></h2>
<p>當我們談到具體的向量空間，比如所有二維的實數向量構成的空間，會用符號 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="double-struck">R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\mathbb{R}^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>（或 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="double-struck">R</mi><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">\mathbb{R}^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="double-struck">R</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">\mathbb{R}^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span> 等）來指代。這樣的符號表達了這是一個特定的向量空間，其元素是所有二維實數向量。例如，向量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(1,2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>3</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(3,4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mclose">)</span></span></span></span> 都是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="double-struck">R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\mathbb{R}^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 的成員。</p>
<p>有趣的是，複數平面(Complex plane)並不是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="double-struck">C</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\mathbb{C}^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">C</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 而是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="double-struck">R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\mathbb{R}^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> ，這其中的原因是因為複數 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi><mo>=</mo><mi>x</mi><mo>+</mo><mi>i</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">z=x+iy</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span> 本質上就是一個實部 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span> 再加上一個虛部 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span> ，所以複數平面其實可以看做是一個一維的複數向量空間 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∀</mi><mi>v</mi><mo>∈</mo><mi>C</mi><mo separator="true">,</mo><mi>v</mi><mo>=</mo><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mi>i</mi><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\forall v \in C, v = (x + iy)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord">∀</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> ，同時也可以看做一個實數向量空間 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∀</mi><mi>v</mi><mo>∈</mo><msup><mi>R</mi><mn>2</mn></msup><mo separator="true">,</mo><mi>v</mi><mo>=</mo><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\forall v \in R^2, v = (x, y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord">∀</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> 。</p>
<h1 id="應用"><a class="markdownIt-Anchor" href="#應用"></a> 應用</h1>
<h2 id="數學題目"><a class="markdownIt-Anchor" href="#數學題目"></a> 數學題目</h2>
<p><strong>題目</strong>：考慮向量空間 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="double-struck">R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\mathbb{R}^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>，其中的向量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>u</mi><mo>⃗</mo></mover><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\vec{u} = (1, 2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">u</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>v</mi><mo>⃗</mo></mover><mo>=</mo><mo stretchy="false">(</mo><mn>3</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\vec{v} = (3, 4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mclose">)</span></span></span></span>。請計算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mover accent="true"><mi>u</mi><mo>⃗</mo></mover><mo>+</mo><mn>3</mn><mover accent="true"><mi>v</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">2 \vec{u} + 3 \vec{v}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79733em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">u</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span>。</p>
<p><strong>解答</strong>：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>2</mn><mover accent="true"><mi>u</mi><mo>⃗</mo></mover><mo>+</mo><mn>3</mn><mover accent="true"><mi>v</mi><mo>⃗</mo></mover><mo>=</mo><mn>2</mn><mo>⋅</mo><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mn>3</mn><mo>⋅</mo><mo stretchy="false">(</mo><mn>3</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mn>2</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>9</mn><mo separator="true">,</mo><mn>12</mn><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mn>11</mn><mo separator="true">,</mo><mn>16</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">2 \vec{u} + 3 \vec{v} = 2 \cdot (1, 2) + 3 \cdot (3, 4) = (2, 4) + (9, 12) = (11, 16)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79733em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">u</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">9</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mclose">)</span></span></span></span></span></p>
<h2 id="現實生活"><a class="markdownIt-Anchor" href="#現實生活"></a> 現實生活</h2>
<p>假設 spotify 要設計使用者的首頁推薦音樂，那麼 spotify 可以考慮把所有音樂以及使用者的偏好都轉換成向量之後使用一個向量空間模型來分析。</p>
<p>每個不同的特徵都可以表示為一個維度，例如曲風，音樂特徵，音樂長度，地區。</p>
<p>當音樂和用戶都被表示成向量後，我們可以通過計算「相似度」來推薦音樂。相似度通常用餘弦相似度來衡量，但更簡單也可以用內積來算，內積的值越高代表使用者越有可能喜歡這首歌。</p>
]]></content>
      <tags>
        <tag>線性代數</tag>
        <tag>linear algebra</tag>
        <tag>向量空間</tag>
        <tag>euclidean space</tag>
      </tags>
  </entry>
  <entry>
    <title>[東湖冰誌] 糖水冰室．東湖人氣冰店．東湖捷運站 5 分鐘！&lt;br&gt;真的太好吃啦！ linyejoe2 的美食日誌！</title>
    <url>/2022/09/06/yummyummy/dessert-shop/</url>
    <content><![CDATA[<p><img src="https://i.imgur.com/6Xw3l82.png" alt="pre-view-post-image" /></p>
<p>第一站選到這間<a href="/2022/09/06/yummyummy/dessert-shop/">糖水冰室</a>，從東湖捷運站走出來只要五分鐘，藏身在東湖路起點的小巷子裡，每天回家都會撇到一眼，於是今天吃完旁邊的本家咖哩後，就選擇來吃這間冰店，順便寫我的第一篇東湖冰誌！</p>
<span id="more"></span>
<h1 id="環境"><a class="markdownIt-Anchor" href="#環境"></a> 環境</h1>
<p><a href="/2022/09/06/yummyummy/dessert-shop/">糖水冰室</a>藏身在東湖路的小巷子邊，但是位於鬧區之中，每每到下班時間總是會有滿滿的排隊人潮！但今天我跟鯊媽先吃完旁邊的本家咖哩才決定要來享用<a href="/2022/09/06/yummyummy/dessert-shop/">糖水冰室</a>，已經是接近打烊時間了，店內門可羅雀。</p>
<p>店面很小巧，招牌的字體非常的好看，有種讓人一看到招牌就覺得一定好吃的感覺！<br />
<img src="https://i.imgur.com/6Xw3l82.png" alt="env-image-1" /></p>
<p>店旁邊是聽說也很有名的夯麵坊，改天有空來吃吃看！<br />
<img src="https://i.imgur.com/Yx6KlEI.png" alt="env-image-2" /></p>
<p>店內的空間算是稍小，但是環境明亮，且非常乾淨，對於一個冰店來說非常完美！<br />
<img src="https://i.imgur.com/s9yGQm4.jpg" alt="env-image-2-1" /></p>
<p>店內擺放著很多的公仔，老闆的收藏非常有品味～<br />
<img src="https://i.imgur.com/V6JTg6z.jpg" alt="env-image-3" /></p>
<p>牆上也擺放著非常精緻的模型槍！<br />
<img src="https://i.imgur.com/BKlXHVg.jpg" alt="env-image-4" /></p>
<h1 id="菜單"><a class="markdownIt-Anchor" href="#菜單"></a> 菜單</h1>
<p>非常實惠的價格！<br />
<img src="https://i.imgur.com/cU1TutZ.jpg" alt="menu-image" /></p>
<h1 id="餐點"><a class="markdownIt-Anchor" href="#餐點"></a> 餐點</h1>
<p>櫃子裡擺滿了琳瑯滿目的料<br />
<img src="https://i.imgur.com/F5keZ27.jpg" alt="food-image-1" /></p>
<p>旁邊則用玻璃碗裝了一些 QQ 的料，年輕人應該比較喜歡這區！(舉手舉手)<br />
<img src="https://i.imgur.com/PccIh4d.jpg" alt="food-image-2" /></p>
<p>這次我點的是可以選四種料的黑糖剉冰，總共只要 65 元！<br />
我選了 粉粿，黑糖 Q 粿，珍珠，煉乳(鯊媽說剉冰一定要加煉乳)<br />
<img src="https://i.imgur.com/xfHcjxZ.png" alt="food-image-3" /></p>
<h1 id="心得"><a class="markdownIt-Anchor" href="#心得"></a> 心得</h1>
<p class='text-h2'>7分/10分</p>
<p>煉乳加黑糖的冰真的超好吃，不用加料就可以一直吃一直吃，但吃到最後都融化成水的時候就覺得太甜了。</p>
<p>店內環境明亮，冰雖然不是巨無霸大碗，但兩個人吃一碗絕對夠，價格實惠，值得一吃再吃！</p>
<h1 id="店家資訊"><a class="markdownIt-Anchor" href="#店家資訊"></a> 店家資訊</h1>
<ul>
<li>店家名稱: <a href="/2022/09/06/yummyummy/dessert-shop/">糖水冰室</a></li>
<li>店家地址: 11487 臺北市東湖路 33 巷 9 號</li>
<li>電話: 0909 730 095</li>
<li>FB: <a href="https://www.facebook.com/people/%E7%B3%96%E6%B0%B4%E5%86%B0%E5%AE%A4/100064250041300/">https://www.facebook.com/people/糖水冰室/100064250041300/</a></li>
<li>IG: <a href="https://www.instagram.com/_dessert.shop_/">https://www.instagram.com/_dessert.shop_/</a></li>
</ul>
<iframe src="https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d14455.854404075704!2d121.6136303!3d25.0692228!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0x5ceafc67f499b76c!2z57OW5rC05Yaw5a6k!5e0!3m2!1sen!2stw!4v1663818322560!5m2!1sen!2stw" width="600" height="450" style="border:0;" allowfullscreen="" loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe>
]]></content>
      <categories>
        <category>東湖冰誌</category>
      </categories>
      <tags>
        <tag>food</tag>
        <tag>dessert</tag>
        <tag>ice</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]28. Find the Index of the First Occurrence in a String</title>
    <url>/2023/03/03/leetcode/23-march-daily-challenge/28-find-the-index-of-the-first-occurrence-in-a-string/</url>
    <content><![CDATA[<!-- >[Algorithm I 筆記撰寫計畫](/2022/06/14/leetcode/Algorithm/Algorithm%20I/Starting-write-Algorithm-I-Note/) -->
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<ul>
<li>難度: <code>Medium</code></li>
<li>花費時間: 10 分鐘</li>
<li><a href="https://leetcode.com/problems/find-the-index-of-the-first-occurrence-in-a-string/description/">題目</a></li>
</ul>
<p>給你一個包含英文的陣列 <code>haystack</code> ，再給你一個包含英文的陣列 <code>needle</code></p>
<p>找出 <code>needle</code> 有沒有存在於 <code>haystack</code> 裡，有的話就回傳第一個值的索引。</p>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
    <pre>
<p><strong>限制:</strong></p>
<ul>
<li><code>1 &lt;= haystack.length, needle.length &lt;= 10^4</code></li>
<li><code>haystack</code> and <code>needle</code> consist of only lowercase English characters.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: haystack = &quot;sadbutsad&quot;, needle = &quot;sad&quot;</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: &quot;sad&quot; occurs at index 0 and 6.</span><br><span class="line">The first occurrence is at index 0, so we return 0.</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: haystack = &quot;leetcode&quot;, needle = &quot;leeto&quot;</span><br><span class="line">Output: -1</span><br><span class="line">Explanation: &quot;leeto&quot; did not occur in &quot;leetcode&quot;, so we return -1.</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<h2 id="初見"><a class="markdownIt-Anchor" href="#初見"></a> 初見</h2>
<p>想要用 <code>Two Pointers</code> 來做</p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>使用 <code>Sliding Window</code> 來做</p>
<ol>
<li>判斷 <code>needle[0]</code> 是否等於 <code>haystack[i]</code>
<ol>
<li>如果等於: 進入 Window 內部比較，如果都等於，代表有正解，回傳 <code>haystack[i]</code></li>
<li>如果不等於: Window 橫移一格 =&gt; i += 1</li>
</ol>
</li>
</ol>
<p><code>TypeScript:</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">strStr</span>(<span class="params">haystack: <span class="built_in">string</span>, needle: <span class="built_in">string</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="comment">// let j = 0, k = 0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; haystack.<span class="property">length</span> - needle.<span class="property">length</span> + <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// if equal to needle&#x27;s head</span></span><br><span class="line">    <span class="keyword">if</span> (haystack[i] == needle[<span class="number">0</span>]) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; needle.<span class="property">length</span>; j++) &#123;</span><br><span class="line">          <span class="comment">// recursive check needle&#x27;s word</span></span><br><span class="line">          <span class="keyword">if</span> (haystack[i + j] != needle[j]) <span class="keyword">throw</span> <span class="literal">undefined</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>雖然通過了，但是效果比較不好。</p>
<table>
<thead>
<tr>
<th>Language</th>
<th>Runtime</th>
<th>Beats</th>
<th>Memory Usage</th>
<th>Beats</th>
</tr>
</thead>
<tbody>
<tr>
<td>TypeScript</td>
<td>147 ms</td>
<td>5.52%</td>
<td>50.4 mb</td>
<td>5.16%</td>
</tr>
</tbody>
</table>
<h3 id="改良"><a class="markdownIt-Anchor" href="#改良"></a> 改良</h3>
<p>改用另一種寫法</p>
<ol>
<li>迴圈平移 <code>Window</code></li>
<li>每次都檢查 <code>Window</code> 裡面有沒有相等</li>
<li>有就回傳</li>
</ol>
<p><code>TypeScript</code></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">strStr</span>(<span class="params">haystack: <span class="built_in">string</span>, needle: <span class="built_in">string</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="comment">// Sliding Window</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; haystack.<span class="property">length</span> - needle.<span class="property">length</span> + <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// recursive check needle&#x27;s word</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; needle.<span class="property">length</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (haystack[i + j] != needle[j]) <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">if</span> (j == needle.<span class="property">length</span> - <span class="number">1</span>) <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>C++</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">strStr</span><span class="params">(string haystack, string needle)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = needle.<span class="built_in">length</span>();</span><br><span class="line">        <span class="type">int</span> n = haystack.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n - m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (haystack[i + j] != needle[j]) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> (j == m - <span class="number">1</span>) <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>Language</th>
<th>Runtime</th>
<th>Beats</th>
<th>Memory Usage</th>
<th>Beats</th>
</tr>
</thead>
<tbody>
<tr>
<td>TypeScript</td>
<td>60 ms</td>
<td>94.13%</td>
<td>42.9 mb</td>
<td>73.13%</td>
</tr>
<tr>
<td>C++</td>
<td>4 ms</td>
<td>38.84%</td>
<td>6.3 mb</td>
<td>69.99%</td>
</tr>
</tbody>
</table>
<!-- <details style='display:none;'><summary>點我開啟舊寫法/失敗寫法</summary>
<pre>

</pre></details> -->
<!-- ##### 參考資料 -->]]></content>
      <categories>
        <category>LeetCode</category>
        <category>2023 march daily challenge</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>String</tag>
        <tag>Daily Challenge</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]116. Populating Next Right Pointers in Each Node</title>
    <url>/2022/08/30/leetcode/Algorithm/Algorithm%20I/116-populating-next-right-pointers-in-each-node/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/14/leetcode/Algorithm/Algorithm%20I/Starting-write-Algorithm-I-Note/">Algorithm I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Algorithm I</code> 的第八天第二個題目，總共有兩題。</p>
<ul>
<li>難度: <code>Medium</code></li>
<li>花費時間: 2 hr</li>
<li><a href="https://leetcode.com/problems/populating-next-right-pointers-in-each-node/">題目</a></li>
</ul>
<p>給你一個 <code>perfect binary tree</code> ，把每個左邊節點的 next 對應到右邊節點上，沒有右邊節點就對應到 null ，最後把整個 <code>tree</code> 回傳。</p>
<blockquote>
<p><code>perfect binary tree</code>: 完美的二元樹，沒有缺失的節點</p>
</blockquote>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
    <pre>
<p><strong>限制:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[0, 212 - 1]</code>.</li>
<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>
</ul>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2019/02/14/116_sample.png" alt="example-image-1" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3,4,5,6,7]</span><br><span class="line">Output: [1,#,2,3,#,4,5,6,7,#]</span><br><span class="line">Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with &#x27;#&#x27; signifying the end of each level.</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = []</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>有兩個方法可以做這題：</p>
<p>假設</p>
<ul>
<li>父節點 = <code>root</code></li>
<li>左節點 = <code>left</code></li>
<li>右節點 = <code>right</code></li>
</ul>
<h3 id="1-dfs"><a class="markdownIt-Anchor" href="#1-dfs"></a> 1. DFS</h3>
<p><code>left</code> 很好想， <code>left.next</code> 就等於 <code>right</code> ，<br />
但這題目的重點在 <code>right</code> ， <code>right</code> 會跨樹，所以要透過 <code>root</code> 指定到旁邊那棵樹的 <code>left</code><br />
所以這個做法的重點是</p>
<p><strong><code>right.next = root.next.left</code></strong></p>
<p>程式碼: TypeScript 實作</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params">root: TreeNode | <span class="literal">null</span></span>): <span class="title class_">TreeNode</span> | <span class="literal">null</span> &#123;</span><br><span class="line">    <span class="comment">// 例外處理</span></span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 左節點的 next = 右節點</span></span><br><span class="line">    <span class="keyword">if</span> (root.<span class="property">left</span> &amp;&amp; root.<span class="property">right</span>) root.<span class="property">left</span>.<span class="property">next</span> = root.<span class="property">right</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 右節點的 next = 父節點的 next 的 左節點 | null</span></span><br><span class="line">    <span class="keyword">if</span> (root.<span class="property">right</span>) root.<span class="property">right</span>.<span class="property">next</span> = root.<span class="property">next</span>?.<span class="property">left</span> ? root.<span class="property">next</span>.<span class="property">left</span> : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遞迴</span></span><br><span class="line">    <span class="title function_">connect</span>(root.<span class="property">left</span>);</span><br><span class="line">    <span class="title function_">connect</span>(root.<span class="property">right</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="2-flatting-to-array"><a class="markdownIt-Anchor" href="#2-flatting-to-array"></a> 2. flatting to Array</h3>
<p>由於題目限定了 <code>tree</code> 為 <code>perfect binary tree</code> ，所以可以直接把 <code>tree</code> 扁平化，把每個節點都拿出來放進 Array</p>
<p>然後遍歷 Array 增加層數資訊即可</p>
<p>程式碼: TypeScript 實作</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params">root: TreeNode | <span class="literal">null</span></span>): <span class="title class_">TreeNode</span> | <span class="literal">null</span> &#123;</span><br><span class="line">    <span class="comment">// 例外處理</span></span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 扁平化</span></span><br><span class="line">    <span class="keyword">let</span> rootArr = <span class="title function_">flattingTreetoArray</span>(root);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 陣列裡每二的平方加入 null (層數資訊)</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">answerArr</span>: (<span class="title class_">TreeNode</span> | <span class="literal">null</span>)[] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; rootArr.<span class="property">length</span> &gt; <span class="number">0</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 1. 把這層抽出來: rootArr.slice(0, 1 &lt;&lt; i)</span></span><br><span class="line">        <span class="comment">// 2. 把他併入 answerArr</span></span><br><span class="line">        answerArr = answerArr.<span class="title function_">concat</span>(rootArr.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">1</span> &lt;&lt; i));</span><br><span class="line">        <span class="comment">// 3. 在 answerArr 裡插入結束標記</span></span><br><span class="line">        answerArr.<span class="title function_">push</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 在 rootArr 裡刪掉剛剛合併完的資料</span></span><br><span class="line">        rootArr = rootArr.<span class="title function_">slice</span>(<span class="number">1</span> &lt;&lt; i, rootArr.<span class="property">length</span> + <span class="number">1</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> tempNode = root;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 把自己從陣列裡 shift 出來</span></span><br><span class="line">        answerArr.<span class="title function_">shift</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果陣列都跑完了，就跳出去</span></span><br><span class="line">        <span class="keyword">if</span> (answerArr.<span class="property">length</span> &lt;= <span class="number">0</span>) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (answerArr[<span class="number">0</span>] === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果下一個 val 是 null ，那就放 null 然後刪掉</span></span><br><span class="line">            tempNode.<span class="property">next</span> = answerArr.<span class="title function_">shift</span>()!;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果不是 null ，那就不要刪掉(因為等等要跑)</span></span><br><span class="line">            tempNode.<span class="property">next</span> = answerArr[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再跑下個節點</span></span><br><span class="line">        tempNode = answerArr[<span class="number">0</span>]!;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 傳入完美二元樹，傳出攤平後的陣列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> root 傳入的完美二元樹</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nodeArr 攤平後的陣列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> appendArr 待執行的陣列 BFS  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> <span class="variable">nodeArr</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flattingTreetoArray</span>(<span class="params"></span></span><br><span class="line"><span class="params">    root: TreeNode, nodeArr: (TreeNode | <span class="literal">null</span>)[] = [], appendArr: TreeNode[] = []</span>): (<span class="title class_">TreeNode</span> | <span class="literal">null</span>)[] &#123;</span><br><span class="line">    nodeArr.<span class="title function_">push</span>(root);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root.<span class="property">left</span>) appendArr.<span class="title function_">push</span>(root.<span class="property">left</span>);</span><br><span class="line">    <span class="keyword">if</span> (root.<span class="property">right</span>) appendArr.<span class="title function_">push</span>(root.<span class="property">right</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (appendArr.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> nodeArr;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">flattingTreetoArray</span>(appendArr.<span class="title function_">shift</span>()!, nodeArr, appendArr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p>DFS</p>
<p><img src="https://i.imgur.com/GIqDaaJ.png" alt="score-image" /></p>
<p>flatting to Array</p>
<p><img src="https://i.imgur.com/doYHQ4e.png" alt="score-image-2" /></p>
<details style='display:none;'><summary>點我開啟舊寫法/失敗寫法</summary>
<pre>
<p></pre></details></p>
<!-- ##### 參考資料 -->]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Algorithm I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Depth-First Search</tag>
        <tag>Tree</tag>
        <tag>Binary Tree</tag>
        <tag>Linked List</tag>
        <tag>Breadth-First Search</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]120. Triangle</title>
    <url>/2022/09/21/leetcode/Algorithm/Algorithm%20I/120-triangle/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/14/leetcode/Algorithm/Algorithm%20I/Starting-write-Algorithm-I-Note/#09-x2F-13-Day-12-Dynamic-Programming">Algorithm I 筆記撰寫計畫</a> 第十二天第三題，共三題。</p>
</blockquote>
<ul>
<li>難度: <code>Medium</code></li>
<li>花費時間: 3 hr</li>
<li>題目: <a href="https://leetcode.com/problems/triangle/">120. Trangle</a></li>
</ul>
<p>給你一個用巢狀陣列表示的數字三角形，你不知道三角形有多大，從三角形頭部走到底部，然後把走過的所有數字加起來，請問哪個路徑最終加總的數字最小。</p>
<span id="more"></span>
<p>每次只能走這個當前位置的下面，或是下面的前面，如下面的範例：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">[[<span class="number">1</span>],</span><br><span class="line"> [<span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>]]</span><br></pre></td></tr></table></figure>
<p>假設目前走到 <code>2</code> 那麼接著只能走 <code>4</code> (當前位置的下面) 或是 <code>5</code> (當前位置下面的前面)<br />
所以上面這個例子的答案其實是 <code>1 + 3 + 1 = 5</code></p>
<details><summary>點我開啟限制與範例</summary>
<p><strong>限制:</strong></p>
<ul>
<li><code>1 &lt;= triangle.length &lt;= 200</code></li>
<li><code>triangle[0].length == 1</code></li>
<li><code>triangle[i].length == triangle[i - 1].length + 1</code></li>
<li><code>-104 &lt;= triangle[i][j] &lt;= 104</code></li>
</ul>
<p><strong>Example 1:</strong></p>
<!-- ![example-image-1](https://assets.leetcode.com/uploads/2019/02/16/oranges.png) -->
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]</span><br><span class="line">Output: 11</span><br><span class="line">Explanation: The triangle looks like:</span><br><span class="line">   2</span><br><span class="line">  3 4</span><br><span class="line"> 6 5 7</span><br><span class="line">4 1 8 3</span><br><span class="line">The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<!-- ![example-image-2](https://assets.leetcode.com/uploads/2021/04/24/01-2-grid.jpg) -->
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: triangle = [[-10]]</span><br><span class="line">Output: -10</span><br></pre></td></tr></table></figure>
</details>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>這題一樣要找規律，這題的規律是，從最上面不知道下層的狀況，來看下面的例子：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">[[<span class="number">1</span>],</span><br><span class="line"> [<span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>]]</span><br></pre></td></tr></table></figure>
<p>最直覺的從上面開始遍歷，然後選最小的走，會選到 <code>1 + 2 + 4 = 7</code> ，但其實 <code>1 + 3 + 1 = 5</code> 才是最小的路徑。</p>
<p>所以如果我們要解決最上面不知道下層的狀況，有幾種可能的做法：</p>
<ol>
<li>窮舉：<br />
我不知道下面的狀況沒關係，我就全部都走一遍，然後存起來最後比大小。<br />
這種做法是可以，但效率太差，且有更好的做法。</li>
<li>從底部開始做：<br />
既然我一開始就知道底部的數字是多少了，我是不是可以從 <strong>最底部開始找最小</strong> 的往上加。</li>
</ol>
<p>順著這個思路，再綜合題目的要求，可以再推導出，所謂 <strong>最底部開始找最小</strong> 是針對每個上層元素來說最小的底層元素。<br />
所以就可以整理出以下做法。</p>
<ol>
<li>從最後第二排開始往最上排做 for</li>
<li>假設每排的每個元素 = i , 下排的元素 = i’
<ul>
<li><code>i += Math.min(i', i' + 1)</code></li>
<li>i 會等於自己加上下排兩個元素裡找最小的。</li>
</ul>
</li>
<li>一直 for 到最上面一排，回傳最上層的元素(只有一個)。</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">minimumTotal</span>(<span class="params">triangle: <span class="built_in">number</span>[][]</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="comment">// Catch Execption</span></span><br><span class="line">  <span class="keyword">if</span> (triangle.<span class="property">length</span> === <span class="number">1</span>) <span class="keyword">return</span> triangle[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Iteration update cell value till reach the top of triangle.</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> row = triangle.<span class="property">length</span> - <span class="number">2</span>; row &gt; <span class="number">0</span>; row--) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> col = <span class="number">0</span>; col &lt; triangle[row].<span class="property">length</span> ; col ++) &#123;</span><br><span class="line">      <span class="comment">// update by the less one</span></span><br><span class="line">      triangle[row][col] += <span class="title class_">Math</span>.<span class="title function_">min</span>(triangle[row + <span class="number">1</span>][col], triangle[row + <span class="number">1</span>][col]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// through the triangle was been update, than the top of triangle shoud be the ans.</span></span><br><span class="line">  <span class="keyword">return</span> triangle[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/POTW0yi.png" alt="score-image" /></p>
<!-- ##### 參考資料

+ [discuss]

[discuss]: https://leetcode.com/problems/house-robber/discuss/156523/From-good-to-great.-How-to-approach-most-of-DP-problems. -->
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Algorithm I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>Iteration</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]167. Two Sum II - Input Array Is Sorted</title>
    <url>/2022/06/15/leetcode/Algorithm/Algorithm%20I/167-two-sum-ii-input-array-is-sorted/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/14/leetcode/Algorithm/Algorithm%20I/Starting-write-Algorithm-I-Note/">Algorithm I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Algorithm I</code> 的第三天第二個題目，總共有兩題。</p>
<ul>
<li>難度: <code>Medium</code></li>
<li>花費時間: 2hr</li>
<li><a href="https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/">題目</a></li>
</ul>
<p>傳入一個正序排列的陣列(numbers)和一個目標數字(target)，找出陣列裡的兩個數字相加剛好等於 target ，然後回傳這兩個數字索引值組成的陣列。</p>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
<pre>
<p><strong>限制:</strong></p>
<ul>
<li><code>2 &lt;= numbers.length &lt;= 3 * 104</code></li>
<li><code>-1000 &lt;= numbers[i] &lt;= 1000</code></li>
<li><code>numbers</code> is sorted in <strong>non-decreasing order</strong>.</li>
<li><code>-1000 &lt;= target &lt;= 1000</code></li>
<li>測試陣列只會剛好有一個答案</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: numbers = [2,7,11,15], target = 9</span><br><span class="line">Output: [1,2]</span><br><span class="line">Explanation: 2 + 7 = 9 所以回傳 2 的索引值跟 7 的索引值 = [1, 2]</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: numbers = [2,3,4], target = 6</span><br><span class="line">Output: [1,3]</span><br><span class="line">Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: numbers = [-1,0], target = -1</span><br><span class="line">Output: [1,2]</span><br><span class="line">Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>由於題目已經把陣列由大到小排好了，<br />
所以使用 Two-pointers 來實做，思路如下:</p>
<ul>
<li>Pointer 1: 一開始先指定陣列裡的最小值，如果兩個 Pointer 指的 value 相加小於 target ，那麼就把這個指標往後推(+1)。</li>
<li>Pointer 2: 一開始先指定陣列裡的最大值，如果兩個 Pointer 指的 value 相加大於 target ，那麼就把這個指標往前推(-1)。</li>
</ul>
<p>如果兩個加起來等於 target ，那就回傳。</p>
<h2 id="程式碼"><a class="markdownIt-Anchor" href="#程式碼"></a> 程式碼</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">numbers</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">twoSum</span>(<span class="params">numbers, target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pointer = <span class="number">0</span>,</span><br><span class="line">        pointer2 = numbers.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> half = <span class="title class_">Math</span>.<span class="title function_">floor</span>(target / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (numbers[pointer] + numbers[pointer2] &gt; target) &#123;</span><br><span class="line">            pointer2--;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (numbers[pointer] + numbers[pointer2] &lt; target) &#123;</span><br><span class="line">            pointer++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> [pointer, pointer2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/kZ5HgK4.png" alt="" /></p>
<details style='display:none;'><summary>點我開啟舊寫法/失敗寫法</summary>
<pre>
<p></pre></details></p>
<!-- ##### 參考資料 -->]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Algorithm I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Two Pointers</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]189. Rotate Array</title>
    <url>/2022/06/14/leetcode/Algorithm/Algorithm%20I/189-rotate-array/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/14/leetcode/Algorithm/Algorithm%20I/Starting-write-Algorithm-I-Note/">Algorithm I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Algorithm I</code> 的第二天第二個題目，總共有兩題。</p>
<ul>
<li>難度: <code>Medium</code></li>
<li>花費時間: 2hr</li>
<li><a href="https://leetcode.com/problems/rotate-array/">題目</a></li>
</ul>
<p>給你一個陣列 nums ，和一個數字 k ，把陣列由前反轉 k 次，不用回傳任何東西，原地修改陣列(in place)</p>
<span id="more"></span>
<p>至少有三種方式可以完成。</p>
<details><summary>點我開啟限制與範例</summary>
<pre>
<p><strong>限制:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 105</code></li>
<li><code>-231 &lt;= nums[i] &lt;= 231 - 1</code></li>
<li><code>0 &lt;= k &lt;= 105</code></li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3,4,5,6,7], k = 3</span><br><span class="line">Output: [5,6,7,1,2,3,4]</span><br><span class="line">Explanation:</span><br><span class="line">翻轉第一個值到最前面: [7,1,2,3,4,5,6]</span><br><span class="line">翻轉第二個值到最前面: [6,7,1,2,3,4,5]</span><br><span class="line">翻轉第三個值到最前面: [5,6,7,1,2,3,4]</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [-1,-100,3,99], k = 2</span><br><span class="line">Output: [3,99,-1,-100]</span><br><span class="line">Explanation: </span><br><span class="line">rotate 1 steps to the right: [99,-1,-100,3]</span><br><span class="line">rotate 2 steps to the right: [3,99,-1,-100]</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<h4 id="第一種作法-js-內建函式"><a class="markdownIt-Anchor" href="#第一種作法-js-內建函式"></a> 第一種作法: JS 內建函式</h4>
<p>這作法算是有點作弊，使用到了三個 JS 內建函式，分別是:</p>
<ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice">Array.prototype.splice()</a>: 在此處的用法是把陣列從後面第 k 位的位置分離出新的陣列。</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax">Spread syntax (…)</a>: 展開運算子，可以把陣列展開。</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift">Array.prototype.unshift()</a>: 把資料加到陣列的最前面。</li>
</ol>
<p>那把這三個步驟結合起來，就可以寫出過程了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rotate = <span class="keyword">function</span> (<span class="params">nums, k</span>) &#123;</span><br><span class="line">    <span class="comment">// 例外處理 ex: rotate([1,2],5)</span></span><br><span class="line">    k = k % nums.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">    nums.<span class="title function_">unshift</span>(...nums.<span class="title function_">splice</span>(-k));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<!-- TODO -->
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p>JS 內建函式<br />
<img src="https://i.imgur.com/HzjdQRz.png" alt="" /></p>
<!-- ##### 參考資料 -->]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Algorithm I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Two Pointers</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]19. Remove Nth Node From End of List</title>
    <url>/2022/06/24/leetcode/Algorithm/Algorithm%20I/19-remove-nth-node-from-end-of-list/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/14/leetcode/Algorithm/Algorithm%20I/Starting-write-Algorithm-I-Note/">Algorithm I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Algorithm I</code> 第五天第二個題目，總共有兩題。</p>
<ul>
<li>難度: <code>Medium</code></li>
<li>花費時間: 1hr</li>
<li><a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/">題目</a></li>
</ul>
<p>給你一個 linked list 的 head 和一個數字 n ，刪除這個 List 從後面數過來的第 n 個 node 然後回傳 head 。</p>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
<pre>
<p><strong>限制:</strong></p>
<ul>
<li>The number of nodes in the list is <code>sz</code>.</li>
<li><code>1 &lt;= sz &lt;= 30</code></li>
<li><code>0 &lt;= Node.val &lt;= 100</code></li>
<li><code>1 &lt;= n &lt;= sz</code></li>
</ul>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg" alt="" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: head = [1,2,3,4,5], n = 2</span><br><span class="line">Output: [1,2,3,5]</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: head = [1], n = 1</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: head = [1,2], n = 1</span><br><span class="line">Output: [1]</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>Two Pointer 作法如下:</p>
<ul>
<li>mainPointer: 一次一步，遍歷列表。</li>
<li>delayPointer: 一次一步，但晚 mainPointer n+1 步出發。</li>
</ul>
<p>當 mainPointer 走到底時，把delayPointer的 next 換成 next.next 然後回傳 head 。</p>
<ul>
<li>例外處理: 當迴圈跑完 delayPointer 都沒有動的時候，這就代表 n &gt; List.length - 1 所以這個時候我們要判斷:
<ol>
<li>n == List.length =&gt; 回傳 temp.next (代表他移除的正好就是 head)</li>
<li>n == List.length - 1 =&gt; 一樣回傳 head 但是要把第二個 node 移除。</li>
</ol>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeNthFromEnd = <span class="keyword">function</span>(<span class="params">head, n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> tempHead = head;</span><br><span class="line">    <span class="keyword">let</span> mainPointer = head;</span><br><span class="line">    <span class="keyword">let</span> delayPointer = head;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 例外處理</span></span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (mainPointer)&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (n + <span class="number">1</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            n--</span><br><span class="line">            mainPointer = mainPointer.<span class="property">next</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            mainPointer = mainPointer.<span class="property">next</span>;</span><br><span class="line">            delayPointer = delayPointer.<span class="property">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!flag) <span class="keyword">return</span> tempHead.<span class="property">next</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (delayPointer.<span class="property">next</span>) delayPointer.<span class="property">next</span> = delayPointer.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">    <span class="keyword">return</span> tempHead;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/vX56B9j.png" alt="" /></p>
<details style='display:none;'><summary>點我開啟舊寫法/失敗寫法</summary>
<pre>
<p></pre></details></p>
<!-- ##### 參考資料 -->]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Algorithm I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Two Pointers</tag>
        <tag>Algorithm</tag>
        <tag>linked list</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]198. House Robber</title>
    <url>/2022/09/14/leetcode/Algorithm/Algorithm%20I/198-house-robber/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/14/leetcode/Algorithm/Algorithm%20I/Starting-write-Algorithm-I-Note/#09-x2F-13-Day-12-Dynamic-Programming">Algorithm I 筆記撰寫計畫</a> 第十二天第二題，共三題。</p>
</blockquote>
<ul>
<li>難度: <code>Medium</code></li>
<li>花費時間: 3 hr</li>
<li>題目: <a href="https://leetcode.com/problems/house-robber/">198. House Robber</a></li>
</ul>
<p>你是一個專業強盜，今晚要搶一排住戶，這排住戶有相連報警系統，如果同時有兩間相鄰的屋子被搶，就會報警。</p>
<p>給你一個包含每棟住戶家裡有多少錢的陣列，請算出在不觸動警報下，你最多可以搶到多少錢。</p>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
<p><strong>限制:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 100</code></li>
<li><code>0 &lt;= nums[i] &lt;= 400</code></li>
</ul>
<p><strong>Example 1:</strong></p>
<!-- ![example-image-1](https://assets.leetcode.com/uploads/2019/02/16/oranges.png) -->
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3,1]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).</span><br><span class="line">Total amount you can rob = 1 + 3 = 4.</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<!-- ![example-image-2](https://assets.leetcode.com/uploads/2021/04/24/01-2-grid.jpg) -->
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,7,9,3,1]</span><br><span class="line">Output: 12</span><br><span class="line">Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).</span><br><span class="line">Total amount you can rob = 2 + 9 + 1 = 12.</span><br></pre></td></tr></table></figure>
</details>
<details><summary>點我開啟思路</summary>
<p class="text-h2"> 思路 </p>
<p>原本做到了逐步更新，但最後有點問題，看了下評論區的解答。</p>
<p>------------ 有問題的逐步更新的做法 --------------</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// case 1</span></span><br><span class="line">[<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">4</span>] <span class="comment">// input</span></span><br><span class="line">[<span class="number">5</span>,       <span class="number">4</span>,    <span class="number">4</span>] <span class="comment">// = 13</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// case 2</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">3</span>] <span class="comment">// input</span></span><br><span class="line">[   <span class="number">3</span>,    <span class="number">8</span>,    <span class="number">3</span>] <span class="comment">// = 14</span></span><br></pre></td></tr></table></figure>
<p>case 1 我們可以發現，答案不一定是純奇數或是偶數(不用每隔一間都搶)</p>
<p>case 2 我們可以發現，就算是陣列裡最大的數字( 9 )也不一定會被搶到。</p>
<p>我想用逐步更新的方式做這題</p>
<p>最後這個做法被下面這個 test case 給擊敗了</p>
<p><code>[2, 3, 2]</code> 由於我最後做出來是 <code>[0, 3, 0]</code> 所以失敗了。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">rob</span>(<span class="params">nums: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">robbeds</span>: <span class="built_in">number</span>[] = [nums[<span class="number">0</span>]];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 正向遍歷，如果準備要搶的下一家比現在已經搶完的有錢，就把現在這間的錢還回去，改搶下面那間。</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[i] &gt; robbeds[i - <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="comment">// 如果這間比較有錢，就把上間的錢還回去，改搶這間。</span></span><br><span class="line">      robbeds[i - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">      robbeds[i] = nums[i];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果這間比較沒錢，那就不搶了。</span></span><br><span class="line">      robbeds[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 反向遍歷，再反的檢查一次有沒有更多錢的家，有就去搶，然後一樣把搶完的錢還回去。</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = nums.<span class="property">length</span> - <span class="number">1</span>; i &gt; -<span class="number">1</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[i] &gt;= robbeds[i + <span class="number">1</span>]) &#123;</span><br><span class="line">      robbeds[i + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">      robbeds[i] = nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最後再正向檢查一次，</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 如果有連續三家都沒有搶的，就去搶中間那家。</span></span><br><span class="line">    <span class="keyword">if</span> (robbeds[i] === <span class="number">0</span> &amp;&amp; robbeds[i] === robbeds[i - <span class="number">1</span>] &amp;&amp; robbeds[i] === robbeds[i + <span class="number">1</span>]) robbeds[i] = nums[i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 頭尾兩家分別檢查。</span></span><br><span class="line">    <span class="keyword">if</span> (i === <span class="number">0</span> &amp;&amp; robbeds[i] === <span class="number">0</span> &amp;&amp; robbeds[i + <span class="number">1</span>] === <span class="number">0</span>) robbeds[i] = nums[i];</span><br><span class="line">    <span class="keyword">if</span> (i === nums.<span class="property">length</span> - <span class="number">1</span> &amp;&amp; robbeds[i] === <span class="number">0</span> &amp;&amp; robbeds[i - <span class="number">1</span>] === <span class="number">0</span>) robbeds[i] = nums[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(robbeds);</span><br><span class="line">  <span class="keyword">return</span> robbeds.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, cur</span>) =&gt;</span> sum + cur, <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</details>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>這題一樣要找規律，我有找到 <strong>比較搶的錢那個比較多就去搶哪個</strong> ，但是我沒有 <strong>把搶的錢統計</strong> 起來。</p>
<p>正確的規律是，如果我搶了現在這家 (<code>i</code>) ，那麼我就不能搶前面那家 (<code>i - 1</code>) ，但是我可以放心的搶前面第二家 (<code>i - 2</code>) ，並且，我可以 <strong>留下前面第二家開始往前算所有我搶過的錢</strong>，這是重點的部分。</p>
<p>所以，你可以想像成，小偷從第一間開始走，然後有搶就收進包包，收到最後，把包包裡有多少錢回傳即可。</p>
<p>這部分參考了<a href="https://leetcode.com/problems/house-robber/discuss/156523/From-good-to-great.-How-to-approach-most-of-DP-problems.">評論區的討論</a>，我覺得寫得很好。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">rob</span>(<span class="params">nums: <span class="built_in">number</span>[], i: <span class="built_in">number</span> = <span class="number">1</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="comment">// 如果整排都搶完了，就回家。</span></span><br><span class="line">  <span class="keyword">if</span> (i === nums.<span class="property">length</span>) <span class="keyword">return</span> nums[nums.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 如果要搶現在這間，就要放棄前面那間搶完的錢。</span></span><br><span class="line"><span class="comment">   * 相反的，如果搶了前面那間，則不能搶現在這家，所以總共搶了多少會跟走到上一間房時一樣。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  nums[i] = <span class="title class_">Math</span>.<span class="title function_">max</span>((nums[i - <span class="number">2</span>] ? nums[i - <span class="number">2</span>] : <span class="number">0</span>) + nums[i], nums[i - <span class="number">1</span>]);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 遞迴</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">rob</span>(nums, i + <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/kcXtKez.png" alt="score-image" /></p>
<h5 id="參考資料"><a class="markdownIt-Anchor" href="#參考資料"></a> 參考資料</h5>
<ul>
<li><a href="https://leetcode.com/problems/house-robber/discuss/156523/From-good-to-great.-How-to-approach-most-of-DP-problems.">discuss</a></li>
</ul>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Algorithm I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>Recursive</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]206. Reverse Linked List</title>
    <url>/2022/09/01/leetcode/Algorithm/Algorithm%20I/206-reverse-linked-list/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/14/leetcode/Algorithm/Algorithm%20I/Starting-write-Algorithm-I-Note/">Algorithm I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Algorithm I</code> 的第十天第二個題目，總共有兩題。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 5 min</li>
<li><a href="https://leetcode.com/problems/reverse-linked-list/">題目</a></li>
</ul>
<p>給你一個 <code>Linked List</code> 將其反轉之後回傳。</p>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
    <pre>
<p><strong>限制:</strong></p>
<ul>
<li>The number of nodes in the list is the range <code>[0, 5000]</code>.</li>
<li><code>-5000 &lt;= Node.val &lt;= 5000</code></li>
</ul>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg" alt="example-image-1" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: head = [1,2,3,4,5]</span><br><span class="line">Output: [5,4,3,2,1]</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg" alt="example-image-2" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: head = [1,2]</span><br><span class="line">Output: [2,1]</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: head = []</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>這題沒什麼限制，所以應該很多方法都可以做，這邊提供兩個方法</p>
<h3 id="1-array-iterative"><a class="markdownIt-Anchor" href="#1-array-iterative"></a> 1. Array iterative</h3>
<p>這是我自己想到的方法，我相信也是相對直觀的。</p>
<ol>
<li>遍歷 <code>Linked-list</code> 把所有的 <code>Node</code> 存進 <code>Array</code></li>
<li>從 <code>Array</code> 的最後一個值開始，把 <code>next</code> 指向 <code>Array</code> 的上一個值。</li>
</ol>
<p>TypeScript</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reverseList</span>(<span class="params">head: ListNode | <span class="literal">null</span></span>): <span class="title class_">ListNode</span> | <span class="literal">null</span> &#123;</span><br><span class="line">    <span class="comment">// 例外處理</span></span><br><span class="line">    <span class="keyword">if</span> (!head) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建立一個 Arr 儲存所有 Node</span></span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">NodeArr</span>: <span class="title class_">ListNode</span>[] = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍歷一次 linked-list 把所有節點放進 Arr</span></span><br><span class="line">    <span class="keyword">let</span> nextNode = head;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="title class_">NodeArr</span>.<span class="title function_">push</span>(nextNode);</span><br><span class="line">        <span class="keyword">if</span> (nextNode.<span class="property">next</span>) &#123;</span><br><span class="line">            nextNode = nextNode.<span class="property">next</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先噴出最後一顆，我們不需要</span></span><br><span class="line">    <span class="title class_">NodeArr</span>.<span class="title function_">pop</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍歷 Arr 把 next 做回去</span></span><br><span class="line">    head = nextNode;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="title class_">NodeArr</span>.<span class="property">length</span> - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="comment">// 噴出 Arr 最後一顆</span></span><br><span class="line">        nextNode.<span class="property">next</span> = <span class="title class_">NodeArr</span>.<span class="title function_">pop</span>()!;</span><br><span class="line">        nextNode = nextNode.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 防止迴圈</span></span><br><span class="line">    nextNode.<span class="property">next</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="2-in-place-iterative"><a class="markdownIt-Anchor" href="#2-in-place-iterative"></a> 2. In-place iterative</h3>
<p>有點類似 <code>two-pointers</code> 的概念</p>
<ol>
<li>宣告兩個指針存取當前的 <code>head</code> 跟 <code>head.next</code> = <code>nextHead</code></li>
<li>宣告一個 <code>tempNode</code> 佔存 <code>nextHead.next</code></li>
<li><code>nextHead.next</code> 指向 <code>haed</code></li>
<li><code>head</code> 往後推</li>
<li><code>nextHead</code> 往後推</li>
<li>重複上述步驟直到 <code>nextHead == null</code></li>
</ol>
<p>Java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="comment">// 例外處理</span></span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先存下 next</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">nextHead</span> <span class="operator">=</span> head.next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把 head.next 指向 null 避免迴圈</span></span><br><span class="line">    head.next = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (nextHead != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//// 很簡單的轉換</span></span><br><span class="line">        <span class="comment">// 先存下 next</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">tempNode</span> <span class="operator">=</span> nextHead.next;</span><br><span class="line">        <span class="comment">// 把 nextHead.next 往前指</span></span><br><span class="line">        nextHead.next = head;</span><br><span class="line">        <span class="comment">// 把 head 往後推</span></span><br><span class="line">        head = nextHead;</span><br><span class="line">        <span class="comment">// 把 nextHead 往後推</span></span><br><span class="line">        nextHead = tempNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (head);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>還有 recursion 版本的，但是都大同小異，就等下次遇到這個題目再來做就好。</p>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/YBVpi6s.png" alt="score-image" /></p>
<details style='display:none;'><summary>點我開啟舊寫法/失敗寫法</summary>
<pre>
<p></pre></details></p>
<!-- ##### 參考資料 -->]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Algorithm I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Linked List</tag>
        <tag>Iteration</tag>
        <tag>Two-Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]278. First Bad Version</title>
    <url>/2022/06/13/leetcode/Algorithm/Algorithm%20I/278-first-bad-version/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/14/leetcode/Algorithm/Algorithm%20I/Starting-write-Algorithm-I-Note/">Algorithm I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Algorithm I</code> 的第一天第二個題目，總共有三題。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 2hr</li>
<li><a href="https://leetcode.com/problems/first-bad-version/">題目</a></li>
</ul>
<p>你控制著一個專案的版本紀錄，而這個專案在較新的版本出錯了(<code>Bad Version</code>)，<br />
不幸的是，專案的每個版本都是構建於上個版本下，所以你需要找出他具體從哪個版本之後就出錯了。</p>
<p>給你一個 api: <code>isBadVersion</code> ，你要找出哪個版本是第一個錯誤版本，並且盡量減少呼叫 <code>isBadVersion</code> 的次數。</p>
<span id="more"></span> 
<details><summary>點我開啟限制與範例</summary>
<pre>
<p><strong>限制:</strong></p>
<ul>
<li><code>1 &lt;= bad &lt;= n &lt;= 231 - 1</code></li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 5, bad = 4</span><br><span class="line">Output: 4</span><br><span class="line">Explanation:</span><br><span class="line">call isBadVersion(3) -&gt; false</span><br><span class="line">call isBadVersion(5) -&gt; true</span><br><span class="line">call isBadVersion(4) -&gt; true</span><br><span class="line">Then 4 is the first bad version.</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 1, bad = 1</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>運用 Binary Search 即可，問題是如何寫:</p>
<ol>
<li>設定左邊(left)為 1 ，右邊(right)為 n 。</li>
<li>只要 right &gt; left 就繼續找。</li>
<li>算出中點(middle) = (right + left) / 2</li>
<li>isBadVersion(middle):
<ul>
<li>true: 把右邊移到中間。</li>
<li>false: 把左邊移到中間 + 1 ，(因為這個點已經是false了，所以沒有繼續比較的必要，且最後幾位數在比較時會變成 right == left，此時便跳出迴圈)。</li>
</ul>
</li>
<li>回傳 right ，因為right自始自終都是 ture 的那個版本，所以算到最後，他就會剛好是錯誤第一版。</li>
</ol>
<h2 id="程式碼"><a class="markdownIt-Anchor" href="#程式碼"></a> 程式碼</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for isBadVersion()</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">integer</span>&#125; version number</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125; whether the version is bad</span></span><br><span class="line"><span class="comment"> * isBadVersion = function(version) &#123;</span></span><br><span class="line"><span class="comment"> *     ...</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">function</span>&#125; isBadVersion()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">function</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">var</span> solution = <span class="keyword">function</span> (<span class="params">isBadVersion</span>) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">integer</span>&#125; n Total versions</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="type">integer</span>&#125; The first bad version</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> left = <span class="number">1</span>, right = n;</span><br><span class="line">        <span class="keyword">while</span>(right &gt; left)&#123;</span><br><span class="line">            <span class="comment">// console.log(&#x27;left&#x27; + left);</span></span><br><span class="line">            <span class="comment">// console.log(&quot;right&quot; + right);</span></span><br><span class="line">            <span class="keyword">let</span> middle = <span class="title class_">Math</span>.<span class="title function_">floor</span>((right + left) / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_">isBadVersion</span>(middle))&#123;</span><br><span class="line">                right = middle;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = middle + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/yjINF6O.png" alt="" /></p>
<details style='display:none;'><summary>點我開啟舊寫法/失敗寫法</summary>
<pre>
<ol>
<li>切一半，把中間值放進去
<ul>
<li>false: 往右邊找</li>
<li>true: 往左邊找</li>
</ul>
</li>
<li>如果沒辦法再往左邊找了，就回傳中間值。</li>
</ol>
<p>寫到迷失自我，還要多多練習。</p>
<p></pre></details></p>
<!-- ##### 參考資料 -->]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Algorithm I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Algorithm</tag>
        <tag>Binary Search</tag>
        <tag>interactive</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]283. Move Zeroes</title>
    <url>/2022/06/15/leetcode/Algorithm/Algorithm%20I/283-move-zeroes/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/14/leetcode/Algorithm/Algorithm%20I/Starting-write-Algorithm-I-Note/">Algorithm I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Algorithm I</code> 的第三天第一個題目，總共有兩題。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 30min</li>
<li><a href="https://leetcode.com/problems/move-zeroes/">題目</a></li>
</ul>
<p>傳入一個包含數字的陣列(nums)，把所有的 0 排到最後，同時保持原排序。</p>
<span id="more"></span>
<p>必須 in-place 修改 nums</p>
<details><summary>點我開啟限制與範例</summary>
<pre>
<p><strong>限制:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 104</code></li>
<li><code>-231 &lt;= nums[i] &lt;= 231 - 1</code></li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [0,1,0,3,12]</span><br><span class="line">Output: [1,3,12,0,0]</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [0]</span><br><span class="line">Output: [0]</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<h3 id="第一種作法-js-內建函式"><a class="markdownIt-Anchor" href="#第一種作法-js-內建函式"></a> 第一種作法: JS 內建函式</h3>
<p>思路如下</p>
<ol>
<li>定義 numsLength 儲存原陣列大小。</li>
<li>把 nums 裡的 0 去掉。</li>
<li>跑迴圈把 0 塞回到 nums 的最後，直到 nums.length == numsLength</li>
</ol>
<p>使用到了 JS 內建函式:</p>
<ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter">Array.prototype.filter()</a>: 過濾掉陣列裡的 0</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax">Spread syntax (…)</a>: 展開運算子，可以把陣列展開。</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice">Array.prototype.splice()</a>: 在此處的用法是把刪除 0 之後的陣列塞回原陣列，來達到 in-place。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> moveZeroes = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="comment">// 定義 numsLength 儲存原陣列大小。</span></span><br><span class="line">    <span class="keyword">let</span> numsLength = nums.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把 nums 裡的 0 去掉。</span></span><br><span class="line">    nums.<span class="title function_">splice</span>(<span class="number">0</span>, nums.<span class="property">length</span>, ...nums.<span class="title function_">filter</span>(<span class="function"><span class="params">element</span> =&gt;</span> element != <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 跑迴圈把 0 塞回到 nums 的最後，直到 nums.length == numsLength</span></span><br><span class="line">    <span class="keyword">while</span> (numsLength &gt; nums.<span class="property">length</span>) &#123;</span><br><span class="line">        nums.<span class="title function_">push</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// console.log(nums)</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="第二種作法-two-pointers"><a class="markdownIt-Anchor" href="#第二種作法-two-pointers"></a> 第二種作法: Two Pointers</h3>
<blockquote>
<p>要注意，這題可以這樣寫是因為題目沒有要求 0 的順序，因為用這種寫法實際上最後結果的 0 不是按照原本的排序的。</p>
</blockquote>
<p>遍歷一次陣列，把所有不是零的值跟延遲指標交換，這樣就完成了。</p>
<ul>
<li>Pointer 1: 主指標(mainPointer): 遍歷整個陣列。</li>
<li>Pointer 2: 延遲指標(delayPointer): 指向最後一個非零元素該去的位置，每當一個非零元素跟他原本的指向的元素交換，就後推一位。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">moveZeroes</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="comment">// 主指標跑整個 nums, 延遲指標跑所有的非 0 element</span></span><br><span class="line">    <span class="keyword">let</span> mainPointer = <span class="number">0</span>,</span><br><span class="line">        delayPointer = <span class="number">0</span>,</span><br><span class="line">        tempNum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (mainPointer &lt; nums.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="comment">// 只要這個 element 不是 0 ，那麼就要把這個值跟最前面 delayPointer 指的 element 交換</span></span><br><span class="line">        <span class="keyword">if</span> (nums[mainPointer] != <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 簡單的交換步驟</span></span><br><span class="line">            tempNum = nums[delayPointer];</span><br><span class="line">            nums[delayPointer] = nums[mainPointer];</span><br><span class="line">            nums[mainPointer] = tempNum;</span><br><span class="line"></span><br><span class="line">            delayPointer++</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mainPointer++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// console.log(nums);</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p>JS 內建函式: 因為沒有使用 Two Pointers ，所以可以明顯的看出空間複雜度非常的糟糕。<br />
<img src="https://i.imgur.com/j1SNuNV.png" alt="" /></p>
<p>Two Pointers:<br />
<img src="https://i.imgur.com/oVeH5BE.png" alt="" /></p>
<details style='display:none;'><summary>點我開啟舊寫法/失敗寫法</summary>
<pre>
<p></pre></details></p>
<!-- ##### 參考資料 -->]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Algorithm I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Two Pointers</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]3. Longest Substring Without Repeating Characters</title>
    <url>/2022/08/15/leetcode/Algorithm/Algorithm%20I/3-longest-substring-without-repeating/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/14/leetcode/Algorithm/Algorithm%20I/Starting-write-Algorithm-I-Note/">Algorithm I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Algorithm I</code> 的第六天第一個題目，總共有兩題。</p>
<ul>
<li>難度: <code>Medium</code></li>
<li>花費時間: 1 小時</li>
<li><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/">題目</a></li>
</ul>
<p>Given a string <code>s</code>, find the length of the <strong>longest substring</strong> without repeating characters.</p>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
    <pre>
<p><strong>限制:</strong></p>
<ul>
<li><code>0 &lt;= s.length &lt;= 5 * 104</code></li>
<li><code>s</code> consists of English letters, digits, symbols and spaces.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;abcabcbb&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The answer is &quot;abc&quot;, with the length of 3.</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;bbbbb&quot;</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: The answer is &quot;b&quot;, with the length of 1.</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;pwwkew&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The answer is &quot;wke&quot;, with the length of 3.</span><br><span class="line">Notice that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring.</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>這題要用到 <code>Hash Table</code> 跟 <code>Sliding Window</code><br />
<code>Sliding Window</code> 的重點是何時收斂。</p>
<p>在這題，我們每加入一個 <code>char</code> 到 <code>sSet</code> 裡，就會跟第一個值比較，<br />
所以，<strong>如果新加入的值有重複，就進入收斂模式，收斂到新加入的這個值沒有跟 set 裡的值重複</strong>，掌握這個重點，問題就迎刃而解了。</p>
<h2 id="程式碼"><a class="markdownIt-Anchor" href="#程式碼"></a> 程式碼</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// left</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// right</span></span><br><span class="line">    HashSet&lt;Character&gt; sSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Character&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; s.length();) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!sSet.contains(s.charAt(r))) &#123;</span><br><span class="line">            sSet.add(s.charAt(r));</span><br><span class="line">            count = Math.max(count, sSet.size());</span><br><span class="line">            r++;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            sSet.remove(s.charAt(l++));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/RwWXJEQ.png" alt="" /></p>
<details style='display:none;'><summary>點我開啟舊寫法/失敗寫法</summary>
<pre>
<p></pre></details></p>
<!-- ##### 參考資料 -->]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Algorithm I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Sliding Window</tag>
        <tag>Algorithm</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]344. Reverse String</title>
    <url>/2022/06/16/leetcode/Algorithm/Algorithm%20I/344-reverse-string/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/14/leetcode/Algorithm/Algorithm%20I/Starting-write-Algorithm-I-Note/">Algorithm I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Algorithm I</code> 的第四天第一個題目，總共有兩題。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 30min</li>
<li><a href="https://leetcode.com/problems/reverse-string/">題目</a></li>
</ul>
<p>傳入一個包含字母的陣列，把陣列原地(in-place)反轉。</p>
<p>空間複雜度必須為 O(1)</p>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
<pre>
<p><strong>限制:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 105</code></li>
<li><code>s[i]</code> is a <a href="https://en.wikipedia.org/wiki/ASCII#Printable_characters">printable ascii character</a>.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = [&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]</span><br><span class="line">Output: [&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;]</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = [&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;h&quot;]</span><br><span class="line">Output: [&quot;h&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;H&quot;]</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>這道題使用 Two Pointer 非常的簡單，作法如下:</p>
<ul>
<li>Pointer 1: 遍歷陣列到中間</li>
<li>Pointer 2: 反向遍歷陣列到中間</li>
</ul>
<p>每次迴圈把指針 element 交換，再推進 Pointer 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">character[]</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125; Do not return anything, modify s in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseString = <span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="title class_">Math</span>.<span class="title function_">floor</span>(s.<span class="property">length</span> / <span class="number">2</span>); i++) &#123;</span><br><span class="line">        temp = s[i];</span><br><span class="line">        s[i] = s[s.<span class="property">length</span> - i - <span class="number">1</span>];</span><br><span class="line">        s[s.<span class="property">length</span> - i - <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// console.log(s)</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>下面也有更簡單的做法，一行完成，哈哈哈。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">character[]</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125; Do not return anything, modify s in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseString = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    s.<span class="title function_">reverse</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p>Two Pointers 成績<br />
<img src="https://i.imgur.com/kZ5HgK4.png" alt="" /></p>
<p>內建函式 reverse() 寫法成績<br />
<img src="https://i.imgur.com/Oclfd2Z.png" alt="" /></p>
<details style='display:none;'><summary>點我開啟舊寫法/失敗寫法</summary>
<pre>
<p></pre></details></p>
<!-- ##### 參考資料 -->]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Algorithm I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Two Pointers</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]35. Search Insert Position</title>
    <url>/2022/06/13/leetcode/Algorithm/Algorithm%20I/35-search-lnsert-position/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/14/leetcode/Algorithm/Algorithm%20I/Starting-write-Algorithm-I-Note/">Algorithm I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Algorithm I</code> 的第一天第三個題目，總共有三題。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 1hr</li>
<li><a href="https://leetcode.com/problems/search-insert-position/">題目</a></li>
</ul>
<p>傳入一個陣列包含由小到大排序好的不重複數字，和一個目標，如果目標在陣列中，回傳目標的 index ，如果不在，回傳目標應該要插入的 index 。</p>
<span id="more"></span> 
<details><summary>點我開啟限制與範例</summary>
<pre>
<p><strong>限制:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 104</code></li>
<li><code>-104 &lt;= nums[i] &lt;= 104</code></li>
<li><code>nums</code> contains <strong>distinct</strong> values sorted in <strong>ascending</strong> order.</li>
<li><code>-104 &lt;= target &lt;= 104</code></li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,3,5,6], target = 5</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,3,5,6], target = 2</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,3,5,6], target = 7</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>運用 Binary Search 即可:</p>
<ol>
<li>設定左邊(left)為 0 ，右邊(right)為 nums.length - 1 。</li>
<li>只要 right &gt; left 就繼續找。</li>
<li>算出中點(middle) = (right + left) / 2</li>
<li>比較 nums[mid] 跟 target:
<ul>
<li>nums[mid] &lt; target: 把左邊移到中間 + 1</li>
<li>nums[mid] &gt; target: 把右邊移到中間</li>
<li>nums[mid] = target: 回傳 mid</li>
</ul>
</li>
<li>比較 nums[right] &lt; target: 回傳 right + 1
<ul>
<li>因為如果 target 不存在在陣列，那麼要回傳他應該插入哪，</li>
<li>若最後的 target 比 nums[right] 大，那他應該插在 right 後面，所以要 + 1</li>
<li>若沒有 他應該插在 right 的位置，(不用做判斷，會被第 6 步接住。)</li>
</ul>
</li>
<li>回傳 right</li>
</ol>
<h2 id="程式碼"><a class="markdownIt-Anchor" href="#程式碼"></a> 程式碼</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> searchInsert = <span class="keyword">function</span> (<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>,</span><br><span class="line">        right = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">let</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((left + right) / <span class="number">2</span>);</span><br><span class="line">        <span class="comment">// console.log(&#x27;left: &#x27; + left);</span></span><br><span class="line">        <span class="comment">// console.log(&#x27;right: &#x27; + right);</span></span><br><span class="line">        <span class="comment">// console.log(&#x27;mid: &#x27; + mid);</span></span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (nums[right] &lt; target) <span class="keyword">return</span> right + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> right;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/StUXdBd.png" alt="" /></p>
<details style='display:none;'><summary>點我開啟舊寫法/失敗寫法</summary>
<pre>
<p></pre></details></p>
<!-- ##### 參考資料 -->]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Algorithm I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Algorithm</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]46. Permutations</title>
    <url>/2022/09/13/leetcode/Algorithm/Algorithm%20I/46-permutations/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/14/leetcode/Algorithm/Algorithm%20I/Starting-write-Algorithm-I-Note/">Algorithm I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Algorithm I</code> 的第十一天第二個題目，總共有三題。</p>
<ul>
<li>難度: <code>Medium</code></li>
<li>花費時間: 1 hr</li>
<li>題目: <a href="https://leetcode.com/problems/permutations/">46. Permutations</a></li>
</ul>
<p>給你一個數字陣列 <code>nums</code> ，回傳這個數字陣列的所有可能不重複排序。</p>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
<p><strong>限制:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 6</code></li>
<li><code>-10 &lt;= nums[i] &lt;= 10</code></li>
<li>All the integers of <code>nums</code> are <strong>unique</strong>.</li>
</ul>
<p><strong>Example 1:</strong></p>
<!-- ![example-image-1](https://assets.leetcode.com/uploads/2021/04/24/01-1-grid.jpg) -->
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3]</span><br><span class="line">Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<!-- ![example-image-2](https://assets.leetcode.com/uploads/2021/04/24/01-2-grid.jpg) -->
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [0,1]</span><br><span class="line">Output: [[0,1],[1,0]]</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [1]</span><br><span class="line">Output: [[1]]</span><br></pre></td></tr></table></figure>
</details>
<details><summary>點我開啟思路</summary>
<p class="text-h2"> 思路 </p>
<p>用選擇樹 <code>Backtracking</code> 的方式去做答</p>
<ol>
<li>選一個根元素</li>
<li>在剩下的元素裡選一個</li>
<li>重複步驟二直到選完</li>
<li>把現在選好的陣列放入答案陣列</li>
</ol>
<p>終止條件: 全部選完</p>
<p>撤銷選擇</p>
</details>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>因為這題也是屬於 <code>Backtracking</code> 類型的題目，所以用跟 <a href="/2022/09/05/leetcode/Algorithm/Algorithm%20I/77-combinations/">77. Combinations</a> 一樣的方法來作即可。</p>
<h2 id="程式"><a class="markdownIt-Anchor" href="#程式"></a> 程式</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">permute</span>(<span class="params">nums: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span>[][] &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">permutations</span>: <span class="built_in">number</span>[][] = [];</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">_dfs</span>(<span class="params">preGoPath: <span class="built_in">number</span>[], visitedPath: <span class="built_in">number</span>[] = []</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">// 退出條件</span></span><br><span class="line">    <span class="keyword">if</span> (visitedPath.<span class="property">length</span> === nums.<span class="property">length</span>) &#123;</span><br><span class="line">      permutations.<span class="title function_">push</span>(visitedPath);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 選父層的 node 然後把可選的選項 (path) 丟入子層</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; preGoPath.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="comment">// 把選到的 node 放進 visitedPath 中</span></span><br><span class="line">      visitedPath.<span class="title function_">push</span>(preGoPath[i]);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 把剩下的丟進遞迴， visitedPath 需要解構賦值，避免互相影響</span></span><br><span class="line">      <span class="title function_">_dfs</span>(preGoPath.<span class="title function_">slice</span>(<span class="number">0</span>, i).<span class="title function_">concat</span>(preGoPath.<span class="title function_">slice</span>(i + <span class="number">1</span>)), [...visitedPath]);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 重選父層 node</span></span><br><span class="line">      visitedPath.<span class="title function_">shift</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">_dfs</span>(nums);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> permutations;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/ozQYcxz.png" alt="score-image" />;</p>
<!-- ##### 參考資料

+ [discuss](https://leetcode.com/problems/01-matrix/discuss/1369741/C%2B%2BJavaPython-BFS-DP-solutions-with-Picture-Clean-and-Concise-O(1)-Space) -->
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Algorithm I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Array</tag>
        <tag>Backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]542. 01 Matrix</title>
    <url>/2022/09/07/leetcode/Algorithm/Algorithm%20I/542-01-matrix/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/14/leetcode/Algorithm/Algorithm%20I/Starting-write-Algorithm-I-Note/">Algorithm I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Algorithm I</code> 的第九天第一個題目，總共有兩題。</p>
<ul>
<li>難度: <code>Medium</code></li>
<li>花費時間: 4 hr</li>
<li><a href="https://leetcode.com/problems/01-matrix/">題目</a></li>
</ul>
<p>給你一個 <code>MxN binary matrix</code> <code>mat</code> ，返回一個 <code>MxN matrix</code> 計算每個非零的值跟最近的零的距離，然後取代在他的值上。</p>
<p>上下左右才算相鄰，側面的就算要走兩格了。</p>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
<p><strong>限制:</strong></p>
<ul>
<li><code>m == mat.length</code></li>
<li><code>n == mat[i].length</code></li>
<li><code>1 &lt;= m, n &lt;= 104</code></li>
<li><code>1 &lt;= m * n &lt;= 104</code></li>
<li><code>mat[i][j]</code> is either <code>0</code> or <code>1</code>.</li>
<li>There is at least one <code>0</code> in <code>mat</code>.</li>
</ul>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/04/24/01-1-grid.jpg" alt="example-image-1" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: mat = [[0,0,0],[0,1,0],[0,0,0]]</span><br><span class="line">Output: [[0,0,0],[0,1,0],[0,0,0]]</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/04/24/01-2-grid.jpg" alt="example-image-2" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: mat = [[0,0,0],[0,1,0],[1,1,1]]</span><br><span class="line">Output: [[0,0,0],[0,1,0],[1,2,1]]</span><br></pre></td></tr></table></figure>
</details>
<details><summary>點我開啟思路</summary>
<p class="text-h2"> 思路 </p>
<p>=<mark><mark><mark><mark><mark><mark><mark>下面的 iterative 方法宣告失敗</mark></mark></mark></mark></mark></mark></mark></p>
<p>此方法最終會失敗是因為運算時間過久 <code>time out</code></p>
<ol>
<li>最大有可能有多少數字就運算幾次 (m + n -2)</li>
<li>遍歷矩陣</li>
<li>遇到 1 就進入 search 函式</li>
<li>重複做到完，就完成了</li>
</ol>
<p>search 函式</p>
<ol>
<li>找這個 node 的鄰居(上下左右)，全部塞進一個陣列裡</li>
<li>比較這個陣列，找出最小值 + 1 放回節點</li>
</ol>
<p><code>matrix</code> 會一直被迭代，越來越趨近於答案，如下範例</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原 input</span></span><br><span class="line">[[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">,[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">,[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">// iterated 1 time</span></span><br><span class="line">[[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">,[<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">,[<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">// iterated 2 time</span></span><br><span class="line">[[<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">,[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">,[<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">// iterated 3 time, completed</span></span><br><span class="line">[[<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">,[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">,[<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>]]</span><br></pre></td></tr></table></figure>
<p>失敗的程式碼</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">updateMatrix</span>(<span class="params">mat: <span class="built_in">number</span>[][]</span>): <span class="built_in">number</span>[][] &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">update</span>(<span class="params">row: <span class="built_in">number</span>, col: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">neighborArr</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line">    <span class="comment">// top</span></span><br><span class="line">    <span class="keyword">if</span> (mat[row - <span class="number">1</span>] &amp;&amp; mat[row - <span class="number">1</span>][col] != <span class="literal">undefined</span>)</span><br><span class="line">      neighborArr.<span class="title function_">push</span>(mat[row - <span class="number">1</span>][col]);</span><br><span class="line">    <span class="comment">// right</span></span><br><span class="line">    <span class="keyword">if</span> (mat[row][col + <span class="number">1</span>] != <span class="literal">undefined</span>)</span><br><span class="line">      neighborArr.<span class="title function_">push</span>(mat[row][col + <span class="number">1</span>]);</span><br><span class="line">    <span class="comment">// button</span></span><br><span class="line">    <span class="keyword">if</span> (mat[row + <span class="number">1</span>] &amp;&amp; mat[row + <span class="number">1</span>][col] != <span class="literal">undefined</span>)</span><br><span class="line">      neighborArr.<span class="title function_">push</span>(mat[row + <span class="number">1</span>][col]);</span><br><span class="line">    <span class="comment">// left</span></span><br><span class="line">    <span class="keyword">if</span> (mat[row][col - <span class="number">1</span>] != <span class="literal">undefined</span>)</span><br><span class="line">      neighborArr.<span class="title function_">push</span>(mat[row][col - <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(...neighborArr)</span><br><span class="line">    <span class="keyword">return</span> (<span class="title class_">Math</span>.<span class="title function_">min</span>(...neighborArr) + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; mat.<span class="property">length</span> + mat[<span class="number">0</span>].<span class="property">length</span> - <span class="number">2</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> row = <span class="number">0</span>; row &lt; mat.<span class="property">length</span>; row++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> col = <span class="number">0</span>; col &lt; mat[<span class="number">0</span>].<span class="property">length</span>; col++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mat[row][col] === <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        mat[row][col] = <span class="title function_">update</span>(row, col);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> mat;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>=<mark><mark><mark><mark><mark><mark><mark>下面的 bfs 方法宣告失敗</mark></mark></mark></mark></mark></mark></mark></p>
<p>此方法最終會失敗是因為運算時間過久 <code>time out</code></p>
<ol>
<li>遍歷矩陣</li>
<li>遇到 0 跳過</li>
<li>遇到 1 進入 bfs 函式</li>
<li>全部走完回傳原矩陣</li>
</ol>
<p>bfs 函式</p>
<ol>
<li>從頭開始一圈一圈往外走</li>
<li>有遇到 0 就跳出函式</li>
<li>沒遇到 0 就繼續往外圈走</li>
</ol>
<p>失敗的程式碼記錄</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">updateMatrix</span>(<span class="params">mat: <span class="built_in">number</span>[][]</span>): <span class="built_in">number</span>[][] &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// key is row, val is Array of col in this row.</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">visitedMap</span>: <span class="title class_">Map</span>&lt;<span class="built_in">number</span>, <span class="built_in">number</span>[]&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// bfs search list</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">searchArr</span>: <span class="built_in">number</span>[][];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">_search</span>(<span class="params">row: <span class="built_in">number</span>, col: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">    pathCount: <span class="built_in">number</span> = <span class="number">0</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="comment">// if this node is visited,or is edge of mat, than return now shartestPath.</span></span><br><span class="line">    <span class="keyword">if</span> ((visitedMap.<span class="title function_">get</span>(row) &amp;&amp; visitedMap.<span class="title function_">get</span>(row)?.<span class="title function_">indexOf</span>(col) != -<span class="number">1</span>) ||</span><br><span class="line">      row &gt; mat.<span class="property">length</span> - <span class="number">1</span> || col &gt; mat[<span class="number">0</span>].<span class="property">length</span> - <span class="number">1</span> ||</span><br><span class="line">      row &lt; <span class="number">0</span> || col &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//add this node into visitedMap.</span></span><br><span class="line">    <span class="keyword">if</span> (visitedMap.<span class="title function_">has</span>(row)) &#123;</span><br><span class="line">      visitedMap.<span class="title function_">get</span>(row)?.<span class="title function_">push</span>(col);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      visitedMap.<span class="title function_">set</span>(row, [col]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if this node is 0 than return now pathCount</span></span><br><span class="line">    <span class="keyword">if</span> (mat[row][col] === <span class="number">0</span>) <span class="keyword">return</span> pathCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if this node isn&#x27;t 0, than move on next node (bfs).</span></span><br><span class="line">    <span class="comment">// push node into search list</span></span><br><span class="line">    <span class="comment">// top (row - 1)</span></span><br><span class="line">    searchArr.<span class="title function_">push</span>([row - <span class="number">1</span>, col, pathCount + <span class="number">1</span>]);</span><br><span class="line">    <span class="comment">// right (col + 1)</span></span><br><span class="line">    searchArr.<span class="title function_">push</span>([row, col + <span class="number">1</span>, pathCount + <span class="number">1</span>]);</span><br><span class="line">    <span class="comment">// button (row + 1)</span></span><br><span class="line">    searchArr.<span class="title function_">push</span>([row + <span class="number">1</span>, col, pathCount + <span class="number">1</span>]);</span><br><span class="line">    <span class="comment">// left (col - 1)</span></span><br><span class="line">    searchArr.<span class="title function_">push</span>([row, col - <span class="number">1</span>, pathCount + <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// bfs serarch</span></span><br><span class="line">    <span class="keyword">while</span> (searchArr.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> shartestPath = <span class="title function_">_search</span>(searchArr[<span class="number">0</span>][<span class="number">0</span>], searchArr[<span class="number">0</span>][<span class="number">1</span>], searchArr[<span class="number">0</span>][<span class="number">2</span>]);</span><br><span class="line">      searchArr.<span class="title function_">shift</span>();</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;arr: &#x27;</span> + searchArr + <span class="string">&quot; count: &quot;</span> + pathCount + <span class="string">&quot; shortestPath: &quot;</span> + shartestPath);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(...visitedMap.<span class="title function_">values</span>());</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(...visitedMap.<span class="title function_">keys</span>());</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (shartestPath != <span class="number">0</span>) <span class="keyword">return</span> shartestPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> row = <span class="number">0</span>; row &lt; mat.<span class="property">length</span>; row++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> col = <span class="number">0</span>; col &lt; mat[<span class="number">0</span>].<span class="property">length</span>; col++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (mat[row][col] === <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (mat[row][col] === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// reset visitedMap</span></span><br><span class="line">        visitedMap = <span class="keyword">new</span> <span class="title class_">Map</span>;</span><br><span class="line">        searchArr = [];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// do search</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;this: &quot;</span> + row + <span class="string">&quot; &quot;</span> + col)</span><br><span class="line">        mat[row][col] = <span class="title function_">_search</span>(row, col);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> mat;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>=<mark><mark><mark><mark><mark><mark><mark>下面的 dfs 方法宣告失敗</mark></mark></mark></mark></mark></mark></mark></p>
<ol>
<li>遍歷矩陣</li>
<li>遇到 0 跳過</li>
<li>遇到 1 進入 bfs 函式</li>
<li>全部走完回傳原矩陣</li>
</ol>
<p>dfs 函式</p>
<ol>
<li>不能走走過的</li>
<li>只要最後有走到 0 的都比大小，取最小的</li>
<li>更新值</li>
</ol>
<p>失敗的程式碼記錄</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">updateMatrix</span>(<span class="params">mat: <span class="built_in">number</span>[][]</span>): <span class="built_in">number</span>[][] &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// key is row, val is Array of col in this row.</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">visitedMap</span>: <span class="title class_">Map</span>&lt;<span class="built_in">number</span>, <span class="built_in">number</span>[]&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * search the shortest path to the nearest 0 of this node (dfs)</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> row row num of this node</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> col col num of this node</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> PathCount counting the path num every call</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> shortestPath prep to compare, and return at the end</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> <span class="variable">shartestPath</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">_search</span>(<span class="params">row: <span class="built_in">number</span>, col: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">    PathCount: <span class="built_in">number</span> = -<span class="number">1</span>, shortestPath: <span class="built_in">number</span> = mat.length + mat[<span class="number">0</span>].length - <span class="number">2</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(&quot;row: &quot; + row + &quot; col: &quot; + col);</span></span><br><span class="line">    <span class="comment">// console.log(...visitedMap.values());</span></span><br><span class="line">    <span class="comment">// console.log(...visitedMap.keys());</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// if this node is visited,or is edge of mat, than return now shartestPath.</span></span><br><span class="line">    <span class="keyword">if</span> ((visitedMap.<span class="title function_">get</span>(row) &amp;&amp; visitedMap.<span class="title function_">get</span>(row)?.<span class="title function_">indexOf</span>(col) != -<span class="number">1</span>) ||</span><br><span class="line">      row &gt; mat.<span class="property">length</span> - <span class="number">1</span> || col &gt; mat[<span class="number">0</span>].<span class="property">length</span> - <span class="number">1</span> ||</span><br><span class="line">      row &lt; <span class="number">0</span> || col &lt; <span class="number">0</span>) <span class="keyword">return</span> shortestPath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Plus PathCount.</span></span><br><span class="line">    <span class="title class_">PathCount</span>++</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if this node is 0, than return shortestPath.</span></span><br><span class="line">    <span class="keyword">if</span> (mat[row][col] === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="title class_">PathCount</span>, shortestPath);</span><br><span class="line">      visitedMap = <span class="keyword">new</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//add this node into visitedMap.</span></span><br><span class="line">    <span class="keyword">if</span> (visitedMap.<span class="title function_">has</span>(row)) &#123;</span><br><span class="line">      visitedMap.<span class="title function_">get</span>(row)?.<span class="title function_">push</span>(col);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      visitedMap.<span class="title function_">set</span>(row, [col]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if this node isn&#x27;t 0, than move on next node (dfs).</span></span><br><span class="line">    shortestPath = <span class="title class_">Math</span>.<span class="title function_">min</span>(shortestPath, <span class="title function_">_search</span>(row + <span class="number">1</span>, col, <span class="title class_">PathCount</span>, shortestPath));</span><br><span class="line">    shortestPath = <span class="title class_">Math</span>.<span class="title function_">min</span>(shortestPath, <span class="title function_">_search</span>(row - <span class="number">1</span>, col, <span class="title class_">PathCount</span>, shortestPath));</span><br><span class="line">    shortestPath = <span class="title class_">Math</span>.<span class="title function_">min</span>(shortestPath, <span class="title function_">_search</span>(row, col + <span class="number">1</span>, <span class="title class_">PathCount</span>, shortestPath));</span><br><span class="line">    shortestPath = <span class="title class_">Math</span>.<span class="title function_">min</span>(shortestPath, <span class="title function_">_search</span>(row, col - <span class="number">1</span>, <span class="title class_">PathCount</span>, shortestPath));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> shortestPath;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> row = <span class="number">0</span>; row &lt; mat.<span class="property">length</span>; row++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> col = <span class="number">0</span>; col &lt; mat[<span class="number">0</span>].<span class="property">length</span>; col++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (mat[row][col] === <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (mat[row][col] === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// reset visitedMap</span></span><br><span class="line">        visitedMap = <span class="keyword">new</span> <span class="title class_">Map</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// do search</span></span><br><span class="line">        mat[row][col] = <span class="title function_">_search</span>(row, col);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> mat;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</details>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>自己拚了 4 個小時，最後還是看解答才寫出來，但我有寫出比較相近的版本，請看上方思路裡的 iterative 版本。</p>
<p>這題有兩種做法:</p>
<p>第一種是使用 <code>bfs</code> ，但是對象是 0 ，我有想過這樣做，但是沒想到好的實現方法。</p>
<p>第二種是使用 <code>DP</code> 跟我寫的版本很類似，但他好在他不用迭代出答案，他只要正向遍歷一次，反向再遍歷一次即可。</p>
<p>解題步驟:</p>
<ul>
<li>正向遍歷一次 <code>matrix</code>
<ul>
<li>遇到 0 跳過</li>
<li>每個值都只拿自己左方及上方的值做比較，拿出最小的 + 1 放入 <code>node.val = Math.min(top.val, left.val) + 1</code></li>
</ul>
</li>
<li>反向遍歷一次 <code>matrix</code>
<ul>
<li>遇到 0 跳過</li>
<li>每個值都與自己下方及右方的值做比較，拿出最小的 + 1 放入 <code>node.val = Math.min(node.val, right.val, puttom.val) + 1</code></li>
</ul>
</li>
</ul>
<p>範例:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input</span></span><br><span class="line">[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">,[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">,[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先由左上往右下做檢查</span></span><br><span class="line">[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>]</span><br><span class="line">,[<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再由右下往左上做檢查，答案就出來了</span></span><br><span class="line">[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">,[<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]]</span><br></pre></td></tr></table></figure>
<h2 id="程式"><a class="markdownIt-Anchor" href="#程式"></a> 程式</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">updateMatrix</span>(<span class="params">mat: <span class="built_in">number</span>[][]</span>): <span class="built_in">number</span>[][] &#123;</span><br><span class="line">  <span class="keyword">let</span> longestPath = mat.<span class="property">length</span> + mat[<span class="number">0</span>].<span class="property">length</span> - <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// first, iterate by top left to buttom right</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> row = <span class="number">0</span>; row &lt; mat.<span class="property">length</span>; row++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> col = <span class="number">0</span>; col &lt; mat[<span class="number">0</span>].<span class="property">length</span>; col++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (mat[row][col] === <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// compare for the min val of this node&#x27;s top and left.</span></span><br><span class="line">      mat[row][col] = <span class="title class_">Math</span>.<span class="title function_">min</span>(</span><br><span class="line">        mat[row - <span class="number">1</span>] ? mat[row - <span class="number">1</span>][col] + <span class="number">1</span> : longestPath,<span class="comment">// top</span></span><br><span class="line">        mat[row][col - <span class="number">1</span>] != <span class="literal">undefined</span> ? mat[row][col - <span class="number">1</span>] + <span class="number">1</span> : longestPath);<span class="comment">// left</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// secend, iterate by buttom right to top left</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> row = mat.<span class="property">length</span> - <span class="number">1</span>; row &gt;= <span class="number">0</span>; row--) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> col = mat[<span class="number">0</span>].<span class="property">length</span> - <span class="number">1</span>; col &gt;= <span class="number">0</span>; col--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (mat[row][col] === <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// compare for the min val of this node and it buttom and right.</span></span><br><span class="line">      mat[row][col] = <span class="title class_">Math</span>.<span class="title function_">min</span>(</span><br><span class="line">        mat[row][col],<span class="comment">// this node</span></span><br><span class="line">        mat[row + <span class="number">1</span>] ? mat[row + <span class="number">1</span>][col] + <span class="number">1</span> : longestPath,<span class="comment">// buttom</span></span><br><span class="line">        mat[row][col + <span class="number">1</span>] != <span class="literal">undefined</span> ? mat[row][col + <span class="number">1</span>] + <span class="number">1</span> : longestPath);<span class="comment">// right</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> mat;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/ZzyvG6J.png" alt="score-image" /></p>
<h5 id="參考資料"><a class="markdownIt-Anchor" href="#參考資料"></a> 參考資料</h5>
<ul>
<li><a href="https://leetcode.com/problems/01-matrix/discuss/1369741/C%2B%2BJavaPython-BFS-DP-solutions-with-Picture-Clean-and-Concise-O(1)-Space">discuss</a></li>
</ul>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Algorithm I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Breadth-First Search</tag>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]567. Permutation In String</title>
    <url>/2022/08/15/leetcode/Algorithm/Algorithm%20I/567-permutation-in-string/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/14/leetcode/Algorithm/Algorithm%20I/Starting-write-Algorithm-I-Note/">Algorithm I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Algorithm I</code> 的第六天第二個題目，總共有兩題。</p>
<ul>
<li>難度: <code>Medium</code></li>
<li>花費時間: 3 小時</li>
<li><a href="https://leetcode.com/problems/permutation-in-string/">題目</a></li>
</ul>
<p>Given you two strings <code>s1</code> and <code>s2</code>, return <code>true</code> if <code>s2</code> contains a permutation of <code>s1</code> , otherwise return <code>false</code>.</p>
<blockquote>
<p>permutation: 字母重組字</p>
</blockquote>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
    <pre>
<p><strong>限制:</strong></p>
<ul>
<li><code>1 &lt;= s1.length, s2.length &lt;= 104</code></li>
<li><code>s1</code> and <code>s2</code> consist of lowercase English letters.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s1 = &quot;ab&quot;, s2 = &quot;eidbaooo&quot;</span><br><span class="line">Output: true</span><br><span class="line">Explanation: s2 contains one permutation of s1 (&quot;ba&quot;).</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s1 = &quot;ab&quot;, s2 = &quot;eidboaoo&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>本來這題我想要用 <code>Hash Map</code> 做，但是想破頭有點問題，所以最後參考了評論區，評論區的一個做法我覺得很有意思，他運用了英文的編碼，直接把編碼出現次數存在陣列裡，然後存放的位置就是那個編碼的碼數，這直接解決了某個 <code>char</code> 重複多次的問題。</p>
<p>然後先用兩個 <code>Array</code> 存下 <code>s1</code> 長度的字串邊碼，然後再運用 <code>Sliding Window</code> 去看兩個 <code>Array</code> 是否一樣，不一樣就把 <code>Window</code> 繼續往下一個 <code>index</code> 前進，直到最後都還是不一樣就回傳 <code>false</code> 著實精妙。</p>
<h2 id="程式碼"><a class="markdownIt-Anchor" href="#程式碼"></a> 程式碼</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkInclusion</span><span class="params">(String s1, String s2)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s1.length() &gt; s2.length()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span>[] s1Arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="type">int</span>[] s2Arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s1.length(); i++)&#123;</span><br><span class="line">        s1Arr[s1.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        s2Arr[s2.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (Arrays.equals(s1Arr, s2Arr)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> s1.length();</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (right &lt; s2.length()) &#123;</span><br><span class="line">        s2Arr[s2.charAt(right) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        s2Arr[s2.charAt(left) - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        <span class="keyword">if</span> (Arrays.equals(s1Arr, s2Arr)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        right++;</span><br><span class="line">        left++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/LmtSHLF.png" alt="" /></p>
<details style='display:none;'><summary>點我開啟舊寫法/失敗寫法</summary>
<pre>
<p></pre></details></p>
<!-- ##### 參考資料 -->]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Algorithm I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Sliding Window</tag>
        <tag>Two Pointers</tag>
        <tag>Algorithm</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]557. Reverse Words in a String III</title>
    <url>/2022/06/16/leetcode/Algorithm/Algorithm%20I/557-reverse-words-in-a-string-iii/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/14/leetcode/Algorithm/Algorithm%20I/Starting-write-Algorithm-I-Note/">Algorithm I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Algorithm I</code> 的第四天第二個題目，總共有兩題。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間:</li>
<li><a href="https://leetcode.com/problems/reverse-words-in-a-string-iii/">題目</a></li>
</ul>
<p>給你一個字串(s)，把這個字串反轉之後回傳，字串裡的空格不用反轉。</p>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
<pre>
<p><strong>限制:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 5 * 104</code></li>
<li><code>s</code> is a <a href="https://en.wikipedia.org/wiki/ASCII#Printable_characters">printable ascii character</a>.</li>
<li><code>s</code> 的前後不會有空格</li>
<li><code>s</code> 一定會有至少一個字母</li>
<li><code>s</code> 裡的所有空格都是單格空格</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;Let&#x27;s take LeetCode contest&quot;</span><br><span class="line">Output: &quot;s&#x27;teL ekat edoCteeL tsetnoc&quot;</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;God Ding&quot;</span><br><span class="line">Output: &quot;doG gniD&quot;</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<h3 id="內建函式作法"><a class="markdownIt-Anchor" href="#內建函式作法"></a> 內建函式作法</h3>
<p>使用到了 JS 內建函式:</p>
<ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split">String.prototype.split()</a>: 把字串按照你指定的 separator 分割，然後存在陣列裡。</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse">Array.prototype.reverse()</a>: 把陣列反轉。</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join">Array.prototype.join()</a>: 把陣列按照你指定的 Separator 合併，存成字串</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseWords = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> splitS = s.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> reversedS = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i  =<span class="number">0</span> ; i <span class="keyword">in</span> splitS; i ++)&#123;</span><br><span class="line">        reversedS.<span class="title function_">push</span>(splitS[i].<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> reversedS.<span class="title function_">join</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p>內建函式 reverse() 寫法成績</p>
<p><img src="https://i.imgur.com/bSt1BZt.png" alt="" /></p>
<details style=''><summary>點我開啟舊寫法/失敗寫法</summary>
<pre>
<ul>
<li>內建函式作法</li>
</ul>
<p>這個做法寫的太複雜了，導致跑出來成績非常不理想</p>
<ol>
<li>把字串以空格切分後放進陣列</li>
<li>遍歷陣列每個元素都做 reverse</li>
<li>組回字串</li>
<li>回傳字串</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseWords = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> reversedS ;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> ele <span class="keyword">of</span> s.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>))&#123;</span><br><span class="line">        ele = <span class="title function_">reverseWord</span>(ele)</span><br><span class="line">        <span class="keyword">if</span> (!reversedS)&#123;</span><br><span class="line">            reversedS = ele;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            reversedS += <span class="string">&#x27; &#x27;</span> + ele;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> reversedS</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reverseWord</span>(<span class="params">word</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> s = word.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> reversedWord = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="title class_">Math</span>.<span class="title function_">floor</span>(s.<span class="property">length</span> / <span class="number">2</span>); i++) &#123;</span><br><span class="line">        temp = s[i];</span><br><span class="line">        s[i] = s[s.<span class="property">length</span> - i - <span class="number">1</span>];</span><br><span class="line">        s[s.<span class="property">length</span> - i - <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> s)&#123;</span><br><span class="line">        reversedWord += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> reversedWord;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/p1R9bZ7.png" alt="" /></p>
<p></pre></details></p>
<!-- ##### 參考資料 -->]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Algorithm I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Two Pointers</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]617. Merge Two Binary Trees</title>
    <url>/2022/08/30/leetcode/Algorithm/Algorithm%20I/617-merge-two-binary-trees/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/14/leetcode/Algorithm/Algorithm%20I/Starting-write-Algorithm-I-Note/">Algorithm I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Algorithm I</code> 的第八天第一個題目，總共有兩題。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 20 min</li>
<li><a href="https://leetcode.com/problems/merge-two-binary-trees/">題目</a></li>
</ul>
<p>給你兩個 <code>Binary Tree</code> <code>root1</code> 跟 <code>root2</code> ，把這兩個 <code>Tree</code> 合併之後再回傳即可。</p>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
    <pre>
<p><strong>限制:</strong></p>
<ul>
<li><code>m == grid.length</code></li>
<li><code>n == grid[i].length</code></li>
<li><code>1 &lt;= m, n &lt;= 50</code></li>
<li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li>
</ul>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/02/05/merge.jpg" alt="example-1-jpg" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]</span><br><span class="line">Output: [3,4,5,5,4,null,7]</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root1 = [1], root2 = [1,2]</span><br><span class="line">Output: [2,2]</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p><code>Tree</code> 遍歷很基本的練習，寫了兩個版本，<br />
第一個版本是有建立一個新的 <code>Tree</code> 來儲存合併後的數據(比較直覺)。<br />
第二個版本是直接修改 <code>root1</code> (in-place)，更能節省空間。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TreeNode 定義</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="attr">val</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">left</span>: <span class="title class_">TreeNode</span> | <span class="literal">null</span></span><br><span class="line">    <span class="attr">right</span>: <span class="title class_">TreeNode</span> | <span class="literal">null</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">val?: <span class="built_in">number</span>, left?: TreeNode | <span class="literal">null</span>, right?: TreeNode | <span class="literal">null</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">val</span> = (val === <span class="literal">undefined</span> ? <span class="number">0</span> : val)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">left</span> = (left === <span class="literal">undefined</span> ? <span class="literal">null</span> : left)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">right</span> = (right === <span class="literal">undefined</span> ? <span class="literal">null</span> : right)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-ts-recursion-to-mergedtrees"><a class="markdownIt-Anchor" href="#1-ts-recursion-to-mergedtrees"></a> 1. TS Recursion to mergedTrees</h3>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mergeTrees</span>(<span class="params">root1: TreeNode | <span class="literal">null</span>, root2: TreeNode | <span class="literal">null</span></span>): <span class="title class_">TreeNode</span> | <span class="literal">null</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!root1 &amp;&amp; !root2) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">moveToNext</span>(root1, root2);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">moveToNext</span>(<span class="params">root1: TreeNode | <span class="literal">null</span>, root2: TreeNode | <span class="literal">null</span>, mergedTrees: TreeNode = <span class="keyword">new</span> TreeNode(<span class="number">0</span>)</span>): <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">  mergedTrees.<span class="property">val</span> = (root1?.<span class="property">val</span> ? root1.<span class="property">val</span> : <span class="number">0</span>) + (root2?.<span class="property">val</span> ? root2.<span class="property">val</span> : <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (root1?.<span class="property">left</span> || root2?.<span class="property">left</span>) &#123;</span><br><span class="line">    mergedTrees.<span class="property">left</span> = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="title function_">moveToNext</span>((root1?.<span class="property">left</span> ? root1?.<span class="property">left</span> : <span class="literal">null</span>), (root2?.<span class="property">left</span> ? rㄏoot2.<span class="property">left</span> : <span class="literal">null</span>), mergedTrees.<span class="property">left</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (root1?.<span class="property">right</span> || root2?.<span class="property">right</span>) &#123;</span><br><span class="line">    mergedTrees.<span class="property">right</span> = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="title function_">moveToNext</span>((root1?.<span class="property">right</span> ? root1?.<span class="property">right</span> : <span class="literal">null</span>), (root2?.<span class="property">right</span> ? root2.<span class="property">right</span> : <span class="literal">null</span>), mergedTrees.<span class="property">right</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> mergedTrees;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="2-ts-recursion-to-root1"><a class="markdownIt-Anchor" href="#2-ts-recursion-to-root1"></a> 2. TS Recursion to root1</h3>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mergeTrees</span>(<span class="params">root1: TreeNode | <span class="literal">null</span>, root2: TreeNode | <span class="literal">null</span></span>): <span class="title class_">TreeNode</span> | <span class="literal">null</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!root1 &amp;&amp; !root2) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">moveToNext</span>(root1?<span class="attr">root1</span>:<span class="literal">undefined</span>, root2);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">moveToNext</span>(<span class="params">root1: TreeNode = <span class="keyword">new</span> TreeNode(<span class="number">0</span>), root2: TreeNode | <span class="literal">null</span></span>): <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    root1.<span class="property">val</span> = (root1?.<span class="property">val</span> ? root1.<span class="property">val</span> : <span class="number">0</span>) + (root2?.<span class="property">val</span> ? root2.<span class="property">val</span> : <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root1?.<span class="property">left</span> || root2?.<span class="property">left</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!root1?.<span class="property">left</span>) root1.<span class="property">left</span> = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="title function_">moveToNext</span>((root1?.<span class="property">left</span> ? root1?.<span class="property">left</span> : <span class="literal">null</span>), (root2?.<span class="property">left</span> ? root2.<span class="property">left</span> : <span class="literal">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root1?.<span class="property">right</span> || root2?.<span class="property">right</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!root1?.<span class="property">right</span>) root1.<span class="property">right</span> = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="title function_">moveToNext</span>((root1?.<span class="property">right</span> ? root1?.<span class="property">right</span> : <span class="literal">null</span>), (root2?.<span class="property">right</span> ? root2.<span class="property">right</span> : <span class="literal">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root1;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/kxv7HLR.png" alt="" /></p>
<details style='display:none;'><summary>點我開啟舊寫法/失敗寫法</summary>
<pre>
<p></pre></details></p>
<!-- ##### 參考資料 -->]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Algorithm I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Depth-First Search</tag>
        <tag>Tree</tag>
        <tag>Binary Tree</tag>
        <tag>Breadth-First Search</tag>
        <tag>Recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]695. Max Area of Island</title>
    <url>/2022/08/29/leetcode/Algorithm/Algorithm%20I/695-max-area-of-island/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/14/leetcode/Algorithm/Algorithm%20I/Starting-write-Algorithm-I-Note/">Algorithm I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Algorithm I</code> 的第七天第二個題目，總共有兩題。</p>
<ul>
<li>難度: <code>Medium</code></li>
<li>花費時間: 1.5 hr</li>
<li><a href="https://leetcode.com/problems/max-area-of-island/">題目</a></li>
</ul>
<p>給你一個 <code>MxN Matrix</code> <code>grid</code> ，找出裡面最大的孤島，然後回傳孤島的大小。</p>
<span id="more"></span>
<p><code>grid</code> 裡只會有 0 跟 1 ， 0 代表海， 1 代表陸地。</p>
<p>孤島必須滿足四邊都是海。</p>
<details><summary>點我開啟限制與範例</summary>
    <pre>
<p><strong>限制:</strong></p>
<ul>
<li><code>m == grid.length</code></li>
<li><code>n == grid[i].length</code></li>
<li><code>1 &lt;= m, n &lt;= 50</code></li>
<li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li>
</ul>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/05/01/maxarea1-grid.jpg" alt="example-1-jpg" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: grid = [</span><br><span class="line">            [0,0,1,0,0,0,0,1,0,0,0,0,0],</span><br><span class="line">            [0,0,0,0,0,0,0,1,1,1,0,0,0],</span><br><span class="line">            [0,1,1,0,1,0,0,0,0,0,0,0,0],</span><br><span class="line">            [0,1,0,0,1,1,0,0,1,0,1,0,0],</span><br><span class="line">            [0,1,0,0,1,1,0,0,1,1,1,0,0],</span><br><span class="line">            [0,0,0,0,0,0,0,0,0,0,1,0,0],</span><br><span class="line">            [0,0,0,0,0,0,0,1,1,1,0,0,0],</span><br><span class="line">            [0,0,0,0,0,0,0,1,1,0,0,0,0]]</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: The answer is not 11, because the island must be connected 4-directionally.</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: grid = [[0,0,0,0,0,0,0,0]]</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<ol>
<li>遍歷陣列找到有 1 的</li>
<li>對 1 做搜尋找出他的大小，然後更新答案</li>
<li>每塊走過的地都塞進 set 裡，等等直接比有塞過就跳過。</li>
<li>回傳答案</li>
</ol>
<h2 id="程式碼"><a class="markdownIt-Anchor" href="#程式碼"></a> 程式碼</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">maxAreaOfIsland</span>(<span class="params">grid: number[][]</span>): number &#123;</span><br><span class="line">  <span class="keyword">let</span> row = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> col = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> maxAreaLand = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// key 是 row ， vol 是 col</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">visitedMap</span>: <span class="title class_">Map</span>&lt;number, number[]&gt; = <span class="keyword">new</span> <span class="title class_">Map</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (row; row &lt; grid.<span class="property">length</span>; row++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (col; col &lt; grid[<span class="number">0</span>].<span class="property">length</span>; col++) &#123;</span><br><span class="line">      <span class="comment">// 如果是海，就跳過</span></span><br><span class="line">      <span class="keyword">if</span> (grid[row][col] === <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 跑遞迴找最大</span></span><br><span class="line">      maxAreaLand = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="title function_">dfs</span>(grid, row, col, visitedMap), maxAreaLand);</span><br><span class="line">    &#125;</span><br><span class="line">    col = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> maxAreaLand;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dfs</span>(<span class="params">grid: number[][], row: number, col: number, visitedMap: <span class="built_in">Map</span>&lt;number, number[]&gt;, count: number = <span class="number">0</span></span>): number &#123;</span><br><span class="line">  <span class="comment">// 如果是海，或是有看過，就跳過</span></span><br><span class="line">  <span class="keyword">if</span> (!grid[row] || !grid[row][col] || grid[row][col] === <span class="number">0</span> || !<span class="title function_">chkVisited</span>(visitedMap, row, col)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  count++;</span><br><span class="line">  count += <span class="title function_">dfs</span>(grid, row + <span class="number">1</span>, col, visitedMap);</span><br><span class="line">  count += <span class="title function_">dfs</span>(grid, row - <span class="number">1</span>, col, visitedMap);</span><br><span class="line">  count += <span class="title function_">dfs</span>(grid, row, col + <span class="number">1</span>, visitedMap);</span><br><span class="line">  count += <span class="title function_">dfs</span>(grid, row, col - <span class="number">1</span>, visitedMap);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">chkVisited</span>(<span class="params">visitedMap: <span class="built_in">Map</span>&lt;number, number[]&gt;, row: number, col: number</span>): boolean &#123;</span><br><span class="line">  <span class="comment">// 如果已經看過他，就跳過</span></span><br><span class="line">  <span class="keyword">if</span> (visitedMap.<span class="title function_">get</span>(row) &amp;&amp; visitedMap.<span class="title function_">get</span>(row)?.<span class="title function_">indexOf</span>(col) != -<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 加入走過的 Map</span></span><br><span class="line">  <span class="keyword">if</span> (!visitedMap.<span class="title function_">get</span>(row)) &#123;</span><br><span class="line">    visitedMap.<span class="title function_">set</span>(row, [col]);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    visitedMap.<span class="title function_">get</span>(row)?.<span class="title function_">push</span>(col);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/kxv7HLR.png" alt="" /></p>
<details style='display:none;'><summary>點我開啟舊寫法/失敗寫法</summary>
<pre>
<p></pre></details></p>
<!-- ##### 參考資料 -->]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Algorithm I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Array</tag>
        <tag>Matrix</tag>
        <tag>Union Find</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]704. Binary Search</title>
    <url>/2022/06/13/leetcode/Algorithm/Algorithm%20I/704-Binary-Search/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/14/leetcode/Algorithm/Algorithm%20I/Starting-write-Algorithm-I-Note/">Algorithm I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Algorithm I</code> 的第一天第一個題目，總共有三題。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 半小時</li>
<li><a href="https://leetcode.com/problems/binary-search/">題目</a></li>
</ul>
<p>給你一個順序排列的陣列，跟一個目標數字，回傳目標數字在陣列中的 <code>index</code> 如果不存在，回傳 <code>-1</code></p>
<span id="more"></span>
<p>把時間複雜度控制在 <code>O(log n)</code></p>
<details><summary>點我開啟限制與範例</summary>
<pre>
<p><strong>限制:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 104</code></li>
<li><code>-104 &lt; nums[i], target &lt; 104</code></li>
<li>All the integers in <code>nums</code> are <strong>unique</strong>.</li>
<li><code>nums</code> is sorted in ascending order.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [-1,0,3,5,9,12], target = 9</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: 9 exists in nums and its index is 4</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [-1,0,3,5,9,12], target = 2</span><br><span class="line">Output: -1</span><br><span class="line">Explanation: 2 does not exist in nums so return -1</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>題目有提到必須把時間複雜度控制在 <code>O(log n)</code> ，會讓我想要用類似 Merge Sort 的方式尋找:</p>
<ol>
<li>檢查原陣列頭尾是否包含 <code>target</code></li>
<li>把原陣列切一半，檢查切一半的陣列頭尾是否包含 <code>target</code> ，選擇有的那個</li>
<li>重複做 2.</li>
<li>得到答案，或是沒有答案，回傳 -1</li>
</ol>
<h2 id="程式碼"><a class="markdownIt-Anchor" href="#程式碼"></a> 程式碼</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> search = <span class="keyword">function</span> (<span class="params">nums, target, index = <span class="number">0</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(nums)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果頭是 target 的話就回傳 index</span></span><br><span class="line">    <span class="keyword">if</span> (nums[<span class="number">0</span>] == target) <span class="keyword">return</span> index;</span><br><span class="line">    <span class="comment">// 如果尾是 target 的話就回傳陣列長度</span></span><br><span class="line">    <span class="keyword">if</span> (nums[nums.<span class="property">length</span> - <span class="number">1</span>] == target) <span class="keyword">return</span> index + nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果做到剩一個還沒有就回傳 -1</span></span><br><span class="line">    <span class="keyword">if</span> (nums.<span class="property">length</span> == <span class="number">1</span> &amp;&amp; nums[<span class="number">0</span>] != target) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 切一刀</span></span><br><span class="line">    <span class="keyword">const</span> middle = <span class="title class_">Math</span>.<span class="title function_">floor</span>(nums.<span class="property">length</span> / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分出左邊</span></span><br><span class="line">    <span class="keyword">const</span> left = nums.<span class="title function_">slice</span>(<span class="number">0</span>, middle);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分出右邊</span></span><br><span class="line">    <span class="keyword">const</span> right = nums.<span class="title function_">slice</span>(middle, nums.<span class="property">length</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果左邊有值，就進去找左邊</span></span><br><span class="line">    <span class="keyword">if</span> (left[<span class="number">0</span>] &lt;= target &amp;&amp; left[left.<span class="property">length</span> - <span class="number">1</span>] &gt;= target) <span class="keyword">return</span> <span class="title function_">search</span>(left, target, index);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果右邊有值，就進去找右邊，但是index記得加上前面的長度</span></span><br><span class="line">    <span class="keyword">if</span> (right[<span class="number">0</span>] &lt;= target &amp;&amp; right[right.<span class="property">length</span> - <span class="number">1</span>] &gt;= target) <span class="keyword">return</span> <span class="title function_">search</span>(right, target, index + left.<span class="property">length</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 例外處理 ex:search([0,3],2)</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p>雖然我自認為寫的不錯，但成績狠狠的打臉我，以後有機會再看看評論區的大大是怎麼做的吧！</p>
<p><img src="https://i.imgur.com/tM63zgI.png" alt="" /></p>
<details style='display:none;'><summary>點我開啟舊寫法/失敗寫法</summary>
<pre>
<p></pre></details></p>
<!-- ##### 參考資料 -->]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Algorithm I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]70. Climbing Stairs</title>
    <url>/2022/09/12/leetcode/Algorithm/Algorithm%20I/70-climbing-stairs/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/14/leetcode/Algorithm/Algorithm%20I/Starting-write-Algorithm-I-Note/#09-x2F-13-Day-12-Dynamic-Programming">Algorithm I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Algorithm I</code> 的第十二天第一個題目，總共有三題。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 30 min</li>
<li><a href="https://leetcode.com/problems/climbing-stairs/">題目</a></li>
</ul>
<p>你面前有一個 <code>n</code> 階的樓梯，你一次可以走一步或是兩步，請算出你總共有幾種爬法。</p>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
<p><strong>限制:</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 45</code></li>
</ul>
<p><strong>Example 1:</strong></p>
<!-- ![example-image-1](https://assets.leetcode.com/uploads/2019/02/16/oranges.png) -->
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 2</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: There are two ways to climb to the top.</span><br><span class="line">1. 1 step + 1 step</span><br><span class="line">2. 2 steps</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<!-- ![example-image-2](https://assets.leetcode.com/uploads/2021/04/24/01-2-grid.jpg) -->
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 3</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: There are three ways to climb to the top.</span><br><span class="line">1. 1 step + 1 step + 1 step</span><br><span class="line">2. 1 step + 2 steps</span><br><span class="line">3. 2 steps + 1 step</span><br></pre></td></tr></table></figure>
</details>
<h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2>
<p>DP 的重點就是找規律，所以通常我會先沙盤推演一波找規律，如果我沒有什麼想法的話。</p>
<p>下面是我沙盤推演 <code>test case</code> 從 1 ~ 6</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="comment">// n = 1, ans count = 1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="comment">// n = 2, ans count = 2</span></span><br><span class="line"><span class="number">11</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="comment">// n = 3, ans count = 3</span></span><br><span class="line"><span class="number">111</span> <span class="number">12</span> <span class="number">21</span></span><br><span class="line"><span class="number">4</span> <span class="comment">// n = 4, ans count = 5 從這步開始可以看出他有斐波那契的跡象</span></span><br><span class="line"><span class="number">1111</span> <span class="number">211</span> <span class="number">121</span> <span class="number">112</span> <span class="number">22</span></span><br><span class="line"><span class="number">5</span> <span class="comment">// n = 5, ans count = 8</span></span><br><span class="line"><span class="number">11111</span> <span class="number">2111</span> <span class="number">1211</span> <span class="number">1121</span> <span class="number">1112</span> <span class="number">221</span> <span class="number">212</span> <span class="number">122</span></span><br><span class="line"><span class="number">6</span> <span class="comment">// n = 6, ans count = 13</span></span><br><span class="line"><span class="number">111111</span> <span class="number">21111</span> <span class="number">12111</span> <span class="number">11211</span> <span class="number">11121</span> <span class="number">11112</span> <span class="number">2211</span> <span class="number">2121</span> <span class="number">2112</span> <span class="number">1221</span> <span class="number">1122</span> <span class="number">1212</span> <span class="number">222</span></span><br></pre></td></tr></table></figure>
<p>由上方沙盤推演就可以得出，答案就會等於對 n 做斐波那契。</p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>這題只要有找到規律，就會知道這題要用斐波那契去做。</p>
<p>斐波那契指的是: 下一個值 = 上兩個值相加。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一階，走一步</span></span><br><span class="line"><span class="number">1</span> ways</span><br><span class="line"><span class="comment">// 第二階，可以走兩步或是走兩次一步</span></span><br><span class="line"><span class="number">2</span> ways</span><br><span class="line"><span class="comment">// 第三階開始，用斐波那契對前兩個數字相加</span></span><br><span class="line"><span class="number">1</span> + <span class="number">2</span> = <span class="number">3</span> ways</span><br><span class="line"><span class="comment">// 第四階</span></span><br><span class="line"><span class="number">2</span> + <span class="number">3</span> = <span class="number">5</span> ways</span><br><span class="line"><span class="comment">// 第五階</span></span><br><span class="line"><span class="number">3</span> + <span class="number">5</span> = <span class="number">8</span> ways</span><br></pre></td></tr></table></figure>
<p>TypeScript 實做:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">climbStairs</span>(<span class="params">n: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * a = ans when one stair</span></span><br><span class="line"><span class="comment">   * b = ans when two stairs</span></span><br><span class="line"><span class="comment">   * count = fibonacci count when n stairs</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>, b = <span class="number">2</span>, count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// base case</span></span><br><span class="line">  <span class="keyword">if</span> (n === a || n === b) <span class="keyword">return</span> n;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// starting with three stairs</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">3</span>; i &lt; n + <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * a position = i - 2 = 1</span></span><br><span class="line"><span class="comment">     * b position = i - 1 = 2</span></span><br><span class="line"><span class="comment">     * count position will be 3 when take count.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// count when three stairs will equal to a plus b (fibonacci)</span></span><br><span class="line">    count = a + b;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set a position to b</span></span><br><span class="line">    a = b;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set b position to count position.</span></span><br><span class="line">    b = count;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/UnaQT1u.png" alt="score-image" /></p>
<!-- ##### 參考資料 -->
<!-- + [discuss](https://leetcode.com/problems/01-matrix/discuss/1369741/C%2B%2BJavaPython-BFS-DP-solutions-with-Picture-Clean-and-Concise-O(1)-Space) -->
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Algorithm I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Math</tag>
        <tag>Dynamic Programming</tag>
        <tag>Memoization</tag>
        <tag>fibonacci</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]733. Flood Fill</title>
    <url>/2022/08/29/leetcode/Algorithm/Algorithm%20I/733-flood-fill/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/14/leetcode/Algorithm/Algorithm%20I/Starting-write-Algorithm-I-Note/">Algorithm I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Algorithm I</code> 的第七天第一個題目，總共有兩題。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 20 min</li>
<li><a href="https://leetcode.com/problems/flood-fill/">題目</a></li>
</ul>
<p>給你一個 <code>MxN Matrix</code> 還有一個指定的點位 (<code>sr</code>, <code>sc</code>) 從點位開始，相鄰的點位如果跟原點位同數字的話，就把相鄰的點位替換成目標數字。</p>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
    <pre>
<p><strong>限制:</strong></p>
<ul>
<li><code>m == image.length</code></li>
<li><code>n == image[i].length</code></li>
<li><code>1 &lt;= m, n &lt;= 50</code></li>
<li><code>0 &lt;= image[i][j], color &lt; 216</code></li>
<li><code>0 &lt;= sr &lt; m</code></li>
<li><code>0 &lt;= sc &lt; n</code></li>
</ul>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/06/01/flood1-grid.jpg" alt="example-1-jpg" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, color = 2</span><br><span class="line">Output: [[2,2,2],[2,2,0],[2,0,1]]</span><br><span class="line">Explanation: From the center of the image with position (sr, sc) = (1, 1) (i.e., the red pixel), all pixels connected by a path of the same color as the starting pixel (i.e., the blue pixels) are colored with the new color.</span><br><span class="line">Note the bottom corner is not colored 2, because it is not 4-directionally connected to the starting pixel.</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: image = [[0,0,0],[0,0,0]], sr = 0, sc = 0, color = 0</span><br><span class="line">Output: [[0,0,0],[0,0,0]]</span><br><span class="line">Explanation: The starting pixel is already colored 0, so no changes are made to the image.</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>圖型搜索法的練手題，基本沒難度，就是讓你練習怎麼去做搜尋的，這題的題意要用廣度或是深度優先搜尋都沒問題。</p>
<p>基本邏輯如下:</p>
<ol>
<li>看當前這格是不是跟起點一樣
<ul>
<li>是: 把這格換成目標數字，然後走下步</li>
<li>不是: 跳出</li>
</ul>
</li>
<li>把 sr, sc 分別加減等於四個方向的下一個目標，然後檢查他。</li>
</ol>
<p>這題有一個重點是，由於替換後的數字就不會等於原數字了，所以基本上題目已經<strong>強制避免讓你走到走過的地方</strong>，這在很多高級題目上是不會有的。</p>
<h2 id="js-dfs-recursive"><a class="markdownIt-Anchor" href="#js-dfs-recursive"></a> JS DFS Recursive</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[][]</span>&#125; <span class="variable">image</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">sr</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">sc</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">color</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">var</span> floodFill = <span class="keyword">function</span> (<span class="params">image, sr, sc, color</span>) &#123;</span><br><span class="line">    <span class="comment">// 錯誤處理</span></span><br><span class="line">    <span class="keyword">if</span> (image[sr][sc] === color) <span class="keyword">return</span> image;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 跑廣度優先</span></span><br><span class="line">    <span class="keyword">const</span> src = <span class="title function_">moveToNext</span>(image, sr, sc, color, image[sr][sc]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (src ? src : image);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[][]</span>&#125; <span class="variable">image</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">sr</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">sc</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">targetNum</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">startNum</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">moveToNext</span>(<span class="params">image, sr, sc, targetNum, startNum</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果這格不是原數字，就別再往下查了</span></span><br><span class="line">    <span class="keyword">if</span> (image[sr] === <span class="literal">undefined</span> || image[sr][sc] === <span class="literal">undefined</span> || image[sr][sc] != startNum) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//// 如果是，就替換，然後再查他四周</span></span><br><span class="line">    <span class="comment">// 替換</span></span><br><span class="line">    image[sr][sc] = targetNum;</span><br><span class="line">    <span class="comment">// 查他四周</span></span><br><span class="line">    <span class="title function_">moveToNext</span>(image, sr + <span class="number">1</span>, sc, targetNum, startNum);</span><br><span class="line">    <span class="title function_">moveToNext</span>(image, sr, sc + <span class="number">1</span>, targetNum, startNum);</span><br><span class="line">    <span class="title function_">moveToNext</span>(image, sr - <span class="number">1</span>, sc, targetNum, startNum);</span><br><span class="line">    <span class="title function_">moveToNext</span>(image, sr, sc - <span class="number">1</span>, targetNum, startNum);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> image;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="java-bfs-iterative"><a class="markdownIt-Anchor" href="#java-bfs-iterative"></a> Java BFS Iterative</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] floodFill(<span class="type">int</span>[][] image, <span class="type">int</span> sr, <span class="type">int</span> sc, <span class="type">int</span> color) &#123;</span><br><span class="line">        <span class="keyword">if</span>(image[sr][sc] == color) <span class="keyword">return</span> image;</span><br><span class="line">        </span><br><span class="line">        Queue&lt;<span class="type">int</span>[]&gt; searchQueue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;<span class="type">int</span>[]&gt;();</span><br><span class="line">        searchQueue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;sr, sc&#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">startNum</span> <span class="operator">=</span> image[sr][sc];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!searchQueue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span>[] nowNum = searchQueue.poll();</span><br><span class="line">            <span class="keyword">if</span> (image[nowNum[<span class="number">0</span>]][nowNum[<span class="number">1</span>]] != color) &#123;</span><br><span class="line">                <span class="comment">// 把當前值換成目標數字</span></span><br><span class="line">                image[nowNum[<span class="number">0</span>]][nowNum[<span class="number">1</span>]] = color;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 添加周圍的目標到 Queue 裡</span></span><br><span class="line">                <span class="keyword">if</span> (_validator(image, nowNum[<span class="number">0</span>] + <span class="number">1</span>, nowNum[<span class="number">1</span>], startNum)) searchQueue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;nowNum[<span class="number">0</span>] + <span class="number">1</span>, nowNum[<span class="number">1</span>]&#125;);</span><br><span class="line">                <span class="keyword">if</span> (_validator(image, nowNum[<span class="number">0</span>], nowNum[<span class="number">1</span>] + <span class="number">1</span>, startNum)) searchQueue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;nowNum[<span class="number">0</span>], nowNum[<span class="number">1</span>] + <span class="number">1</span>&#125;);</span><br><span class="line">                <span class="keyword">if</span> (_validator(image, nowNum[<span class="number">0</span>] - <span class="number">1</span>, nowNum[<span class="number">1</span>], startNum)) searchQueue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;nowNum[<span class="number">0</span>] - <span class="number">1</span>, nowNum[<span class="number">1</span>]&#125;);</span><br><span class="line">                <span class="keyword">if</span> (_validator(image, nowNum[<span class="number">0</span>], nowNum[<span class="number">1</span>] - <span class="number">1</span>, startNum)) searchQueue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;nowNum[<span class="number">0</span>], nowNum[<span class="number">1</span>] - <span class="number">1</span>&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 檢查下一格有沒有必要查</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">_validator</span><span class="params">(<span class="type">int</span>[][] arr, <span class="type">int</span> sr, <span class="type">int</span> sc, <span class="type">int</span> startNum)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sr &lt; <span class="number">0</span> || sc &lt; <span class="number">0</span> || <span class="comment">// 小於陣列</span></span><br><span class="line">            sr &gt;= arr.length || sc &gt;= arr[<span class="number">0</span>].length || <span class="comment">// 大於陣列</span></span><br><span class="line">           arr[sr][sc] != startNum <span class="comment">// 不是我們要查的目標</span></span><br><span class="line">           ) <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/DOohjYK.png" alt="" /></p>
<details style='display:none;'><summary>點我開啟舊寫法/失敗寫法</summary>
<pre>
<p></pre></details></p>
<!-- ##### 參考資料 -->]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Algorithm I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Array</tag>
        <tag>Iteration</tag>
        <tag>Matrix</tag>
        <tag>Recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]77. Combinations</title>
    <url>/2022/09/05/leetcode/Algorithm/Algorithm%20I/77-combinations/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/14/leetcode/Algorithm/Algorithm%20I/Starting-write-Algorithm-I-Note/">Algorithm I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Algorithm I</code> 的第十一天第一個題目，總共有三題。</p>
<ul>
<li>難度: <code>Medium</code></li>
<li>花費時間: 4 hr</li>
<li><a href="https://leetcode.com/problems/combinations/">題目</a></li>
</ul>
<p>給你兩個數字 <code>n</code> 與 <code>k</code> 。<br />
返回一個陣列，列出在 <code>1</code> 到 <code>n</code> 之間的所有不重複的 <code>k</code> 組數字。</p>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
    <pre>
<p><strong>限制:</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 20</code></li>
<li><code>1 &lt;= k &lt;= n</code></li>
</ul>
<p><strong>Example 1:</strong></p>
<!-- ![example-image-1](https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg) -->
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 4, k = 2</span><br><span class="line">Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]</span><br><span class="line">Explanation: There are 4 choose 2 = 6 total combinations.</span><br><span class="line">Note that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<!-- ![example-image-2](https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg) -->
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 1, k = 1</span><br><span class="line">Output: [[1]]</span><br><span class="line">Explanation: There is 1 choose 1 = 1 total combination.</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<details><summary>點我開啟思路</summary>
    <pre>
<p class="text-h2"> 思路 </p>
<p><mark><mark><mark><mark><mark><mark><mark><mark><mark><mark>以下全錯</mark></mark></mark></mark></mark></mark></mark></mark></mark></mark>==</p>
<p>這題是要訓練 <code>Backtracking</code> ，意思就是要一直不停的對我的答案陣列做檢查，沒有的話再塞入答案陣列。</p>
<p>k 一定會少於 n</p>
<p>雖然這題有說 ans can be any order ，但是我想到一點，不管我排出了怎麼樣的數字，全部都跑過一次 <code>sort()</code> ，這樣就不會有重複的問題。</p>
<p>建立一個 map ， k 為幾這個 map 就有幾個 key ，然後往 map 裡塞值，最後再放進答案</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4 1</span><br><span class="line"></span><br><span class="line">1 2 3 4</span><br><span class="line"></span><br><span class="line">4 3</span><br><span class="line"></span><br><span class="line">123 124 234</span><br><span class="line"></span><br><span class="line">4 2</span><br><span class="line"></span><br><span class="line">12 13 14 23 24 34</span><br><span class="line"></span><br><span class="line">5 2</span><br><span class="line"></span><br><span class="line">12 13 14 15 23 24 25 34 35 45</span><br><span class="line"></span><br><span class="line">7 3</span><br><span class="line"></span><br><span class="line">123 124 125 126 127 234 235 236 237 345 346 347 456 457 567</span><br></pre></td></tr></table></figure>
<p>透過上面的數字觀察，我發現，每個數字出現次數一定符合 <code>n - k + 1</code> 這個數字，除了當 k 是 1 的時候</p>
<p></pre></details></p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p><code>Backtracking</code> 回朔法</p>
<p>回朔法的關鍵是，先沿著一條路走到底，然後再回到上個節點重作</p>
<p>回朔法有以下幾個特色</p>
<ul>
<li>通常會寫成 DFS 的樣子</li>
</ul>
<p>回朔法的框架必須要有以下幾個條件</p>
<ul>
<li>選擇清單: 有什麼選擇的清單</li>
<li>選路: 選擇一個子層前往</li>
<li>返回: 回到父層</li>
<li>終止條件: 到達決策樹邊界，通常會接著 <code>return</code>(此題來說是 <code>k = 2</code> 時會到達決策樹邊界)</li>
</ul>
<p>以這題來說，每個節點等於選擇的數字，他的所有子節點等於可選擇的數字，於是我們可以設想出以下的選擇樹</p>
<p>假設 <code>n = 4</code>, <code>k = 2</code></p>
<ul>
<li><code>root node</code>
<ul>
<li>選擇清單: <code>1 ~ (n = 4)</code></li>
<li>選路: <code>[1, 2, 3, 4] =&gt; 1</code></li>
<li>當前組合: <code>[]</code></li>
<li>返回: 無，因為是 <code>root</code></li>
<li>終止條件: 不會觸發</li>
</ul>
</li>
<li><code>1</code>
<ul>
<li>選擇清單 <code>2 ~ 4</code></li>
<li>選路: <code>[2, 3, 4] =&gt; 2</code></li>
<li>當前組合: <code>[1]</code></li>
<li>返回: 當這個節點的選路全部被選完，則會觸發返回，撤銷選擇 <code>1</code> ，然後選擇 <code>2</code></li>
<li>終止條件: 不會觸發</li>
</ul>
</li>
<li><code>2</code>
<ul>
<li>當前組合: <code>[1, 2]</code></li>
<li>終止條件: 由於組合已經滿了，所以觸發這條路線的終止條件。</li>
</ul>
</li>
</ul>
<h2 id="程式"><a class="markdownIt-Anchor" href="#程式"></a> 程式</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">combine</span>(<span class="params">n: <span class="built_in">number</span>, k: <span class="built_in">number</span></span>): <span class="built_in">number</span>[][] &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">resultArr</span>: <span class="built_in">number</span>[][] = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 深度優先走訪每個節點</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">_dfs</span>(<span class="params">start: <span class="built_in">number</span>, currentResult: <span class="built_in">number</span>[] = []</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 終止條件</span></span><br><span class="line">    <span class="keyword">if</span> (currentResult.<span class="property">length</span> === k) &#123;</span><br><span class="line">      <span class="comment">// 把當前組合塞入答案陣列( resultArr )</span></span><br><span class="line">      resultArr.<span class="title function_">push</span>([...currentResult]);</span><br><span class="line">      <span class="comment">// 終止這條路線</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每 for 一次，會選擇一個不同的節點進入</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="comment">// 進入一個節點</span></span><br><span class="line">      currentResult.<span class="title function_">push</span>(i);</span><br><span class="line">      <span class="comment">// 遍歷這個節點的子節點</span></span><br><span class="line">      <span class="title function_">_dfs</span>(i + <span class="number">1</span>, currentResult);</span><br><span class="line">      <span class="comment">// 撤銷進入這個節點(返回上一層)</span></span><br><span class="line">      currentResult.<span class="title function_">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">_dfs</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> resultArr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/lLR8oZm.png" alt="score-image" /></p>
<details><summary>點我開啟舊寫法/失敗寫法</summary>
<pre>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">combine</span>(<span class="params">n: <span class="built_in">number</span>, k: <span class="built_in">number</span></span>): <span class="built_in">number</span>[][] &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">ansArr</span>: <span class="built_in">number</span>[][] = [];</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">ansStrArr</span>: <span class="built_in">string</span>[] = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果只求一位，那麼就把答案塞一塞之後就可以回傳了</span></span><br><span class="line">    <span class="keyword">if</span> (k === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            ansArr.<span class="title function_">push</span>([i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ansArr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 算每個數字會在答案中出現多少次的算式，通過觀察規律可以得到這個算式</span></span><br><span class="line">    <span class="keyword">let</span> m = n - k + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 宣告 Map: key = 1 ~ n 的所有數字都有, val = 這個數字的存貨(就是上面算出來的 m )</span></span><br><span class="line">    <span class="keyword">const</span> ansNumMap = <span class="keyword">new</span> <span class="title class_">Map</span>&lt;<span class="built_in">number</span>, <span class="built_in">number</span>&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        ansNumMap.<span class="title function_">set</span>(i, m);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> ansArrIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ansArrIndex) &#123;</span><br><span class="line">        ansArr[ansArrIndex] = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="comment">// 如果 ansNumMap 裡還有值</span></span><br><span class="line">            <span class="keyword">if</span> (ansNumMap.<span class="title function_">get</span>(i)) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 檢查他有沒有在現在這個組合中 &amp;&amp; 他還有沒有存貨在 map 裡</span></span><br><span class="line">                <span class="keyword">if</span> (ansArr[ansArrIndex].<span class="title function_">indexOf</span>(i) === -<span class="number">1</span> &amp;&amp; ansNumMap.<span class="title function_">get</span>(i)! &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 把他塞到答案的這個組合中</span></span><br><span class="line">                    ansArr[ansArrIndex].<span class="title function_">push</span>(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果已經塞滿了，就做重複檢查</span></span><br><span class="line">            <span class="keyword">if</span> (ansArr[ansArrIndex].<span class="property">length</span> === k) &#123;</span><br><span class="line">                <span class="comment">// 如果已經有這個組合了，就把他刪掉，然後重來</span></span><br><span class="line">                <span class="keyword">if</span> (ansStrArr.<span class="title function_">indexOf</span>(ansArr[ansArrIndex].<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    ansArr[ansArrIndex] = [];</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 塞一個進去，就要減少一個存貨</span></span><br><span class="line">                ansNumMap.<span class="title function_">set</span>(i, ansNumMap.<span class="title function_">get</span>(i)! - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果沒有存貨了，就把這個 key 刪掉</span></span><br><span class="line">                <span class="keyword">if</span> (ansNumMap.<span class="title function_">get</span>(i) === <span class="number">0</span>) ansNumMap.<span class="title function_">delete</span>(i);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果沒有，就把組合加進 ansStrArr 然後跳過這個迴圈</span></span><br><span class="line">                ansStrArr.<span class="title function_">push</span>(ansArr[ansArrIndex].<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 塞一個進去，就要減少一個存貨</span></span><br><span class="line">            ansNumMap.<span class="title function_">set</span>(i, ansNumMap.<span class="title function_">get</span>(i)! - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果沒有存貨了，就把這個 key 刪掉</span></span><br><span class="line">            <span class="keyword">if</span> (ansNumMap.<span class="title function_">get</span>(i) === <span class="number">0</span>) ansNumMap.<span class="title function_">delete</span>(i);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果 Map 裡都空了，代表全部找完了，就回傳答案。</span></span><br><span class="line">        <span class="keyword">if</span> (ansNumMap.<span class="property">size</span> === <span class="number">0</span>) <span class="keyword">return</span> ansArr;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ansNumMap.<span class="property">size</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ansArr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把答案陣列往後推一位</span></span><br><span class="line">        ansArrIndex++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<h5 id="參考資料"><a class="markdownIt-Anchor" href="#參考資料"></a> 參考資料</h5>
<ul>
<li><a href="https://haogroot.com/2020/09/21/backtracking-leetcode/">Backtracking 回溯法 – 陪你刷題</a></li>
<li><a href="https://leetcode.com/problems/combinations/discuss/794032/PythonJSGo-by-DFS-%2B-backtracking-w-Hint">discuss</a></li>
</ul>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Algorithm I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Backtracking</tag>
        <tag>Recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]784. Letter Case Permutation</title>
    <url>/2022/09/14/leetcode/Algorithm/Algorithm%20I/784-letter-case-permutation/</url>
    <content><![CDATA[<p><a href="/2022/06/14/leetcode/Algorithm/Algorithm%20I/Starting-write-Algorithm-I-Note/#09-x2F-05-Day-11-Recursion-x2F-Backtracking">Algorithm I 筆記撰寫計畫</a> 第十一天第三題，總共有三題。</p>
<ul>
<li>難度: <code>Medium</code></li>
<li>花費時間: <code>2 hr</code></li>
<li>題目: <a href="https://leetcode.com/problems/letter-case-permutation/">784. Letter Case Permutation</a></li>
</ul>
<p>給你一個字串 <code>s</code> 回傳 <code>s</code> 裡所有字母都有大寫跟小寫兩種寫法的話，會有幾種可能的字串，把全部字串放在一個陣列裡回傳。</p>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
<p><strong>限制:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 12</code></li>
<li><code>s</code> consists of lowercase English letters, uppercase English letters, and digits.</li>
</ul>
<p><strong>Example 1:</strong></p>
<!-- ![example-image-1](https://assets.leetcode.com/uploads/2021/04/24/01-1-grid.jpg) -->
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;a1b2&quot;</span><br><span class="line">Output: [&quot;a1b2&quot;,&quot;a1B2&quot;,&quot;A1b2&quot;,&quot;A1B2&quot;]</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<!-- ![example-image-2](https://assets.leetcode.com/uploads/2021/04/24/01-2-grid.jpg) -->
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;3z4&quot;</span><br><span class="line">Output: [&quot;3z4&quot;,&quot;3Z4&quot;]</span><br></pre></td></tr></table></figure>
</details>
<details><summary>點我開啟思路</summary>
<p class="text-h2"> 思路 </p>
<p>建立一個 index i = 0<br />
建立一個 s 的 陣列 = sArr</p>
<ol>
<li>
<p>終止條件<br />
若 i == sArr.length  回傳當前的 sArr</p>
</li>
<li>
<p>檢查 sArr[i]</p>
<ol>
<li>若是數字 直接遞迴 i + 1</li>
<li>若是字母<br />
遞迴 sArr[i] 大寫跟小寫各一次</li>
</ol>
</li>
</ol>
</details>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>雖然這題被放在 <code>Backtracking</code> 裡，但我沒有什麼感覺，這題我選擇用 <code>DFS</code> 來作答。</p>
<p>遍歷字串，只會遇到兩種狀況</p>
<ol>
<li>遇到數字</li>
<li>遇到字母</li>
</ol>
<p>當我們遇到數字時，就直接再更深入一層(檢查下一個字元)。<br />
當我們遇到字母時，就把那個字母分別轉為大寫跟小寫，然後分別更深入一層。</p>
<p>最後我們拿滿 <code>s</code> 大小時，就把答案傳出來。</p>
<h2 id="程式"><a class="markdownIt-Anchor" href="#程式"></a> 程式</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">letterCasePermutation</span>(<span class="params">s: <span class="built_in">string</span></span>): <span class="built_in">string</span>[] &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">answerArr</span>: <span class="built_in">string</span>[] = [];</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">permute</span>(<span class="params">sArr: <span class="built_in">string</span>[], i = <span class="number">0</span></span>) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * accept case</span></span><br><span class="line"><span class="comment">     * when i equal sArr.length, that mean we get a non-repetitive answer case</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (i === sArr.<span class="property">length</span>) &#123;</span><br><span class="line">      answerArr.<span class="title function_">push</span>(sArr.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/[a-zA-Z]/</span>.<span class="title function_">test</span>(sArr[i])) &#123;</span><br><span class="line">      <span class="title function_">permute</span>([...sArr.<span class="title function_">slice</span>(<span class="number">0</span>, i), sArr[i].<span class="title function_">toLowerCase</span>(), ...sArr.<span class="title function_">slice</span>(i + <span class="number">1</span>)], i + <span class="number">1</span>);</span><br><span class="line">      <span class="title function_">permute</span>([...sArr.<span class="title function_">slice</span>(<span class="number">0</span>, i), sArr[i].<span class="title function_">toUpperCase</span>(), ...sArr.<span class="title function_">slice</span>(i + <span class="number">1</span>)], i + <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">permute</span>(sArr, i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">permute</span>(s.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> answerArr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/mK38LEf.png" alt="score-image" />;</p>
<!-- ##### 參考資料

+ [discuss](https://leetcode.com/problems/01-matrix/discuss/1369741/C%2B%2BJavaPython-BFS-DP-solutions-with-Picture-Clean-and-Concise-O(1)-Space) -->]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Algorithm I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Depth-First Search</tag>
        <tag>Backtracking</tag>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]876. Middle of the Linked List</title>
    <url>/2022/06/24/leetcode/Algorithm/Algorithm%20I/876-middle-of-the-linked-list/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/14/leetcode/Algorithm/Algorithm%20I/Starting-write-Algorithm-I-Note/">Algorithm I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Algorithm I</code> 第五天第一個題目，總共有兩題。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 30min</li>
<li><a href="https://leetcode.com/problems/middle-of-the-linked-list/">題目</a></li>
</ul>
<p>給你一個 linked list 的 head ，回傳 linked list 正中央的 node ，如果 linked list 是偶數的話，就回傳中間第二個值。</p>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
<pre>
<p><strong>限制:</strong></p>
<ul>
<li>The number of nodes in the list is in the range <code>[1, 100]</code>.</li>
<li><code>1 &lt;= Node.val &lt;= 100</code></li>
</ul>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/07/23/lc-midlist1.jpg" alt="" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: head = [1,2,3,4,5]</span><br><span class="line">Output: [3,4,5]</span><br><span class="line">Explanation: The middle node of the list is node 3.</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/07/23/lc-midlist2.jpg" alt="" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: head = [1,2,3,4,5,6]</span><br><span class="line">Output: [4,5,6]</span><br><span class="line">Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>這道題稍微看一下題目就看的出來，是為了 Two Pointer 特別設計的，一個 Pointer 一次走一步，另一個一次兩步，等另一個走到 List 最後，再回傳第一個就好。</p>
<p>作法如下:</p>
<ul>
<li>mainPointer: 一次兩步，直到撞到最後</li>
<li>delayPointer: 一次一步， mainPointer 撞到最後，就回傳值。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> middleNode = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> mainPointer = head;</span><br><span class="line">    <span class="keyword">let</span> delayPointer = head;</span><br><span class="line">    <span class="keyword">while</span> (mainPointer) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mainPointer.<span class="property">next</span>) <span class="keyword">break</span>;</span><br><span class="line">        delayPointer = delayPointer.<span class="property">next</span>;</span><br><span class="line">        <span class="keyword">if</span> (!mainPointer.<span class="property">next</span>.<span class="property">next</span>) <span class="keyword">break</span>;</span><br><span class="line">        mainPointer = mainPointer.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> delayPointer;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/hTDGIxR.png" alt="" /></p>
<details style='display:none;'><summary>點我開啟舊寫法/失敗寫法</summary>
<pre>
<p></pre></details></p>
<!-- ##### 參考資料 -->]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Algorithm I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Two Pointers</tag>
        <tag>Algorithm</tag>
        <tag>linked list</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]977. Squares of a Sorted Array</title>
    <url>/2022/06/14/leetcode/Algorithm/Algorithm%20I/977-squares-of-a-sorted-array/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/14/leetcode/Algorithm/Algorithm%20I/Starting-write-Algorithm-I-Note/">Algorithm I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Algorithm I</code> 的第二天第一個題目，總共有兩題。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 1hr</li>
<li><a href="https://leetcode.com/problems/squares-of-a-sorted-array/">題目</a></li>
</ul>
<p>傳入一個陣列(array)，把陣列裡的所有數字開平方，然後排序平方完的陣列，之後回傳排序完的陣列。</p>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
<pre>
<p><strong>限制:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 104</code></li>
<li><code>-104 &lt;= nums[i] &lt;= 104</code></li>
<li><code>nums</code> is sorted in <strong>non-decreasing</strong> order.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [-4,-1,0,3,10]</span><br><span class="line">Output: [0,1,9,16,100]</span><br><span class="line">Explanation: After squaring, the array becomes [16,1,0,9,100].</span><br><span class="line">After sorting, it becomes [0,1,9,16,100].</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [-7,-3,2,3,11]</span><br><span class="line">Output: [4,9,9,49,121]</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<h4 id="第一種作法-js-內建函式"><a class="markdownIt-Anchor" href="#第一種作法-js-內建函式"></a> 第一種作法: JS 內建函式</h4>
<p>這作法算是有點作弊，使用到了兩個 JS 內建函式，分別是:</p>
<ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map">Array.prototype.map()</a>: 負責把陣列裡的值平方後傳出。</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">Array.prototype.sort()</a>: 負責排序平方完的陣列。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">var</span> sortedSquares = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    nums = nums.<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x * x).<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span> a - b);</span><br><span class="line">   <span class="keyword">return</span> nums;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<!-- TODO -->
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p>JS 內建函式<br />
<img src="https://i.imgur.com/jDEy8nv.png" alt="" /></p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Algorithm I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Two Pointers</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]994. Rotting Oranges</title>
    <url>/2022/09/07/leetcode/Algorithm/Algorithm%20I/994-rotting-oranges/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/14/leetcode/Algorithm/Algorithm%20I/Starting-write-Algorithm-I-Note/">Algorithm I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Algorithm I</code> 的第九天第二個題目，總共有兩題。</p>
<ul>
<li>難度: <code>Medium</code></li>
<li>花費時間: 2 hr</li>
<li><a href="https://leetcode.com/problems/rotting-oranges/">題目</a></li>
</ul>
<p>給你一個 <code>MxN Matrix</code> <code>grid</code> ，裡面包含了空盒子，新鮮的橘子，腐爛的橘子。</p>
<p>若每過一天每個腐爛的橘子都會腐爛他上下左右的新鮮橘子，<br />
則至少要過幾天所有的橘子才會被腐爛。</p>
<span id="more"></span>
<ul>
<li>0: 空盒子</li>
<li>1: 新鮮的橘子</li>
<li>2: 腐爛的橘子</li>
</ul>
<p>橘子只能透過橘子傳遞腐爛，空盒子是不行的。</p>
<p>如果有橘子腐爛不到，那麼回傳 <code>-1</code> 代表永遠不會腐爛。</p>
<p>回傳最少需要幾天才會腐爛完成。</p>
<details><summary>點我開啟限制與範例</summary>
<p><strong>限制:</strong></p>
<ul>
<li><code>m == grid.length</code></li>
<li><code>n == grid[i].length</code></li>
<li><code>1 &lt;= m, n &lt;= 10</code></li>
<li><code>grid[i][j]</code> is <code>0</code>, <code>1</code>, or <code>2</code>.</li>
</ul>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2019/02/16/oranges.png" alt="example-image-1" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: grid = [[2,1,1],[1,1,0],[0,1,1]]</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<!-- ![example-image-2](https://assets.leetcode.com/uploads/2021/04/24/01-2-grid.jpg) -->
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: grid = [[2,1,1],[0,1,1],[1,0,1]]</span><br><span class="line">Output: -1</span><br><span class="line">Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: grid = [[0,2]]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.</span><br></pre></td></tr></table></figure>
</details>
<details><summary>點我開啟思路</summary>
<p class="text-h2"> 思路 </p>
<p><mark><mark><mark><mark><mark>bfs 解法</mark></mark></mark></mark></mark></p>
<ol>
<li>遍歷陣列
<ul>
<li>把 1 改成 -1</li>
<li>把 2 改成 -2</li>
</ul>
</li>
<li>遍歷陣列
<ul>
<li>遇到 -2 就進入 bfs 函式</li>
</ul>
</li>
<li>遍歷陣列
<ul>
<li>如果還有 -1 就回傳 false</li>
<li>回傳最大值</li>
</ul>
</li>
</ol>
<p>bfs 函式</p>
<ol>
<li>bfs 找上下左右</li>
<li>如果是 -2 就直接改現在的大小</li>
<li>如果不是 -2 就比大小，取最小的
<ol>
<li>假設最小的是他現在的值，就不繼續往下找</li>
<li>假設最小的是 root 現在走到的值，就繼續找</li>
</ol>
</li>
</ol>
</details>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<h3 id="bfs-更新走的步數到-matrix-裡"><a class="markdownIt-Anchor" href="#bfs-更新走的步數到-matrix-裡"></a> BFS 更新走的步數到 <code>Matrix</code> 裡</h3>
<ul>
<li>對每個腐爛的橘子做 BFS ，從腐爛的那顆開始往外擴散，每走完一圈都把腐爛到的橘子記上腐爛的輪數。</li>
<li>遍歷陣列
<ul>
<li>找到 <code>Matrix</code> 裡腐爛輪數最大的橘子，回傳輪數</li>
<li>或是找到還沒腐爛的，回傳 -1 代表沒有腐爛完全</li>
</ul>
</li>
</ul>
<p>範例</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 傳入值</span></span><br><span class="line">[[<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">,[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">,[<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">,[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 開始前把 2 換成 -2 ， 1 換成 -1 ，避免影響計算。</span></span><br><span class="line">[[-<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">1</span>]</span><br><span class="line">,[-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">,[-<span class="number">2</span>,-<span class="number">1</span>, <span class="number">0</span>,-<span class="number">1</span>,-<span class="number">1</span>]</span><br><span class="line">,[-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>, <span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 從第一顆橘子開始汙染，所有被汙染到的橘子都會填上被汙染的回合數 (第一顆橘子本身已經被汙染了，所以是0)</span></span><br><span class="line">[[ <span class="number">0</span>, <span class="number">1</span>,-<span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">,[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">0</span>]</span><br><span class="line">,[-<span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">,[ <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 從第二顆橘子開始汙染，</span></span><br><span class="line"><span class="comment">// 現在要開始比大小，如果他比較小，代表他的污染速度比第一顆橘子汙染的還快，所以他會先汙染到，</span></span><br><span class="line"><span class="comment">// 如果他比較大，代表他會比較較晚才汙染到，所以就不繼續汙染下去了</span></span><br><span class="line">[[ <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">,[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>]</span><br><span class="line">,[-<span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>]</span><br><span class="line">,[ <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 從第三顆橘子開始汙染，</span></span><br><span class="line"><span class="comment">// 繼續比大小</span></span><br><span class="line">[[ <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">,[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>]</span><br><span class="line">,[ <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>]</span><br><span class="line">,[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最後沒有可以汙染的橘子了，開始計算最大步數，同時檢查有沒有還沒被汙染到的橘子。</span></span><br><span class="line">[[ <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">,[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>]</span><br><span class="line">,[ <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>]</span><br><span class="line">,[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">0</span>]]</span><br></pre></td></tr></table></figure>
<p>TypeScript 實做:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">orangesRotting</span>(<span class="params">grid: <span class="built_in">number</span>[][]</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="comment">// key is row, val is Array of col in this row.</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">visitedMap</span>: <span class="title class_">Map</span>&lt;<span class="built_in">number</span>, <span class="built_in">number</span>[]&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">chkVisited</span>(<span class="params">row: <span class="built_in">number</span>, col: <span class="built_in">number</span></span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="comment">// chk if has val than return visited.</span></span><br><span class="line">    <span class="keyword">if</span> (visitedMap.<span class="title function_">get</span>(row) &amp;&amp; visitedMap.<span class="title function_">get</span>(row)?.<span class="title function_">indexOf</span>(col) != -<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//add this cell into visitedMap.</span></span><br><span class="line">    <span class="keyword">if</span> (visitedMap.<span class="title function_">has</span>(row)) &#123;</span><br><span class="line">      visitedMap.<span class="title function_">get</span>(row)?.<span class="title function_">push</span>(col);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      visitedMap.<span class="title function_">set</span>(row, [col]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">eatting</span>(<span class="params">row: <span class="built_in">number</span>, col: <span class="built_in">number</span>, preEatArr: <span class="built_in">number</span>[][] = [[row, col, <span class="number">0</span>]]</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">// validate</span></span><br><span class="line">    <span class="keyword">if</span> ((grid[row] &amp;&amp; grid[row][col]) &amp;&amp; <span class="comment">// legal and not 0</span></span><br><span class="line">      grid[row][col] != -<span class="number">2</span> &amp;&amp; <span class="comment">// not rottened</span></span><br><span class="line">      <span class="comment">// is fresh or previous path count is bigger than now road</span></span><br><span class="line">      (grid[row][col] === -<span class="number">1</span> || grid[row][col] &gt; preEatArr[<span class="number">0</span>][<span class="number">2</span>]) &amp;&amp;</span><br><span class="line">      !<span class="title function_">chkVisited</span>(row, col) <span class="comment">// never visite</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="comment">// change path count</span></span><br><span class="line">      grid[row][col] = preEatArr[<span class="number">0</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">      <span class="comment">// push preEatCell into path list</span></span><br><span class="line">      preEatArr.<span class="title function_">push</span>([row - <span class="number">1</span>, col, preEatArr[<span class="number">0</span>][<span class="number">2</span>] + <span class="number">1</span>]);</span><br><span class="line">      preEatArr.<span class="title function_">push</span>([row, col + <span class="number">1</span>, preEatArr[<span class="number">0</span>][<span class="number">2</span>] + <span class="number">1</span>]);</span><br><span class="line">      preEatArr.<span class="title function_">push</span>([row + <span class="number">1</span>, col, preEatArr[<span class="number">0</span>][<span class="number">2</span>] + <span class="number">1</span>]);</span><br><span class="line">      preEatArr.<span class="title function_">push</span>([row, col - <span class="number">1</span>, preEatArr[<span class="number">0</span>][<span class="number">2</span>] + <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// take this cell out </span></span><br><span class="line">      preEatArr.<span class="title function_">shift</span>();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (preEatArr.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// find path</span></span><br><span class="line">        <span class="title function_">eatting</span>(preEatArr[<span class="number">0</span>][<span class="number">0</span>], preEatArr[<span class="number">0</span>][<span class="number">1</span>], preEatArr);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// take this cell out, close this path</span></span><br><span class="line">    preEatArr.<span class="title function_">shift</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// iterate first time to reset cell num</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> row = <span class="number">0</span>; row &lt; grid.<span class="property">length</span>; row++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> col = <span class="number">0</span>; col &lt; grid[<span class="number">0</span>].<span class="property">length</span>; col++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (grid[row][col] === <span class="number">1</span>) grid[row][col] = -<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> (grid[row][col] === <span class="number">2</span>) grid[row][col] = -<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// iterate second time to do bfs</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> row = <span class="number">0</span>; row &lt; grid.<span class="property">length</span>; row++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> col = <span class="number">0</span>; col &lt; grid[<span class="number">0</span>].<span class="property">length</span>; col++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (grid[row][col] === -<span class="number">2</span>) &#123;</span><br><span class="line">        grid[row][col] = <span class="number">1</span></span><br><span class="line">        visitedMap = <span class="keyword">new</span> <span class="title class_">Map</span>;</span><br><span class="line">        <span class="title function_">eatting</span>(row, col);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// iterate third time to take big path</span></span><br><span class="line">  <span class="keyword">let</span> bigPath = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> row = <span class="number">0</span>; row &lt; grid.<span class="property">length</span>; row++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> col = <span class="number">0</span>; col &lt; grid[<span class="number">0</span>].<span class="property">length</span>; col++) &#123;</span><br><span class="line">      <span class="comment">// if have fresh orange return -1</span></span><br><span class="line">      <span class="keyword">if</span> (grid[row][col] === -<span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// compare for the biggest num</span></span><br><span class="line">      bigPath = <span class="title class_">Math</span>.<span class="title function_">max</span>(bigPath, grid[row][col]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> bigPath;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/KYXTmMZ.png" alt="score-image" /></p>
<!-- ##### 參考資料 -->
<!-- + [discuss](https://leetcode.com/problems/01-matrix/discuss/1369741/C%2B%2BJavaPython-BFS-DP-solutions-with-Picture-Clean-and-Concise-O(1)-Space) -->
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Algorithm I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Breadth-First Search</tag>
        <tag>Array</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode] Algorithm I 筆記撰寫計畫</title>
    <url>/2022/06/14/leetcode/Algorithm/Algorithm%20I/Starting-write-Algorithm-I-Note/</url>
    <content><![CDATA[<blockquote>
<p>計畫: <a href="https://leetcode.com/study-plan/algorithm/">Algorithm I</a></p>
</blockquote>
<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2>
<p>演算法（algorithm），在數學（算學）和電腦科學之中，為任何良定義的具體計算步驟的一個序列，常用於計算、資料處理和自動推理。精確而言，演算法是一個表示爲有限長，列表的有效方法。演算法應包含清晰定義的指令，用於計算函式。</p>
<span id="more"></span>
<p>事情是這樣的，我剛完成 <code>Data Structure I 筆記撰寫計畫</code> 裡的 <a href="/2022/05/30/leetcode/Data%20Structure/Data%20Structure%20I/starting-write-data-structure-i-note/#06-x2F-13-%E7%AC%AC%E4%B8%83%E5%A4%A9">Day7: Linked List</a> ，但重新整理清單之後，我的題目就被重置了，<br />
原來是 LeetCode 強制規定這些計畫必須要在計劃時間內全部做完，不然就要重做，<br />
我剛好在最後一天做完一半的題目，所以接下來的題目要再等七天才能做了，所以我就來換做 <a href="https://leetcode.com/study-plan/algorithm/?progress=gxelya3">演算法</a> ~</p>
<p>規則大致相同:</p>
<ul>
<li>跟著進度每天做答，並記錄在這個 Blog 上。</li>
<li>如果半小時內沒有頭緒，就參考評論區的解法，力求半小時內解完一題！</li>
</ul>
<hr />
<h2 id="0613-day-1-binary-search"><a class="markdownIt-Anchor" href="#0613-day-1-binary-search"></a> 06/13 Day 1: Binary Search</h2>
<ul>
<li>704. Binary Search <code>Easy</code> <a href="https://leetcode.com/problems/binary-search/">題目</a> <a href="/2022/06/13/leetcode/Algorithm/Algorithm%20I/704-binary-search/">筆記</a></li>
<li>278. First Bad Version <code>Easy</code> <a href="https://leetcode.com/problems/first-bad-version/">題目</a> <a href="https:/linyejoe2.github.io/2022/06/13/leetcode/Algorithm/Algorithm%20I/278-first-bad-version/">筆記</a></li>
<li>35. Search Insert Position <code>Easy</code> <a href="https://leetcode.com/problems/search-insert-position/">題目</a> <a href="/2022/06/13/leetcode/Algorithm/Algorithm%20I/35-search-lnsert-position/">筆記</a></li>
</ul>
<p>今天學了 Binary Search ，三題做完有由不懂到懂的感覺，所以你也可以發現我的成績是慢慢成長的，第二題小卡關，所以最後有參考評論區，整體來說有學到東西，非常好學習~</p>
<hr />
<h2 id="0614-day-2-two-pointers"><a class="markdownIt-Anchor" href="#0614-day-2-two-pointers"></a> 06/14 Day 2 Two Pointers</h2>
<ul>
<li>977. Squares of a Sorted Array <code>Easy</code> <a href="https://leetcode.com/problems/squares-of-a-sorted-array/">題目</a> <a href="/2022/06/14/leetcode/Algorithm/Algorithm%20I/977-squares-of-a-sorted-array/">筆記</a></li>
<li>189. Rotate Array <code>Medium</code> <a href="https://leetcode.com/problems/rotate-array/">題目</a> <a href="/2022/06/14/leetcode/Algorithm/Algorithm%20I/189-rotate-array/">筆記</a></li>
</ul>
<p>今天雖然題目是 Two Pointers ，但是使用的解法完全沒有學到 Two Pointers 呢，之後再補上吧~</p>
<hr />
<h2 id="0615-day-3-two-pointers"><a class="markdownIt-Anchor" href="#0615-day-3-two-pointers"></a> 06/15 Day 3 Two Pointers</h2>
<ul>
<li>283. Move Zeroes <code>Easy</code> <a href="https://leetcode.com/problems/move-zeroes/">題目</a> <a href="/2022/06/15/leetcode/Algorithm/Algorithm%20I/283-move-zeroes/">筆記</a></li>
<li>167. Two Sum II - Input Array Is Sorted <code>Medium</code> <a href="https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/">題目</a> <a href="/2022/06/15/leetcode/Algorithm/Algorithm%20I/167-two-sum-ii-input-array-is-sorted/">筆記</a></li>
</ul>
<p>第一題 283. Move Zeroes 自己只想出了內建函式的快速寫法，想不到怎麼用 Two Pointers 寫，於是參考了下評論區，雖然寫出來了，不過思路果然很難猜到，再努力吧~</p>
<p>第二題 167. Two Sum II<br />
有想過兩種做法</p>
<ol>
<li>兩個指針分別從頭跟尾開始遍歷</li>
<li>先找到中間，然後從中間開始往頭尾遍歷<br />
但是最後都沒寫出來，快升天了，最後參考了一下評論區的做法，的確是從頭尾開始，但是一次只動一個指針，運用的是題目<strong>兩個數字加起來等於答案，且第一個數字一定小於第二個數字</strong>的特性。</li>
</ol>
<hr />
<h2 id="0616-day-4-two-pointers"><a class="markdownIt-Anchor" href="#0616-day-4-two-pointers"></a> 06/16 Day 4 Two Pointers</h2>
<ul>
<li>344. Reverse String <code>Easy</code> <a href="https://leetcode.com/problems/reverse-string/">題目</a> <a href="/2022/06/16/leetcode/Algorithm/Algorithm%20I/344-reverse-string/">筆記</a></li>
<li>557. Reverse Words in a String III <code>Easy</code> <a href="https://leetcode.com/problems/reverse-words-in-a-string-iii/">題目</a> <a href="/2022/06/16/leetcode/Algorithm/Algorithm%20I/557-reverse-words-in-a-string-iii/">筆記</a></li>
</ul>
<p>這次的筆記 06/16 就寫好了，但拖到 06/24 才上線，假日去參加了 <a href="https://www.facebook.com/TWKusoGameJam/">kuso game jam 2022</a> ，最後做出來的 game 果然也很糞，還有隊友喝太多一直狂吐，在這邊 shout out to 我兄弟大狗。</p>
<hr />
<h2 id="0624-day-5-two-pointers"><a class="markdownIt-Anchor" href="#0624-day-5-two-pointers"></a> 06/24 Day 5 Two Pointers</h2>
<ul>
<li>876. Middle of the Linked List <code>Easy</code> <a href="https://leetcode.com/problems/middle-of-the-linked-list/">題目</a> <a href="/2022/06/24/leetcode/Algorithm/Algorithm%20I/876-middle-of-the-linked-list/">筆記</a></li>
<li>19. Remove Nth Node From End of List <code>Medium</code> <a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/">題目</a> <a href="/2022/06/24/leetcode/Algorithm/Algorithm%20I/19-remove-nth-node-from-end-of-list/">筆記</a></li>
</ul>
<p>今天是 Two Pointers 最後一天，今天的題目反而我覺得比較簡單，可能是因為 Linked List 的結構非常好懂吧~<br />
對 Linked List 有一點認識的人可以先看第二題，看不懂再去看第一題。</p>
<hr />
<h2 id="0815-day-6-sliding-window"><a class="markdownIt-Anchor" href="#0815-day-6-sliding-window"></a> 08/15 Day 6 Sliding Window</h2>
<ul>
<li>3. Longest Substring Without Repeating Characters <code>Medium</code> <a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/">題目</a> <a href="/2022/08/15/leetcode/Algorithm/Algorithm%20I/3-longest-substring-without-repeating/">筆記</a></li>
<li>567. Permutation in String <code>Medium</code> <a href="https://leetcode.com/problems/permutation-in-string/">題目</a> <a href="/2022/08/15/leetcode/Algorithm/Algorithm%20I/567-permutation-in-string/">筆記</a></li>
</ul>
<hr />
<h2 id="0829-day-7-breadth-first-search-depth-first-search"><a class="markdownIt-Anchor" href="#0829-day-7-breadth-first-search-depth-first-search"></a> 08/29 Day 7 Breadth-First Search / Depth-First Search</h2>
<ul>
<li>733. Flood Fill <code>Easy</code> <a href="https://leetcode.com/problems/flood-fill/">題目</a> <a href="/2022/08/29/leetcode/Algorithm/Algorithm%20I/733-flood-fill/">筆記</a></li>
<li>695. Max Area of Island <code>Medium</code> <a href="https://leetcode.com/problems/max-area-of-island/">題目</a> <a href="/2022/08/29/leetcode/Algorithm/Algorithm%20I/695-max-area-of-island/">筆記</a></li>
</ul>
<hr />
<h2 id="0830-day-8-breadth-first-search-depth-first-search"><a class="markdownIt-Anchor" href="#0830-day-8-breadth-first-search-depth-first-search"></a> 08/30 Day 8 Breadth-First Search / Depth-First Search</h2>
<ul>
<li>617. Merge Two Binary Trees <code>Easy</code> <a href="https://leetcode.com/problems/merge-two-binary-trees/">題目</a> <a href="/2022/08/30/leetcode/Algorithm/Algorithm%20I/617-merge-two-binary-trees/">筆記</a></li>
<li>116. Populating Next Right Pointers in Each Node <code>Easy</code> <a href="https://leetcode.com/problems/populating-next-right-pointers-in-each-node/">題目</a> <a href="/2022/08/30/leetcode/Algorithm/Algorithm%20I/116-populating-next-right-pointers-in-each-node/">筆記</a></li>
</ul>
<hr />
<h2 id="0905-day-9-breadth-first-search-depth-first-search"><a class="markdownIt-Anchor" href="#0905-day-9-breadth-first-search-depth-first-search"></a> 09/05 Day 9 Breadth-First Search / Depth-First Search</h2>
<ul>
<li>542. 01 Matrix <code>Medium</code> <a href="https://leetcode.com/problems/01-matrix/">題目</a> <a href="/2022/09/07/leetcode/Algorithm/Algorithm%20I/542-01-matrix/">筆記</a></li>
<li>994. Potting Oranges <code>Medium</code> <a href="https://leetcode.com/problems/rotting-oranges">題目</a> <a href="http://localhost:4000/2022/09/07/leetcode/Algorithm/Algorithm%20I/994-rotting-oranges/">筆記</a></li>
</ul>
<hr />
<h2 id="0901-day-10-recursion-backtracking"><a class="markdownIt-Anchor" href="#0901-day-10-recursion-backtracking"></a> 09/01 Day 10 Recursion / Backtracking</h2>
<ul>
<li>21. Merge Two Sorted Lists <code>Easy</code> <a href="https://leetcode.com/problems/merge-two-sorted-lists/">題目</a> <a href="/2022/06/10/leetcode/Data%20Structure/Data%20Structure%20I/21-merge-two-sorted-lists/">筆記</a></li>
<li>206. Reverse Linked List <code>Easy</code> <a href="https://leetcode.com/problems/reverse-linked-list/">題目</a> <a href="/2022/09/01/leetcode/Algorithm/Algorithm%20I/206-reverse-linked-list/">筆記</a></li>
</ul>
<p>第一題之前在 <a href="/2022/05/30/leetcode/Data%20Structure/Data%20Structure%20I/starting-write-data-structure-i-note/#06-x2F-13-%E7%AC%AC%E4%B8%83%E5%A4%A9">Data Structure I</a> 也有做到，這次就來補充其他寫法。</p>
<hr />
<h2 id="0905-day-11-recursion-backtracking"><a class="markdownIt-Anchor" href="#0905-day-11-recursion-backtracking"></a> 09/05 Day 11 Recursion / Backtracking</h2>
<ul>
<li>77. Combinations <code>Medium</code> <a href="https://leetcode.com/problems/combinations/">題目</a> <a href="/2022/09/05/leetcode/Algorithm/Algorithm%20I/77-combinations/">筆記</a></li>
<li>46. Permutations <code>Medium</code> <a href="https://leetcode.com/problems/permutations/">題目</a> <a href="/2022/09/13/leetcode/Algorithm/Algorithm%20I/46-permutations/">筆記</a></li>
<li>784. Letter Case Permutation <code>Medium</code> <a href="https://leetcode.com/problems/letter-case-permutation/">題目</a> <a href="/2022/09/14/leetcode/Algorithm/Algorithm%20I/784-letter-case-permutation/">筆記</a></li>
</ul>
<hr />
<h2 id="0913-day-12-dynamic-programming"><a class="markdownIt-Anchor" href="#0913-day-12-dynamic-programming"></a> 09/13 Day 12 Dynamic Programming</h2>
<ul>
<li>70. Climbing Stairs <code>Easy</code> <a href="https://leetcode.com/problems/climbing-stairs/">題目</a> <a href="/2022/09/12/leetcode/Algorithm/Algorithm%20I/70-climbing-stairs/">筆記</a></li>
<li>198. House Robber <code>Medium</code> <a href="https://leetcode.com/problems/house-robber/">題目</a> <a href="/2022/09/14/leetcode/Algorithm/Algorithm%20I/198-house-robber/">筆記</a></li>
<li>120. Triangle <code>Medium</code> <a href="https://leetcode.com/problems/triangle/">題目</a> <a href="/2022/09/21/leetcode/Algorithm/Algorithm%20I/120-triangle/">筆記</a></li>
</ul>
<hr />
<h2 id="0913-day-13-bit-manipulation"><a class="markdownIt-Anchor" href="#0913-day-13-bit-manipulation"></a> 09/13 Day 13 Bit Manipulation</h2>
<ul>
<li>231. Power of Two <code>Easy</code> <a href="https://leetcode.com/problems/power-of-two/">題目</a> 筆記</li>
<li>191. Number of 1 Bits <code>Easy</code> <a href="https://leetcode.com/problems/number-of-1-bits/">題目</a> 筆記</li>
</ul>
<hr />
<h2 id="0913-day-14-bit-manipulation"><a class="markdownIt-Anchor" href="#0913-day-14-bit-manipulation"></a> 09/13 Day 14 Bit Manipulation</h2>
<ul>
<li>190. Reverse Bits <code>Easy</code> <a href="https://leetcode.com/problems/reverse-bits/">題目</a> 筆記</li>
<li>136. Single Number <code>Easy</code> <a href="https://leetcode.com/problems/single-number/">題目</a> 筆記</li>
</ul>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Algorithm I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]102. Binary Tree Level Order Traversal</title>
    <url>/2022/10/05/leetcode/Data%20Structure/Data%20Structure%20I/102-binary-tree-level-order-traversal/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/05/30/leetcode/Data%20Structure/Data%20Structure%20I/starting-write-data-structure-i-note/#10-x2F-05-Day-11-Tree">Algorithm I 筆記撰寫計畫</a> 第十一天第一題，共三題。</p>
</blockquote>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 10 min</li>
<li>題目: <a href="https://leetcode.com/problems/binary-tree-level-order-traversal/">102. Binary Tree Level Order Traversal</a></li>
</ul>
<p>給你一個 <code>Binary Tree</code> ，按照層級遍歷他，並回傳遍歷值的結果。</p>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
<p><strong>限制:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[0, 2000]</code>.</li>
<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>
</ul>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg" alt="example-image-1" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = [3,9,20,null,null,15,7]</span><br><span class="line">Output: [[3],[9,20],[15,7]]</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = [1]</span><br><span class="line">Output: [[1]]</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = []</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>
</details>
<!-- <details><summary>點我開啟思路</summary>

<p class="text-h2"> 思路 </p>

</details> -->
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>定義:</p>
<ul>
<li><code>res</code>: 答案陣列</li>
<li><code>stacks</code>: 等待處理的節點陣列</li>
<li><code>depth</code>: 節點的深度</li>
</ul>
<p>步驟:</p>
<ol>
<li>把節點放到 <code>stacks</code> ，設定深度為 <code>0</code> (一點都不深)</li>
<li>進入迴圈，直到 <code>stacks</code> 沒有存貨
<ol>
<li>拿出 <code>stacks</code> 最後一個 <code>node</code></li>
<li>拿出深度</li>
<li>把 <code>node.val</code> 放進 <code>res</code></li>
<li>塞入 <code>node.right</code> 至 <code>res</code> (深度加一)</li>
<li>塞入 <code>node.left</code> 至 <code>res</code> (深度加一)</li>
</ol>
</li>
<li>回傳 <code>res</code></li>
</ol>
<h2 id="程式"><a class="markdownIt-Anchor" href="#程式"></a> 程式</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">levelOrder</span>(<span class="params">root: TreeNode | <span class="literal">null</span></span>): <span class="built_in">number</span>[][] &#123;</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">stacks</span>: [<span class="title class_">TreeNode</span>, <span class="built_in">number</span>][] = [[root, <span class="number">0</span>]];</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">res</span>: <span class="built_in">number</span>[][] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (stacks.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// take this node and depth</span></span><br><span class="line">    <span class="keyword">const</span> node = stacks[stacks.<span class="property">length</span> - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">const</span> depth = (stacks.<span class="title function_">pop</span>()!)[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// push val into res</span></span><br><span class="line">    <span class="keyword">if</span> (!res[depth]) res[depth] = [];</span><br><span class="line">    res[depth].<span class="title function_">push</span>(node!.<span class="property">val</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// push child into stacks</span></span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">right</span>) stacks.<span class="title function_">push</span>([node.<span class="property">right</span>, depth + <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">left</span>) stacks.<span class="title function_">push</span>([node.<span class="property">left</span>, depth + <span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<table>
<thead>
<tr>
<th>&lt;!-- Language</th>
<th>Runtime</th>
<th>Beats</th>
<th>Memory Usage</th>
<th>Beats</th>
</tr>
</thead>
<tbody>
<tr>
<td>TS iterative</td>
<td>91 ms</td>
<td>74.63%</td>
<td>44.7 MB</td>
<td>18.41%</td>
</tr>
<tr>
<td>TS recursive</td>
<td>80 ms</td>
<td>82.21%</td>
<td>43.9 MB</td>
<td>87.98% --&gt;</td>
</tr>
</tbody>
</table>
<p><img src="https://i.imgur.com/6YJia9G.png" alt="score-image" /></p>
<!-- ##### 參考資料

+ [discuss]

[discuss]: https://leetcode.com/problems/house-robber/discuss/156523/From-good-to-great.-How-to-approach-most-of-DP-problems. -->
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Data Structure I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Tree</tag>
        <tag>Binary Tree</tag>
        <tag>Breadth-First Search</tag>
        <tag>Iteration</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]104. Maximum Depth of Binary Tree</title>
    <url>/2022/10/05/leetcode/Data%20Structure/Data%20Structure%20I/104-maximum-depth-of-binary-tree/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/05/30/leetcode/Data%20Structure/Data%20Structure%20I/starting-write-data-structure-i-note/#10-x2F-05-Day-11-Tree">Algorithm I 筆記撰寫計畫</a> 第十一天第二題，共三題。</p>
</blockquote>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 5 min</li>
<li>題目: <a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/">104. Maximum Depth of Binary Tree</a></li>
</ul>
<p>給你一個 <code>Binary Tree</code> ，回傳他的深度。</p>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
<p><strong>限制:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[0, 10^4]</code>.</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
</ul>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/11/26/tmp-tree.jpg" alt="example-image-1" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = [3,9,20,null,null,15,7]</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = [1,null,2]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>
</details>
<!-- <details><summary>點我開啟思路</summary>

<p class="text-h2"> 思路 </p>

</details> -->
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>這題題目要求非常簡單，回傳深度。</p>
<p>嘗試用 <code>DFS</code> 跟 <code>BFS</code> 兩種方式做。</p>
<h3 id="dfs"><a class="markdownIt-Anchor" href="#dfs"></a> DFS</h3>
<p>DFS 相對簡單，就左右比大小就好。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">maxDepth</span>(<span class="params">root: TreeNode | <span class="literal">null</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">_dfs</span>(<span class="params">node: TreeNode, depth = <span class="number">1</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="comment">// 如果這個結點沒有左節點也沒有右節點了，就直接回傳這個節點的深度</span></span><br><span class="line">    <span class="keyword">if</span> (!node.<span class="property">left</span> &amp;&amp; !node.<span class="property">right</span>) <span class="keyword">return</span> depth;</span><br><span class="line">    <span class="comment">// 回傳左右比大小的深度</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(node.<span class="property">left</span> ? <span class="title function_">_dfs</span>(node.<span class="property">left</span>, depth + <span class="number">1</span>) : <span class="number">0</span>, node.<span class="property">right</span> ? <span class="title function_">_dfs</span>(node.<span class="property">right</span>, depth + <span class="number">1</span>) : <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 回傳比大小的結果</span></span><br><span class="line">  <span class="keyword">return</span> root ? <span class="title function_">_dfs</span>(root) : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="bfs"><a class="markdownIt-Anchor" href="#bfs"></a> BFS</h3>
<p>概念跟 <a href="/2022/10/05/leetcode/Data%20Structure/Data%20Structure%20I/102-binary-tree-level-order-traversal/#%E7%AD%86%E8%A8%98">[LeetCode]102. Binary Tree Level Order Traversal</a> 很像，把深度存起來，但是這次用的不同的資料結構。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">maxDepth</span>(<span class="params">root: TreeNode | <span class="literal">null</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="comment">// 錯誤處理</span></span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 設定答案深度跟 stack</span></span><br><span class="line">  <span class="keyword">let</span> maxDepth = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">stack</span>: &#123; <span class="attr">node</span>: <span class="title class_">TreeNode</span>, <span class="attr">depth</span>: <span class="built_in">number</span> &#125;[] = [&#123; <span class="attr">node</span>: root, <span class="attr">depth</span>: <span class="number">1</span> &#125;];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 跑到 stack 沒貨</span></span><br><span class="line">  <span class="keyword">while</span> (stack.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 拿出深度跟節點</span></span><br><span class="line">    <span class="keyword">const</span> depth = stack[stack.<span class="property">length</span> - <span class="number">1</span>].<span class="property">depth</span>;</span><br><span class="line">    <span class="keyword">const</span> node = (stack.<span class="title function_">pop</span>())!.<span class="property">node</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有子節點就繼續往下找</span></span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">left</span> || node.<span class="property">right</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (node.<span class="property">left</span>) stack.<span class="title function_">push</span>(&#123; <span class="attr">node</span>: node.<span class="property">left</span>, <span class="attr">depth</span>: depth + <span class="number">1</span> &#125;);</span><br><span class="line">      <span class="keyword">if</span> (node.<span class="property">right</span>) stack.<span class="title function_">push</span>(&#123; <span class="attr">node</span>: node.<span class="property">right</span>, <span class="attr">depth</span>: depth + <span class="number">1</span> &#125;);</span><br><span class="line">      <span class="comment">// 沒有子節點了才做深度比較。</span></span><br><span class="line">    &#125; <span class="keyword">else</span> maxDepth = <span class="title class_">Math</span>.<span class="title function_">max</span>(maxDepth, depth);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> maxDepth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<table>
<thead>
<tr>
<th>Language</th>
<th>Runtime</th>
<th>Beats</th>
<th>Memory Usage</th>
<th>Beats</th>
</tr>
</thead>
<tbody>
<tr>
<td>BFS</td>
<td>73 ms</td>
<td>96.84%</td>
<td>46.7 MB</td>
<td>27.31%</td>
</tr>
<tr>
<td>DFS</td>
<td>120 ms</td>
<td>45.26%</td>
<td>46.8 MB</td>
<td>27.31%</td>
</tr>
</tbody>
</table>
<p><img src="https://i.imgur.com/yIBat8v.png" alt="score-image" /></p>
<!-- ##### 參考資料

+ [discuss]

[discuss]: https://leetcode.com/problems/house-robber/discuss/156523/From-good-to-great.-How-to-approach-most-of-DP-problems. -->
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Data Structure I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Depth-First Search</tag>
        <tag>Tree</tag>
        <tag>Binary Tree</tag>
        <tag>Breadth-First Search</tag>
        <tag>Iteration</tag>
        <tag>Recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]118. Pascal&#39;s Triangle</title>
    <url>/2022/06/02/leetcode/Data%20Structure/Data%20Structure%20I/118_Pascal&#39;s_Triangle/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://linyejoe2.github.io/2022/05/30/leetcode/Data%20Structure/Data%20Structure%20I/starting-write-data-structure-i-note/">Data Structure I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Data Structure I</code> 的第四天第一個題目，總共有兩題。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 2小時</li>
<li><a href="https://leetcode.com/problems/pascals-triangle/">題目</a></li>
</ul>
<p>給你一個數字，回傳總列數等同這個數字的帕斯卡三角 (<code>Pascal's triangle</code>)</p>
<span id="more"></span>
<blockquote>
<p>帕斯卡三角: 一個帕斯卡三角的下面每個值都是左上方跟右上方兩個值的合</p>
</blockquote>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif" alt="" /></p>
<details><summary>點我開啟限制與範例</summary>
<pre>
<p><strong>限制:</strong></p>
<ul>
<li>1 &lt;= numRows &lt;= 30</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: numRows = 5</span><br><span class="line">Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: numRows = 1</span><br><span class="line">Output: [[1]]</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>這又是一題考 <code>Dynamic Programming</code> 的題目。</p>
<p>這次寫的時候完全靠自己的感覺，沒想到第一次寫完就 run 過而且取得不錯的成績，我真的太開心啦~</p>
<h4 id="規律"><a class="markdownIt-Anchor" href="#規律"></a> 規律</h4>
<p>DP 就是要先找規律，帕斯卡三角的規律就是，每下個 row 的值都是上面 row 的值位移一之後相加，像下面的例子:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1,3,3,1] 假設這行是帕斯卡三角的某行，那他的下一行就會是</span><br><span class="line"></span><br><span class="line">    1 3 3 1</span><br><span class="line">+     1 3 3 1</span><br><span class="line">-------------</span><br><span class="line">=   1 4 6 4 1</span><br></pre></td></tr></table></figure>
<h4 id="優化規律"><a class="markdownIt-Anchor" href="#優化規律"></a> 優化規律</h4>
<p>觀察一下上面的算式，我們可以推導出一個更優化的邏輯，就是，<strong>每下一行的第二個值開始都會是他本身加上前面那個值</strong>，像下面的例子:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1,3,3,1] 假設這行是帕斯卡三角的某行，那他的下一行就會是</span><br><span class="line"></span><br><span class="line">index = 1 =&gt; value = 1 // 因為他是第一個值，所以不用修改，一定會是1</span><br><span class="line">index = 2 =&gt; value = value + (index = 2-1 的 value) = 4</span><br><span class="line">index = 3 =&gt; value = value + (index = 3-1 的 value) = 6</span><br><span class="line">index = 4 =&gt; value = value + (index = 4-1 的 value) = 4</span><br><span class="line">最後再補上 1 就會有下一行的值了。</span><br><span class="line">= [1,4,6,4,1]</span><br></pre></td></tr></table></figure>
<h2 id="程式碼"><a class="markdownIt-Anchor" href="#程式碼"></a> 程式碼</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">numRows</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> generate = <span class="keyword">function</span> (<span class="params">numRows</span>) &#123;</span><br><span class="line">    <span class="comment">// 不管怎樣一定有 1</span></span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">PascalsArr</span> = [</span><br><span class="line">        [<span class="number">1</span>]</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numRows - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="title class_">PascalsArr</span>.<span class="title function_">push</span>(<span class="title function_">getNextRow</span>(<span class="title class_">PascalsArr</span>[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="title class_">PascalsArr</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getNextRow</span>(<span class="params">Arr</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> tempArr = <span class="title class_">Arr</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">element, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> element = element + array[index - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;);</span><br><span class="line">    tempArr.<span class="title function_">push</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> (tempArr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">generate</span>(<span class="number">5</span>))</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/EAPJzb5.png" alt="" /></p>
<!-- ##### 參考資料 -->]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Data Structure I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]121. Best Time to Buy and Sell Stock</title>
    <url>/2022/06/01/leetcode/Data%20Structure/Data%20Structure%20I/121_Best_Time_to_Buy_and_Sell_Stock/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/05/30/leetcode/Data%20Structure/Data%20Structure%20I/starting-write-data-structure-i-note/">Data Structure I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Data Structure I</code> 的第三天第二個題目，總共有兩個。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 4小時</li>
<li><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/">題目</a></li>
</ul>
<p>傳入一個陣列，模擬一個股票每天的價格，這個陣列有以下特性:</p>
<ul>
<li>第一項是第一天，第二項是第二天，以此類推。</li>
<li>每項的數字就是當天的價格，不懂的可以看範例。</li>
</ul>
<p>找到一個最好的時間點(價格最低)買進股票，再找到一個最好的時機(價格最高)賣出，把賣出價減去買入價回傳。</p>
<details><summary>點我開啟限制與範例</summary>
<pre>
**限制:**
<ul>
<li><code>1 &lt;= prices.length &lt;= 10^5</code></li>
<li><code>0 &lt;= prices[i] &lt;= 10^4</code></li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: prices = [7,1,5,3,6,4]</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: 第二天買入價格最好(1元)，然後持有三天之後在第五天賣出(6元)，</span><br><span class="line">這樣得到的利潤就是 6-1=5 所以我們回傳最後答案 5 。</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: prices = [7,6,4,3,1]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: 在這個例子裡，怎麼買都是賠錢的，所以就不買了，回傳 0 (至少比賠錢好)</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p><s>最一開始想到了暴力解的方法，遍歷兩次陣列，把每個值以及他可以獲得的最好價格算出來，然後價格最高的那個回傳。</s><br />
上面的方法 timeout 了，所以只能認真想 O(n) 的解法了。</p>
<h4 id="掌握規律"><a class="markdownIt-Anchor" href="#掌握規律"></a> 掌握規律</h4>
<p>間單來說，這是一題考 <code>Dynamic Programming</code> 的題目，需要把握的一個規律就是:<br />
<strong>如果有答案，那麼賣出的值就一定要比買入的值大。</strong></p>
<h4 id="原解法"><a class="markdownIt-Anchor" href="#原解法"></a> 原解法</h4>
<p>這個寫法可以看成是上面的暴力解融合起來，我們先來拆解暴力解步驟看看:</p>
<ol>
<li>遍歷一次陣列。</li>
<li>內圈再遍歷一次陣列，找如果第一步的 index 是買入價時，最好的賣出價。</li>
</ol>
<h4 id="dynamic-programming-解法"><a class="markdownIt-Anchor" href="#dynamic-programming-解法"></a> Dynamic Programming 解法！</h4>
<p>上面兩步直覺寫就是 O(n^2) ，但其實這兩個迴圈如果參照<strong>如果有答案，那麼賣出的值就一定要比買入的值大</strong>，的規律，就可以用一次遍歷完成，步驟如下:</p>
<ol>
<li>設定最小值 <code>minPrice</code> (預設是最大，這樣才可以越來越小)，及最大獲利 <code>maxProfit</code> (0)</li>
<li>遍歷陣列:
<ol>
<li>如果陣列當前值比 <code>minPrice</code> 小，就覆寫 <code>minPrice</code></li>
<li>如果陣列當前值減去 <code>minPrice</code> 得出來的獲利比 <code>maxProfit</code> 大，就覆寫 <code>maxProfit</code></li>
</ol>
</li>
</ol>
<p>但是注意這個寫法有個 Bug ，那就是如果題目要求的是買入時跟賣出時的 value ，那會有 <code>exception</code> ，原因如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: prices = [10, 2, 200, 1, 100]</span><br><span class="line">Output: [1, 200]</span><br><span class="line">Expect: [2, 200]</span><br><span class="line">Explanation: 會發生這種狀況就是因為，這題為了加速運算過程，</span><br><span class="line">需要完全遍歷一遍 prices 更新 minPrice ，</span><br><span class="line">所以如果後面有比答案更小的 value 存在，那麼其實這時候的 minPrice 就會變成錯誤的值了。</span><br><span class="line"></span><br><span class="line">Input: prices = [10, 100, 1000, 1, 100]</span><br><span class="line">Output: [1, 1000]</span><br><span class="line">Expect: [100, 1000]</span><br><span class="line">Explanation: 這個示範也是同理。</span><br></pre></td></tr></table></figure>
<h2 id="程式碼"><a class="markdownIt-Anchor" href="#程式碼"></a> 程式碼</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">prices</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxProfit = <span class="keyword">function</span> (<span class="params">prices</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> minPrice = <span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>;</span><br><span class="line">    <span class="keyword">var</span> maxProfit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; prices.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        minPrice = <span class="title class_">Math</span>.<span class="title function_">min</span>(minPrice, prices[i]);</span><br><span class="line">        maxProfit = <span class="title class_">Math</span>.<span class="title function_">max</span>(maxProfit, prices[i] - minPrice);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxProfit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/B5iPjiq.png" alt="" /></p>
<!-- ##### 參考資料 -->]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Data Structure I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]141. Linked List Cycle</title>
    <url>/2022/06/09/leetcode/Data%20Structure/Data%20Structure%20I/141-linked-list-cycle/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/05/30/leetcode/Data%20Structure/Data%20Structure%20I/starting-write-data-structure-i-note/">Data Structure I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Data Structure I</code> 的第八天第一個題目，總共有三題。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 2小時</li>
<li><a href="https://leetcode.com/problems/linked-list-cycle/">題目</a></li>
</ul>
<p>傳入一個 <code>Linked List</code> 的 head ，判斷這個 <code>Linked List</code> 是否循環(某個 next 指到前面的 val)</p>
<p><a href="https://chupai.github.io/posts/200427_ds_linkedlist/">Linked List 介紹</a></p>
<span id="more"></span>
<p>如果他有迴圈就回傳 <code>true</code> ，如果沒有就回傳 <code>false</code> 。</p>
<details><summary>點我開啟限制與範例</summary>
<pre>
<p><strong>限制:</strong></p>
<ul>
<li>The number of the nodes in the list is in the range <code>[0, 104]</code>.</li>
<li><code>-105 &lt;= Node.val &lt;= 105</code></li>
<li><code>pos</code> is <code>-1</code> or a <strong>valid index</strong> in the linked-list.</li>
</ul>
<p><strong>Example 1:</strong></p>
<p><img src="" alt="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: head = [3,2,0,-4], pos = 1</span><br><span class="line">Output: true</span><br><span class="line">Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<p><img src="" alt="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: head = [1,2], pos = 0</span><br><span class="line">Output: true</span><br><span class="line">Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<p><img src="" alt="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: head = [1], pos = -1</span><br><span class="line">Output: false</span><br><span class="line">Explanation: There is no cycle in the linked list.</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>使用 <code>Two Pointers</code> 就可以解決這個問題，但是我沒有想到 <code>Two Pointers</code> 的寫法，我很抱歉 TAT</p>
<h4 id="複雜度"><a class="markdownIt-Anchor" href="#複雜度"></a> 複雜度</h4>
<p><code>Two Pointers</code>:</p>
<ul>
<li>時間複雜度: O(n)</li>
<li>空間複雜度: O(1)</li>
</ul>
<p><code>Hash Table</code></p>
<ul>
<li>時間複雜度: O(n)</li>
<li>空間複雜度: O(n)</li>
</ul>
<p>我用的 <code>Hash Table</code> 寫出了兩種不同的程式碼，但都成績很差，因為 <code>Two Pointers</code> 算這題的正解， <code>Hash Table</code> 只能算是可以寫。</p>
<!-- two pointers 寫法 TODO -->
<p>解題思路也非常清晰易懂，遍歷一次陣列然後同時檢查 <code>head</code> 是否有在 <code>Hash Table</code> 裡，步驟如下:</p>
<ul>
<li>遍歷陣列:
<ol>
<li>檢查 <code>head</code> 跟 <code>head.next</code> 是否存在:
<ul>
<li>只要一個不存在 &gt; <code>return false</code></li>
</ul>
</li>
<li>檢查 <code>head</code> 是否有在 <code>Hash Table</code> :
<ul>
<li>如果有 &gt; <code>return true</code> 代表有迴圈。</li>
</ul>
</li>
<li>把 <code>head</code> 放入 <code>Hash Table</code></li>
<li>把 <code>head</code> 指向 <code>head.next</code></li>
</ol>
</li>
</ul>
<h2 id="程式碼"><a class="markdownIt-Anchor" href="#程式碼"></a> 程式碼</h2>
<h4 id="iterate-style"><a class="markdownIt-Anchor" href="#iterate-style"></a> Iterate Style</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">var</span> hasCycle = <span class="keyword">function</span> (<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="comment">// let headMap = new Map;</span></span><br><span class="line">    <span class="keyword">let</span> headArr = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (head &amp;&amp; head.<span class="property">next</span>)&#123;</span><br><span class="line">        <span class="comment">// console.log(&quot;head.val: &quot; + head.val)</span></span><br><span class="line">        <span class="comment">// console.log(&quot;head.next: &quot; + head.next)</span></span><br><span class="line">        <span class="comment">// console.log(&quot;headArr: &quot;, headArr)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (headArr.<span class="title function_">indexOf</span>(head) != -<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        headArr.<span class="title function_">push</span>(head);</span><br><span class="line"></span><br><span class="line">        head = head.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="recursive-style"><a class="markdownIt-Anchor" href="#recursive-style"></a> Recursive Style</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> hasCycle = <span class="keyword">function</span> (<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="comment">// let headMap = new Map;</span></span><br><span class="line">    <span class="keyword">let</span> headArr = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">loopHead</span>(head, headArr);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loopHead</span>(<span class="params">head, headArr</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!head || !head.<span class="property">next</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (headArr.<span class="title function_">indexOf</span>(head) != -<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    headArr.<span class="title function_">push</span>(head);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">loopHead</span>(head.<span class="property">next</span>, headArr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/G1qQ9QO.png" alt="" /></p>
<details style='display:none;'><summary>點我開啟舊寫法/失敗寫法</summary>
<pre>
<p></pre></details></p>
<!-- ##### 參考資料 -->]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Data Structure I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Linked List</tag>
        <tag>Two Pointers</tag>
        <tag>Hash Table</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]144. Binary Tree Preorder Traversal</title>
    <url>/2022/09/27/leetcode/Data%20Structure/Data%20Structure%20I/144-binary-tree-preorder-traversal/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/05/30/leetcode/Data%20Structure/Data%20Structure%20I/starting-write-data-structure-i-note/">Algorithm I 筆記撰寫計畫</a> 第十天第一題，共三題。</p>
</blockquote>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 10 min</li>
<li>題目: <a href="https://leetcode.com/problems/binary-tree-preorder-traversal/">144. Binary Tree Preorder Traversal</a></li>
</ul>
<p>前續遍歷一個二元樹，然後把結果回傳。</p>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
<p><strong>限制:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
</ul>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg" alt="example-image-1" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = [1,null,2,3]</span><br><span class="line">Output: [1,2,3]</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = []</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = [1]</span><br><span class="line">Output: [1]</span><br></pre></td></tr></table></figure>
</details>
<!-- <details><summary>點我開啟思路</summary>

<p class="text-h2"> 思路 </p>

</details> -->
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>這題要練習樹的前序走訪，很簡單，就用深度優先走訪就完事了。</p>
<p>題目有要求要用迴圈的作法，所以遞迴跟迴圈各寫一個解答。</p>
<h3 id="recursive"><a class="markdownIt-Anchor" href="#recursive"></a> Recursive</h3>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">preorderTraversal</span>(<span class="params">root: TreeNode | <span class="literal">null</span>, vals: <span class="built_in">number</span>[] = []</span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">  <span class="comment">// catch exception</span></span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// push val to anwsers arr.</span></span><br><span class="line">  vals.<span class="title function_">push</span>(root!.<span class="property">val</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// recursion traversal of tree.</span></span><br><span class="line">  <span class="keyword">if</span> (root?.<span class="property">left</span>) <span class="title function_">preorderTraversal</span>(root.<span class="property">left</span>,vals);</span><br><span class="line">  <span class="keyword">if</span> (root?.<span class="property">right</span>) <span class="title function_">preorderTraversal</span>(root.<span class="property">right</span>,vals);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> vals;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="iterative"><a class="markdownIt-Anchor" href="#iterative"></a> iterative</h3>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">preorderTraversal</span>(<span class="params">root: TreeNode | <span class="literal">null</span></span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">  <span class="comment">// catch exception</span></span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// create anwsers arr and push the head val of the tree.</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">vals</span>:<span class="built_in">number</span>[] = [root?.<span class="property">val</span>];</span><br><span class="line">  <span class="comment">// create pre go node list.</span></span><br><span class="line">  <span class="keyword">let</span> nodelist : <span class="title class_">TreeNode</span>[] = [];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// push 1st pre go node to list.</span></span><br><span class="line">  <span class="keyword">if</span> (root?.<span class="property">right</span>) nodelist.<span class="title function_">push</span>(root.<span class="property">right</span>);</span><br><span class="line">  <span class="keyword">if</span> (root?.<span class="property">left</span>) nodelist.<span class="title function_">push</span>(root.<span class="property">left</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Iteration traversal of tree till there is no node in pre go list.</span></span><br><span class="line">  <span class="keyword">while</span> ( nodelist.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> node = nodelist.<span class="title function_">pop</span>()!;</span><br><span class="line">    <span class="comment">// push val into anwsers arr.</span></span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">val</span>) vals.<span class="title function_">push</span>(node?.<span class="property">val</span>);</span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">right</span>) nodelist.<span class="title function_">push</span>(node.<span class="property">right</span>);</span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">left</span>) nodelist.<span class="title function_">push</span>(node.<span class="property">left</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> vals;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<table>
<thead>
<tr>
<th>Language</th>
<th>Runtime</th>
<th>Beats</th>
<th>Memory Usage</th>
<th>Beats</th>
</tr>
</thead>
<tbody>
<tr>
<td>TS iterative</td>
<td>83 ms</td>
<td>75.94%</td>
<td>44.8 MB</td>
<td>28.95%</td>
</tr>
<tr>
<td>TS recursive</td>
<td>107 ms</td>
<td>45.11%</td>
<td>44.5 MB</td>
<td>48.12%</td>
</tr>
</tbody>
</table>
<p><img src="https://i.imgur.com/ycN8979.png" alt="score-image" /></p>
<p>迴圈寫法很輕鬆地就得到了高分，側面驗證了遞迴的確會影響效率(最佳化的例外)。</p>
<!-- ##### 參考資料

+ [discuss]

[discuss]: https://leetcode.com/problems/house-robber/discuss/156523/From-good-to-great.-How-to-approach-most-of-DP-problems. -->
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Data Structure I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Depth-First Search</tag>
        <tag>Tree</tag>
        <tag>Binary Tree</tag>
        <tag>Iteration</tag>
        <tag>Recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]145. Binary Tree Postorder Traversal</title>
    <url>/2022/10/03/leetcode/Data%20Structure/Data%20Structure%20I/145-binary-tree-postorder-traversal/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/05/30/leetcode/Data%20Structure/Data%20Structure%20I/starting-write-data-structure-i-note/#09-x2F-27-Day-10-Tree">Algorithm I 筆記撰寫計畫</a> 第十天第三題，共三題。</p>
</blockquote>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 30 min</li>
<li>題目: <a href="https://leetcode.com/problems/binary-tree-postorder-traversal/">145. Binary Tree Postorder Traversal</a></li>
</ul>
<p>後續遍歷一個二元樹，然後把結果回傳。</p>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
<p><strong>限制:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
</ul>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg" alt="example-image-1" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = [1,null,2,3]</span><br><span class="line">Output: [3,2,1]</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = []</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = [1]</span><br><span class="line">Output: [1]</span><br></pre></td></tr></table></figure>
</details>
<!-- <details><summary>點我開啟思路</summary>

<p class="text-h2"> 思路 </p>

</details> -->
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>這題要練習樹的後序走訪，遵照以下步驟：</p>
<ol>
<li>先拿左節點</li>
<li>再拿右節點</li>
<li>最後拿父節點</li>
</ol>
<p>題目有要求要用迴圈的作法，所以遞迴跟迴圈各寫一個解答。</p>
<h3 id="recursive"><a class="markdownIt-Anchor" href="#recursive"></a> Recursive</h3>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">postorderTraversal</span>(<span class="params">root: TreeNode | <span class="literal">null</span>, res: <span class="built_in">number</span>[] = []</span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">  <span class="comment">// 有值就往內走</span></span><br><span class="line">  <span class="keyword">if</span> (root) &#123;</span><br><span class="line">    <span class="comment">// 左邊有值就往左邊走</span></span><br><span class="line">    <span class="title function_">postorderTraversal</span>(root.<span class="property">left</span>, res);</span><br><span class="line">    <span class="comment">// 右邊有值就往右邊走</span></span><br><span class="line">    <span class="title function_">postorderTraversal</span>(root.<span class="property">right</span>, res);</span><br><span class="line">    <span class="comment">// 左右都走完了，塞回去</span></span><br><span class="line">    res.<span class="title function_">push</span>(root.<span class="property">val</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="iterative"><a class="markdownIt-Anchor" href="#iterative"></a> iterative</h3>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">postorderTraversal</span>(<span class="params">root: TreeNode | <span class="literal">null</span></span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">  <span class="comment">// 例外處理</span></span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> [];</span><br><span class="line">  <span class="comment">// 答案陣列</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">result</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line">  <span class="comment">// 待處理的節點</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">stack</span>: <span class="title class_">TreeNode</span>[] = [root];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 只要 stack 裡還有節點，就繼續跑</span></span><br><span class="line">  <span class="keyword">while</span>(stack.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 把最後一個節點拿出來</span></span><br><span class="line">    <span class="keyword">let</span> node = stack.<span class="title function_">pop</span>()!;</span><br><span class="line">    <span class="comment">// 把這個節點的值放進答案陣列的最前面</span></span><br><span class="line">    result.<span class="title function_">unshift</span>(node.<span class="property">val</span>);</span><br><span class="line">    <span class="comment">// 如果他有左右，就放進 stack 裡等待處理</span></span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">left</span>) stack.<span class="title function_">push</span>(node.<span class="property">left</span>);</span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">right</span>) stack.<span class="title function_">push</span>(node.<span class="property">right</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<table>
<thead>
<tr>
<th>Language</th>
<th>Runtime</th>
<th>Beats</th>
<th>Memory Usage</th>
<th>Beats</th>
</tr>
</thead>
<tbody>
<tr>
<td>TS iterative</td>
<td>91 ms</td>
<td>74.63%</td>
<td>44.7 MB</td>
<td>18.41%</td>
</tr>
<tr>
<td>TS recursive</td>
<td>80 ms</td>
<td>82.21%</td>
<td>43.9 MB</td>
<td>87.98%</td>
</tr>
</tbody>
</table>
<p><img src="https://i.imgur.com/RpH1kId.png" alt="score-image" /></p>
<!-- ##### 參考資料

+ [discuss]

[discuss]: https://leetcode.com/problems/house-robber/discuss/156523/From-good-to-great.-How-to-approach-most-of-DP-problems. -->
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Data Structure I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Depth-First Search</tag>
        <tag>Tree</tag>
        <tag>Binary Tree</tag>
        <tag>Iteration</tag>
        <tag>Recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]1. Two Sum</title>
    <url>/2022/05/31/leetcode/Data%20Structure/Data%20Structure%20I/1_Two_Sum/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/05/30/leetcode/Data%20Structure/Data%20Structure%20I/starting-write-data-structure-i-note/">Data Structure I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Data Structure I</code> 的第二天第一個題目，總共有兩個。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 10分鐘</li>
<li><a href="https://leetcode.com/problems/two-sum/">題目</a></li>
</ul>
<p>輸入一個包含數字的陣列(nums)及一個目標數字(target)，回傳包和兩個位於原陣列內的數字的陣列，這兩個數字相加要等於目標數字。</p>
<p><strong>限制:</strong></p>
<ul>
<li><code>2 &lt;= nums.length &lt;= 10^4</code></li>
<li><code>-10^9 &lt;= nums[i] &lt;= 10^9</code></li>
<li><code>-10^9 &lt;= target &lt;= 10^9</code></li>
<li><strong>Only one valid answer exists.</strong></li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,7,11,15], target = 9</span><br><span class="line">Output: [0, 1]</span><br><span class="line">Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,2,4], target = 6</span><br><span class="line">Output: [1, 2]</span><br></pre></td></tr></table></figure>
<p><strong>Follow-Up:</strong> 這道題時間複雜度可以寫到 <code>O(n^2)</code> 以下。</p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>這題剛好是 <code>＃1</code> ，以前剛寫 LeetCode 時就寫過這題了，這次來嘗試寫出更好的成績。<br />
最簡單的邏輯，遍歷兩次 <code>nums</code> 把兩次的值相加，只要一有答案就 <code>return</code> ，這樣就有答案了。</p>
<p>這次寫出來的東西跟上次差不多，解題思路如下:</p>
<ol>
<li>先 for 一次 <code>nums</code></li>
<li>target - 當前的 element 得出來的值，拿去比較:
<ul>
<li>值有存在在 <code>nums</code> 裡。</li>
<li>值的 index 不等於當前 index 。</li>
</ul>
</li>
<li>一通過就 return</li>
</ol>
<h2 id="程式碼"><a class="markdownIt-Anchor" href="#程式碼"></a> 程式碼</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">var</span> twoSum = <span class="keyword">function</span> (<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> num2IndexTemp = nums.<span class="title function_">indexOf</span>(target - nums[i])</span><br><span class="line">        <span class="keyword">if</span> (num2IndexTemp != -<span class="number">1</span> &amp;&amp; num2IndexTemp != i) <span class="keyword">return</span> [i, num2IndexTemp];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/NuAKKtz.png" alt="" /></p>
<h2 id="04212022-程式碼與成績"><a class="markdownIt-Anchor" href="#04212022-程式碼與成績"></a> 04/21/2022 程式碼與成績</h2>
<p>這是以前剛接觸 LeetCode 時寫的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="keyword">function</span> (<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> ans = [];</span><br><span class="line">    nums.<span class="title function_">forEach</span>(<span class="function">(<span class="params">element, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (array.<span class="title function_">indexOf</span>(target - element) != -<span class="number">1</span> &amp;&amp; ans.<span class="property">length</span> === <span class="number">0</span> &amp;&amp; index != array.<span class="title function_">indexOf</span>(target - element)) &#123;</span><br><span class="line">            ans = [index, array.<span class="title function_">indexOf</span>(target - element)];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/Iiv42MO.png" alt="" /></p>
<!-- ##### 參考資料 -->
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Data Structure I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]20. Valid Parentheses</title>
    <url>/2022/09/22/leetcode/Data%20Structure/Data%20Structure%20I/20-valid-parentheses/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/05/30/leetcode/Data%20Structure/Data%20Structure%20I/starting-write-data-structure-i-note/#09-x2F-23-Day-9-Linked-List">Algorithm I 筆記撰寫計畫</a> 第九天第一題，共兩題。</p>
</blockquote>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 5 min</li>
<li>題目: <a href="https://leetcode.com/problems/valid-parentheses/">20. Valid Parentheses</a></li>
</ul>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
<p><strong>限制:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 104</code></li>
<li><code>s</code> consists of parentheses only <code>'()[]&#123;&#125;'</code>.</li>
</ul>
<p><strong>Example 1:</strong></p>
<!-- ![example-image-1](https://assets.leetcode.com/uploads/2021/01/04/list1.jpg) -->
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;()&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<!-- ![example-image-2](https://assets.leetcode.com/uploads/2021/01/04/list2.jpg) -->
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;()[]&#123;&#125;&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<!-- ![example-image-2](https://assets.leetcode.com/uploads/2021/01/04/list2.jpg) -->
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;(]&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>
</details>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>這題要訓練 <code>stack</code> 的運用，解題步驟如下：</p>
<ol>
<li>建立一個 <code>stack</code> ，運用他 <code>LIFO</code> 的特性，我們可以很好的對剛插入的值進行比較。</li>
<li>遍歷 <code>s</code></li>
<li>遇到左括弧( <code>'(', '[', '&#123;'</code> )，都塞進去 <code>stack</code></li>
<li>遇到右括弧( <code>')', ']', '&#125;'</code> )，就檢查 <code>stack</code> 最後一個值，
<ul>
<li>如果一樣，就把這個值刪掉( <code>pop()</code> )</li>
<li>如果不一樣，代表這個字串不合法，回傳 <code>false</code></li>
</ul>
</li>
<li>最後檢查 <code>stack</code> 裡還有沒有值，有就傳 <code>false</code> ，沒有就傳 <code>true</code></li>
</ol>
<p>Java iterative solution.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="comment">// Create stack for search.</span></span><br><span class="line">    Stack&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Character&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Push first element to avoid exception.</span></span><br><span class="line">    stack.push(s.charAt(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// travel tho s.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// if taking [&#x27;)&#x27;, &#x27;&#125;&#x27;, &#x27;]&#x27;], than we check what if stack top is the other part, if is, we pop the other part.</span></span><br><span class="line">      <span class="keyword">if</span> ((s.charAt(i) == <span class="string">&#x27;&#125;&#x27;</span> &amp;&amp; !stack.isEmpty() &amp;&amp; stack.peek() == <span class="string">&#x27;&#123;&#x27;</span>) ||</span><br><span class="line">        (s.charAt(i) == <span class="string">&#x27;]&#x27;</span> &amp;&amp; !stack.isEmpty() &amp;&amp; stack.peek() == <span class="string">&#x27;[&#x27;</span>) ||</span><br><span class="line">        (s.charAt(i) == <span class="string">&#x27;)&#x27;</span> &amp;&amp; !stack.isEmpty() &amp;&amp; stack.peek() == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">      ) stack.pop(); </span><br><span class="line"></span><br><span class="line">      <span class="comment">// if taking [&#x27;(&#x27;, &#x27;&#123;&#x27;, &#x27;[&#x27;], we put this element into stack.</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i) == <span class="string">&#x27;(&#x27;</span> || s.charAt(i) == <span class="string">&#x27;[&#x27;</span> || s.charAt(i) == <span class="string">&#x27;&#123;&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// if not matching by top two rule, we return false.</span></span><br><span class="line">      ) stack.push(s.charAt(i));</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// if stack stil contain element that mean this test case is invalid, we return false.</span></span><br><span class="line">    <span class="keyword">if</span> (!stack.empty()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<table>
<thead>
<tr>
<th>&lt;!-- Language</th>
<th>Runtime</th>
<th>Beats</th>
<th>Memory Usage</th>
<th>Beats</th>
</tr>
</thead>
<tbody>
<tr>
<td>Java</td>
<td>1 ms</td>
<td>80.63%</td>
<td>43.9 MB</td>
<td>73.27%</td>
</tr>
<tr>
<td>TypeScript</td>
<td>77 ms</td>
<td>95.35%</td>
<td>45.4 MB</td>
<td>22.74% --&gt;</td>
</tr>
</tbody>
</table>
<p><img src="https://i.imgur.com/q0BJAkn.png" alt="score-image" /></p>
<!-- ##### 參考資料

+ [discuss]

[discuss]: https://leetcode.com/problems/house-robber/discuss/156523/From-good-to-great.-How-to-approach-most-of-DP-problems. -->
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Data Structure I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>String</tag>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]203. Remove Linked List Elements</title>
    <url>/2022/06/10/leetcode/Data%20Structure/Data%20Structure%20I/203-remove-linked-list-elements/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/05/30/leetcode/Data%20Structure/Data%20Structure%20I/starting-write-data-structure-i-note/">Data Structure I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Data Structure I</code> 的第八天第三個題目，總共有三題。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 1小時</li>
<li><a href="https://leetcode.com/problems/remove-linked-list-elements/">題目</a></li>
</ul>
<p>傳入一個 <code>Linked List</code> 的 head ，然後再傳入一個數字，移除這個 <code>Linked List</code> 裡所有等於這個數字的節點，然後回傳 head 。</p>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
<pre>
<p><strong>限制:</strong></p>
<ul>
<li>The number of nodes in the list is in the range <code>[0, 10^4]</code>.</li>
<li><code>1 &lt;= Node.val &lt;= 50</code></li>
<li><code>0 &lt;= val &lt;= 50</code></li>
</ul>
<p><strong>Example 1:</strong></p>
<p><img src="" alt="https://assets.leetcode.com/uploads/2021/03/06/removelinked-list.jpg" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: head = [1,2,6,3,4,5,6], val = 6</span><br><span class="line">Output: [1,2,3,4,5]</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: head = [], val = 1</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: head = [7,7,7,7], val = 7</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>判斷 <code>head.next.val</code> 是否是要被移除的，如果是，那就把 <code>head.next</code> 連結到 <code>head.next.next</code> ，這樣就等於是 <code>remove this node</code> 了。</p>
<h2 id="程式碼"><a class="markdownIt-Anchor" href="#程式碼"></a> 程式碼</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeElements = <span class="keyword">function</span> (<span class="params">head, val, outHead</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (head &amp;&amp; !outHead &amp;&amp; head.<span class="property">val</span> == val) &#123;</span><br><span class="line">        <span class="keyword">while</span> (head.<span class="property">val</span> == val) &#123;</span><br><span class="line">            head = head.<span class="property">next</span>;</span><br><span class="line">            <span class="keyword">if</span> (head == <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        outHead = head;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!outHead) &#123;</span><br><span class="line">        outHead = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!head || !head.<span class="property">next</span>) <span class="keyword">return</span> outHead ? outHead : head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (head.<span class="property">val</span> == val) &#123;</span><br><span class="line">        head = head.<span class="property">next</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (head.<span class="property">next</span>.<span class="property">val</span> == val) &#123;</span><br><span class="line">        <span class="keyword">while</span> (head.<span class="property">next</span> &amp;&amp; head.<span class="property">next</span>.<span class="property">val</span> == val) &#123;</span><br><span class="line">            head.<span class="property">next</span> = head.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">removeElements</span>(head.<span class="property">next</span>, val, outHead);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/CCWx9z5.png" alt="" /></p>
<details style='display:none;'><summary>點我開啟舊寫法/失敗寫法</summary>
<pre>
<p></pre></details></p>
<!-- ##### 參考資料 -->]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Data Structure I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Linked List</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]21. Merge Two Sorted Lists</title>
    <url>/2022/06/10/leetcode/Data%20Structure/Data%20Structure%20I/21-merge-two-sorted-lists/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/05/30/leetcode/Data%20Structure/Data%20Structure%20I/starting-write-data-structure-i-note/">Data Structure I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Data Structure I</code> 的第八天第二個題目，總共有三題。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 3小時</li>
<li><a href="https://leetcode.com/problems/merge-two-sorted-lists/">題目</a></li>
</ul>
<p>傳入兩個 <code>Linked List</code> 的 head ， Merge 這兩個 <code>Linked List</code> 到一個 <code>Sorted Linked list</code><br />
然後回傳 <code>Sorted Linked list</code> 的 head 。</p>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
<pre>
<p><strong>限制:</strong></p>
<ul>
<li>The number of nodes in both lists is in the range <code>[0, 50]</code>.</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
<li>Both <code>list1</code> and <code>list2</code> are sorted in <strong>non-decreasing</strong> order.</li>
</ul>
<p><strong>Example 1:</strong></p>
<p><img src="" alt="https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: list1 = [1,2,4], list2 = [1,3,4]</span><br><span class="line">Output: [1,1,2,3,4,4]</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: list1 = [], list2 = []</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: list1 = [], list2 = [0]</span><br><span class="line">Output: [0]</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<h3 id="java-in-place-iteration"><a class="markdownIt-Anchor" href="#java-in-place-iteration"></a> Java In-place iteration</h3>
<p>使用 Java 寫的版本，差別在更易懂，且是 In-place</p>
<p>使用四個指針:</p>
<ul>
<li><code>head</code> : 指向答案 <code>list</code> 的開頭，方便等等回傳答案。</li>
<li><code>nextNode</code> : 指向現在要合併的節點。</li>
</ul>
<h3 id="typescript-merge-list-iteration"><a class="markdownIt-Anchor" href="#typescript-merge-list-iteration"></a> TypeScript Merge-list iteration</h3>
<blockquote>
<p>這是第一次寫這個題目時寫出來的，宣告了多餘的 <code>Merge-list</code></p>
</blockquote>
<p>限制裡有一行寫著 (Both <code>list1</code> and <code>list2</code> are sorted in <strong>non-decreasing</strong> order.) ，所以我會使用 <code>Merge Sort</code> ，做出自己的 <code>Sorted Linked list</code> 後回傳。</p>
<p>TypeScript</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// class ListNode &#123;</span></span><br><span class="line"><span class="comment">//     val: number</span></span><br><span class="line"><span class="comment">//     next: ListNode | null</span></span><br><span class="line"><span class="comment">//     constructor(val?: number, next?: ListNode | null) &#123;</span></span><br><span class="line"><span class="comment">//         this.val = (val === undefined ? 0 : val)</span></span><br><span class="line"><span class="comment">//         this.next = (next === undefined ? null : next)</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mergeTwoLists</span>(<span class="params">list1: ListNode | <span class="literal">null</span>, list2: ListNode | <span class="literal">null</span></span>): <span class="title class_">ListNode</span> | <span class="literal">null</span> &#123;</span><br><span class="line">    <span class="comment">// 例外處理 mergeTwoLists([], []): []</span></span><br><span class="line">    <span class="keyword">if</span> (!list1 &amp;&amp; !list2) <span class="keyword">return</span> list1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> mergedSortedList = <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((list1 &amp;&amp; list1.<span class="property">val</span> != <span class="literal">null</span> &amp;&amp; list2 &amp;&amp; list2.<span class="property">val</span> != <span class="literal">null</span> &amp;&amp; list1.<span class="property">val</span> &lt; list2.<span class="property">val</span>) || (!list2)) &#123;</span><br><span class="line">        mergedSortedList.<span class="property">val</span> = list1.<span class="property">val</span>;</span><br><span class="line">        list1 = list1.<span class="property">next</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mergedSortedList.<span class="property">val</span> = list2.<span class="property">val</span>;</span><br><span class="line">        list2 = list2.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> outList = mergedSortedList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (list1) &#123;</span><br><span class="line">            <span class="keyword">if</span> (list2 == <span class="literal">null</span> || list1.<span class="property">val</span> &lt;= list2.<span class="property">val</span>) &#123;</span><br><span class="line">                <span class="comment">// console.log(&quot;list1.val: &quot; + list1.val);</span></span><br><span class="line"></span><br><span class="line">                mergedSortedList.<span class="property">next</span> = <span class="keyword">new</span> <span class="title class_">ListNode</span>(list1.<span class="property">val</span>);</span><br><span class="line">                mergedSortedList = mergedSortedList.<span class="property">next</span>;</span><br><span class="line"></span><br><span class="line">                list1 = list1.<span class="property">next</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (list2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (list1 == <span class="literal">null</span> || list2.<span class="property">val</span> &lt; list1.<span class="property">val</span>) &#123;</span><br><span class="line">                <span class="comment">// console.log(&quot;list2.val: &quot; + list2.val);</span></span><br><span class="line"></span><br><span class="line">                mergedSortedList.<span class="property">next</span> = <span class="keyword">new</span> <span class="title class_">ListNode</span>(list2.<span class="property">val</span>);</span><br><span class="line">                mergedSortedList = mergedSortedList.<span class="property">next</span>;</span><br><span class="line"></span><br><span class="line">                list2 = list2.<span class="property">next</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果兩個都跑完了，就回傳 mergedSortedList</span></span><br><span class="line">        <span class="keyword">if</span> ((!list1) &amp;&amp; (!list2)) <span class="keyword">return</span> outList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/CCWx9z5.png" alt="" /></p>
<!-- ##### 參考資料 -->]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Data Structure I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Linked List</tag>
        <tag>Data Structure</tag>
        <tag>Merge Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]217. Contains Duplicate</title>
    <url>/2022/05/30/leetcode/Data%20Structure/Data%20Structure%20I/217_Contains_Duplicate/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/05/30/leetcode/Data%20Structure/Data%20Structure%20I/starting-write-data-structure-i-note/">Data Structure I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Data Structure I</code> 的第一天第一個題目，總共有兩個。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 10分鐘</li>
<li><a href="https://leetcode.com/problems/contains-duplicate/">題目</a></li>
</ul>
<p>輸入一個包含數字的陣列，如果裡面有兩個以上重複的數字，那就回傳 <code>true</code> ，如果沒有，就回傳 <code>false</code> 。</p>
<p><strong>限制:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 10^5</code></li>
<li><code>-10^9 &lt;= nums[i] &lt;= 10^9</code></li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [1, 2, 3, 1]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [1, 2, 3, 4]</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>先把傳進來的 Array 做一次 <code>sort</code> ，然後遍歷一次比較當前值及他的下一個值，如果有重複的就回傳 <code>true</code> 。</p>
<h2 id="程式碼"><a class="markdownIt-Anchor" href="#程式碼"></a> 程式碼</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> containsDuplicate = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    nums = nums.<span class="title function_">sort</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span> - <span class="number">1</span>; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] === nums[i + <span class="number">1</span>]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/8lxJDsJ.png" alt="" /></p>
<!-- ##### 參考資料 -->]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Data Structure I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]232. Implement Queue using Stacks</title>
    <url>/2022/09/26/leetcode/Data%20Structure/Data%20Structure%20I/232-implement-queue-using-stacks/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/05/30/leetcode/Data%20Structure/Data%20Structure%20I/starting-write-data-structure-i-note/#09-x2F-23-Day-9-Linked-List">Algorithm I 筆記撰寫計畫</a> 第九天第二題，共兩題。</p>
</blockquote>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 10 min</li>
<li>題目: <a href="https://leetcode.com/problems/implement-queue-using-stacks/">232. Implement Queue using Stacks</a></li>
</ul>
<p>使用最多兩個 <code>Stacks</code> 來建構一個 <code>Queue</code></p>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
<p><strong>限制:</strong></p>
<ul>
<li><code>1 &lt;= x &lt;= 9</code></li>
<li>At most <code>100</code> calls will be made to <code>push</code>, <code>pop</code>, <code>peek</code>, and <code>empty</code>.</li>
<li>All the calls to <code>pop</code> and <code>peek</code> are valid.</li>
</ul>
<p><strong>Example 1:</strong></p>
<!-- ![example-image-1](https://assets.leetcode.com/uploads/2021/01/04/list1.jpg) -->
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[&quot;MyQueue&quot;, &quot;push&quot;, &quot;push&quot;, &quot;peek&quot;, &quot;pop&quot;, &quot;empty&quot;]</span><br><span class="line">[[], [1], [2], [], [], []]</span><br><span class="line">Output</span><br><span class="line">[null, null, null, 1, 1, false]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">MyQueue myQueue = new MyQueue();</span><br><span class="line">myQueue.push(1); // queue is: [1]</span><br><span class="line">myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)</span><br><span class="line">myQueue.peek(); // return 1</span><br><span class="line">myQueue.pop(); // return 1, queue is [2]</span><br><span class="line">myQueue.empty(); // return false</span><br></pre></td></tr></table></figure>
</details>
<!-- <details><summary>點我開啟思路</summary>

<p class="text-h2"> 思路 </p>

</details> -->
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>使用兩個 <code>stack</code> 。</p>
<ul>
<li><code>mainStack</code> : 儲存所有資料。</li>
<li><code>subStack</code> : 當需要存取資料時，把 <code>mainStack</code> 的資料全部 <code>pop()</code> 到這，這樣最後一個 pop() 進來的資料，其實就是第一個被放進 <code>mainStack</code> 的資料，也就達到了題目要的效果。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> Stack&lt;Integer&gt; _mainStack;<span class="comment">// store val as stack.</span></span><br><span class="line">  <span class="keyword">private</span> Stack&lt;Integer&gt; _subStack;<span class="comment">// when pop or peek, reverse mainStack to subStack to simulate queue.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">MyQueue</span><span class="params">()</span> &#123;</span><br><span class="line">    _mainStack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Integer&gt;();</span><br><span class="line">    _subStack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Integer&gt;();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    _mainStack.push(x);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (!_mainStack.empty()) &#123;</span><br><span class="line">      _subStack.push(_mainStack.pop());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">popVal</span> <span class="operator">=</span> _subStack.pop();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!_subStack.empty()) &#123;</span><br><span class="line">      _mainStack.push(_subStack.pop());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> popVal;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (!_mainStack.empty()) &#123;</span><br><span class="line">      _subStack.push(_mainStack.pop());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">popVal</span> <span class="operator">=</span> _subStack.peek();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!_subStack.empty()) &#123;</span><br><span class="line">      _mainStack.push(_subStack.pop());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> popVal;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (_mainStack.empty());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>下面也提供 <code>TypeScript</code> 的寫法。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_val</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">push</span>(<span class="attr">x</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_val</span>.<span class="title function_">push</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">pop</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_val</span>.<span class="title function_">shift</span>()!;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">peek</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_val</span>[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">,</span><br><span class="line">  <span class="title function_">empty</span>(): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="variable language_">this</span>.<span class="property">_val</span>.<span class="property">length</span> === <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<table>
<thead>
<tr>
<th>Language</th>
<th>Runtime</th>
<th>Beats</th>
<th>Memory Usage</th>
<th>Beats</th>
</tr>
</thead>
<tbody>
<tr>
<td>Java</td>
<td>0 ms</td>
<td>100%</td>
<td>39.8 MB</td>
<td>99.19%</td>
</tr>
<tr>
<td>TypeScript</td>
<td>89 ms</td>
<td>69.74%</td>
<td>43.1 MB</td>
<td>49.67%</td>
</tr>
</tbody>
</table>
<p><img src="https://i.imgur.com/q5zeZPR.png" alt="score-image" /></p>
<!-- ##### 參考資料

+ [discuss]

[discuss]: https://leetcode.com/problems/house-robber/discuss/156523/From-good-to-great.-How-to-approach-most-of-DP-problems. -->
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Data Structure I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Stack</tag>
        <tag>Queue</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]242. ValidAnagram</title>
    <url>/2022/06/07/leetcode/Data%20Structure/Data%20Structure%20I/242-valid-anagram/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/05/30/leetcode/Data%20Structure/Data%20Structure%20I/starting-write-data-structure-i-note/">Data Structure I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Data Structure I</code> 的第六天第三個題目，總共有三題。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 1小時</li>
<li><a href="https://leetcode.com/problems/valid-anagram/">題目</a></li>
</ul>
<p>傳入兩個字串 <code>s</code> 與 <code>t</code> ，如果 <code>s</code> 是 <code>t</code> 的字謎的話，回傳 <code>true</code> ，如果不是，回傳 <code>false</code> 。</p>
<span id="more"></span>
<blockquote>
<p><a href="https://zh.wikipedia.org/zh-tw/%E6%98%93%E4%BD%8D%E6%9E%84%E8%AF%8D%E6%B8%B8%E6%88%8F">字謎(<code>anagram</code>)</a>: 是指將原本的詞字母重組後得到另一個詞。</p>
</blockquote>
<details><summary>點我開啟限制與範例</summary>
<pre>
<p><strong>限制:</strong></p>
<ul>
<li><code>1 &lt;= s.length, t.length &lt;= 5 * 104</code></li>
<li><code>s</code> and <code>t</code> consist of lowercase English letters.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;anagram&quot;, t = &quot;nagaram&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;rat&quot;, t = &quot;car&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>使用類似 383. Ransom Note 的做法，先遍歷一次 <code>s</code> 做出 <code>s</code> 的 <code>HashTable</code> ，然後再遍歷一次 <code>t</code> 刪除值，如果刪光了就回傳 <code>true</code> ，如果刪到一半沒得刪那就回傳 <code>false</code> 。</p>
<h2 id="程式碼"><a class="markdownIt-Anchor" href="#程式碼"></a> 程式碼</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">t</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isAnagram = <span class="keyword">function</span> (<span class="params">s, t</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (s.<span class="property">length</span> != t.<span class="property">length</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> sMap = <span class="keyword">new</span> <span class="title class_">Map</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sMap.<span class="title function_">get</span>(s[i]) != <span class="literal">undefined</span>) &#123;</span><br><span class="line">            sMap.<span class="title function_">set</span>(s[i], sMap.<span class="title function_">get</span>(s[i]) + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sMap.<span class="title function_">set</span>(s[i], <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; t.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sMap.<span class="title function_">get</span>(t[i])) &#123;</span><br><span class="line">            sMap.<span class="title function_">set</span>(t[i], sMap.<span class="title function_">get</span>(t[i]) - <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/vedoT7B.png" alt="" /></p>
<details style='display:none;'><summary>點我開啟舊寫法/失敗寫法</summary>
<pre>
<p></pre></details></p>
<!-- ##### 參考資料 -->
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Data Structure I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Hash Table</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]350. Intersection of Two Arrays II</title>
    <url>/2022/06/01/leetcode/Data%20Structure/Data%20Structure%20I/350_Intersection_of_Two_Arrays_II/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/05/30/leetcode/Data%20Structure/Data%20Structure%20I/starting-write-data-structure-i-note/">Data Structure I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Data Structure I</code> 的第三天第一個題目，總共有兩個。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 1小時</li>
<li><a href="https://leetcode.com/problems/intersection-of-two-arrays-ii/">題目</a></li>
</ul>
<p>傳入兩個陣列，回傳這兩個陣列的交集，回傳值不用排序。</p>
<p><strong>限制:</strong></p>
<ul>
<li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li>
<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [1,2,2,1], nums2 = [2,2]</span><br><span class="line">Output: [2,2]</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]</span><br><span class="line">Output: [4,9]</span><br><span class="line">Explanation: [9,4] is also accepted.</span><br></pre></td></tr></table></figure>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>使用 Two Pointers 就可以解決這個問題。</p>
<ol>
<li>把兩個陣列排序好</li>
<li>找出比較小的那個陣列，為主要陣列 <code>mainArr</code> (主要陣列跑完就可以得到所有答案了)，另一個為比較陣列 <code>compArr</code></li>
<li>比較指標
<ul>
<li>如果指標相同，那就把值加進 Result ，然後把兩個指標都往後推一位。</li>
<li>如果 <code>mainArr</code> 值比較大，那就把 <code>compArr</code> 加一，然後把迴圈加一(因為主要陣列的值沒有用到)然後繼續比較。</li>
<li>相反亦同，但是不用把迴圈加一了， 因為這是比較用的陣列。</li>
</ul>
</li>
</ol>
<h2 id="程式碼"><a class="markdownIt-Anchor" href="#程式碼"></a> 程式碼</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums2</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">var</span> intersect = <span class="keyword">function</span> (<span class="params">nums1, nums2</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> mainIndex = <span class="number">0</span>,</span><br><span class="line">        compIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> resultArr = [];</span><br><span class="line"></span><br><span class="line">    nums1 = nums1.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;);</span><br><span class="line">    nums2 = nums2.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// console.log(&quot;nums1: &quot;, nums1)</span></span><br><span class="line">    <span class="comment">// console.log(&quot;nums2: &quot;, nums2)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nums1.<span class="property">length</span> &lt; nums2.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nums1.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// console.log(&quot;mainIndex: &quot; + mainIndex)</span></span><br><span class="line">            <span class="comment">// console.log(&quot;compIndex: &quot; + compIndex)</span></span><br><span class="line">            <span class="comment">// 如果指標相同，那就把值加進 Result ，然後把兩個指標都往後推一位。</span></span><br><span class="line">            <span class="keyword">if</span> (nums1[mainIndex] === nums2[compIndex]) &#123;</span><br><span class="line">                resultArr.<span class="title function_">push</span>(nums1[mainIndex]);</span><br><span class="line">                mainIndex += <span class="number">1</span>;</span><br><span class="line">                compIndex += <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// 如果 `mainArr` 值比較大，那就把 `compArr` 加一，然後把迴圈加一(因為值沒有找到)然後繼續比較。</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums1[mainIndex] &gt; nums2[compIndex]) &#123;</span><br><span class="line">                compIndex += <span class="number">1</span>;</span><br><span class="line">                i--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums1[mainIndex] &lt; nums2[compIndex]) &#123;</span><br><span class="line">                mainIndex += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; nums2.<span class="property">length</span>; j++) &#123;</span><br><span class="line">            <span class="comment">// console.log(&quot;mainIndex: &quot; + mainIndex)</span></span><br><span class="line">            <span class="comment">// console.log(&quot;compIndex: &quot; + compIndex)</span></span><br><span class="line">            <span class="keyword">if</span> (nums2[mainIndex] === nums1[compIndex]) &#123;</span><br><span class="line">                resultArr.<span class="title function_">push</span>(nums2[mainIndex]);</span><br><span class="line">                mainIndex += <span class="number">1</span>;</span><br><span class="line">                compIndex += <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums2[mainIndex] &gt; nums1[compIndex]) &#123;</span><br><span class="line">                compIndex += <span class="number">1</span>;</span><br><span class="line">                j--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums2[mainIndex] &lt; nums1[compIndex]) &#123;</span><br><span class="line">                mainIndex += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultArr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/ihYYNK2.png" alt="" /></p>
<!-- ##### 參考資料 -->]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Data Structure I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Two Pointers</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]36. Valid Sudoku</title>
    <url>/2022/06/06/leetcode/Data%20Structure/Data%20Structure%20I/36-Valid-Sudoku/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/05/30/leetcode/Data%20Structure/Data%20Structure%20I/starting-write-data-structure-i-note/">Data Structure I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Data Structure I</code> 的第五天第一個題目，總共有兩題。</p>
<ul>
<li>難度: <code>Medium</code></li>
<li>花費時間: 1小時</li>
<li><a href="https://leetcode.com/problems/valid-sudoku/">題目</a></li>
</ul>
<p>傳入一個 <code>9X9 Sudoku board</code> (9x9 數獨)，然後你要判斷傳入的數獨是否合法，合法傳出 <code>true</code> ， 不合法傳出 <code>false</code> 。</p>
<span id="more"></span>
<p>合法判斷:</p>
<ol>
<li>每一行的 1-9 數字都不能重複，而要剛好可以填滿 1-9 。</li>
<li>每一列的 1-9 數字都不能重複，而要剛好可以填滿 1-9 。</li>
<li>每 <code>3X3 sub-boxes</code> 的 1-9 數字都不能重複，而要剛好可以填滿 1-9 。</li>
</ol>
<blockquote>
<p>數獨可以是合法但是無解的，本題是要判斷合不合法，不用判斷有沒有解。</p>
</blockquote>
<details><summary>點我開啟限制與範例</summary>
<pre>
<p><strong>限制:</strong></p>
<ul>
<li><code>board.length == 9</code></li>
<li><code>board[i].length == 9</code></li>
<li><code>board[i][j]</code> is a digit <code>1-9</code> or <code>'.'</code>.</li>
</ul>
<p><strong>Example 1:</strong></p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png" alt="" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: board = </span><br><span class="line">[[&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;]</span><br><span class="line">,[&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;]</span><br><span class="line">,[&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: board = </span><br><span class="line">[[&quot;8&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;]</span><br><span class="line">,[&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;]</span><br><span class="line">,[&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: 左上角 3x3 的方格內有重複的 8 。</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>可以使用 JS 的 <code>Set</code> ， <code>Set</code> 的功能是可以存入不重複的值，然後再用 <code>Set.prototype.has()</code> 這個函式去判斷是否有存在值，效用類似 JS 裡的 <code>Array.prototype.indexOf() = -1</code> 。</p>
<p>遍歷一次陣列，在遍歷的同時就把每個值的資料存入 <code>Set</code> 裡 ，要注意幾件事:</p>
<ol>
<li>每個值同時都是一行、一列、一個 <code>sub-boxes</code> 的值，所以要存入三次，判斷三次。</li>
<li>避開值為 . 的欄位。</li>
</ol>
<h2 id="程式碼"><a class="markdownIt-Anchor" href="#程式碼"></a> 程式碼</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">character[][]</span>&#125; <span class="variable">board</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isValidSudoku = <span class="keyword">function</span> (<span class="params">board</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> chkSet = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][j] != <span class="string">&#x27;.&#x27;</span>) &#123; <span class="comment">// 避開值為 . 的欄位。</span></span><br><span class="line">                <span class="comment">// 判斷是否有重複(chkSet 內已經有值) 就回傳 false 。</span></span><br><span class="line">                <span class="keyword">if</span> (chkSet.<span class="title function_">has</span>(j + <span class="string">&#x27;row&#x27;</span> + board[i][j]) ||</span><br><span class="line">                    chkSet.<span class="title function_">has</span>(i + <span class="string">&#x27;col&#x27;</span> + board[i][j]) ||</span><br><span class="line">                    chkSet.<span class="title function_">has</span>(<span class="built_in">parseInt</span>(i / <span class="number">3</span>) + <span class="string">&quot;:&quot;</span> + <span class="built_in">parseInt</span>(j / <span class="number">3</span>) + <span class="string">&#x27;box&#x27;</span> + board[i][j])) &#123;</span><br><span class="line">                    <span class="comment">// console.log((j + &#x27;row&#x27; + board[i][j]) + chkSet.has(j + &#x27;row&#x27; + board[i][j]));</span></span><br><span class="line">                    <span class="comment">// console.log((i + &#x27;col&#x27; + board[i][j]) + chkSet.has(i + &#x27;col&#x27; + board[i][j]));</span></span><br><span class="line">                    <span class="comment">// console.log((parseInt(i / 3) + &quot;:&quot; + parseInt(j / 3) + &#x27;box&#x27; + board[i][j]) + chkSet.has(parseInt(i / 3) + parseInt(j / 3) + &#x27;box&#x27; + board[i][j]));</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 如果通過判斷，就把這次的值加進去</span></span><br><span class="line">                chkSet.<span class="title function_">add</span>(j + <span class="string">&#x27;row&#x27;</span> + board[i][j]); <span class="comment">// ex: 0row5false</span></span><br><span class="line">                chkSet.<span class="title function_">add</span>(i + <span class="string">&#x27;col&#x27;</span> + board[i][j]); <span class="comment">// ex: 0col5false</span></span><br><span class="line">                chkSet.<span class="title function_">add</span>(<span class="built_in">parseInt</span>(i / <span class="number">3</span>) + <span class="string">&quot;:&quot;</span> + <span class="built_in">parseInt</span>(j / <span class="number">3</span>) + <span class="string">&#x27;box&#x27;</span> + board[i][j]); <span class="comment">// ex: 0:0box5false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/SwMATrw.png" alt="" /></p>
<!-- ##### 參考資料 -->]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Data Structure I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]383. Ransom Note</title>
    <url>/2022/06/07/leetcode/Data%20Structure/Data%20Structure%20I/383-ransom-note/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/05/30/leetcode/Data%20Structure/Data%20Structure%20I/starting-write-data-structure-i-note/">Data Structure I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>每日一題剛好寫到這題，於是嘗試使用 Java 重寫。</p>
<p>-------------底下原文---------------</p>
<p>這是 <code>Data Structure I</code> 的第六天第二個題目，總共有三題。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 1小時半</li>
<li><a href="https://leetcode.com/problems/ransom-note/">題目</a></li>
</ul>
<p>給你兩個字串 <code>ransomNote</code> 以及 <code>magazine</code> ，如果可以用 <code>magazine</code> 裡的字符構建出 <code>ransomNote</code><br />
那麼就回傳 <code>true</code> ， 不行就回傳 <code>false</code> 。</p>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
<pre>
<p><strong>限制:</strong></p>
<ul>
<li><code>1 &lt;= ransomNote.length, magazine.length &lt;= 105</code></li>
<li><code>ransomNote</code> and <code>magazine</code> 只會有小寫英文字母。</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: ransomNote = &quot;a&quot;, magazine = &quot;b&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: ransomNote = &quot;aa&quot;, magazine = &quot;ab&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: ransomNote = &quot;aa&quot;, magazine = &quot;aab&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<h3 id="js-object-做法"><a class="markdownIt-Anchor" href="#js-object-做法"></a> JS: Object 做法</h3>
<p>建立一個 Object 如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    magazine 字串內的每個字符:字符出現次數</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>遍歷 <code>ransomNote</code> 只要有字符就把字符數減一，沒有就回傳 <code>false</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">ransomNote</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">magazine</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> canConstruct = <span class="keyword">function</span> (<span class="params">ransomNote, magazine</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> countObj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先遍歷 magazine ，建立字符集</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> magazine) &#123;</span><br><span class="line">        <span class="comment">// 如果字符已經存在，那就加一</span></span><br><span class="line">        <span class="keyword">if</span> (countObj[magazine[i]]) &#123;</span><br><span class="line">            countObj[magazine[i]]++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            countObj[magazine[i]] = <span class="number">1</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍歷 ransomNote </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> ransomNote) &#123;</span><br><span class="line">        <span class="keyword">if</span> (countObj[ransomNote[i]] &amp;&amp; countObj[ransomNote[i]] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            countObj[ransomNote[i]]--</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="java-hashmap-做法"><a class="markdownIt-Anchor" href="#java-hashmap-做法"></a> Java: HashMap 做法</h3>
<p>基本邏輯跟 JS: Object 一樣，只是換成 HashMap 實現</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canConstruct</span><span class="params">(String ransomNote, String magazine)</span> &#123;</span><br><span class="line">    HashMap&lt;Integer, Integer&gt; chkMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Integer&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 先遍歷一次建立 Map</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ransomNote.length(); i++) &#123;</span><br><span class="line">        <span class="comment">// char to int</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ele</span> <span class="operator">=</span> ransomNote.charAt(i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果 map 裡已經有值，那就把值往上加一，沒有就建立</span></span><br><span class="line">        chkMap.put(ele, (chkMap.get(ele) != <span class="literal">null</span>) ? (chkMap.get(ele) + <span class="number">1</span>) : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 再遍歷一次刪 Map 裡的值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; magazine.length(); i++) &#123;</span><br><span class="line">        <span class="comment">// char to int</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ele</span> <span class="operator">=</span> magazine.charAt(i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果還有值，就把值減一，如果值 &lt;= 0 就刪掉這個 key</span></span><br><span class="line">        <span class="keyword">if</span> (chkMap.get(ele) != <span class="literal">null</span>) &#123;</span><br><span class="line">            chkMap.put(ele, chkMap.get(ele) - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (chkMap.get(ele) &lt;= <span class="number">0</span>) chkMap.remove(ele);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 檢查如果 Map 空了就回傳</span></span><br><span class="line">        <span class="keyword">if</span> (chkMap.isEmpty()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 整塊跑完還沒空就傳 false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p>成績不是很理想，一定有更好的做法，以後再來把他補完吧~</p>
<p><img src="https://i.imgur.com/ougIfkY.png" alt="" /></p>
<details><summary>點我開啟舊寫法/失敗寫法</summary>
<pre>
<ul>
<li>筆記</li>
</ul>
<p>把 <code>ransomNote</code> 裡的每個字符都拉出來找有沒有在 <code>magazine</code> 裡，<br />
有的話就兩邊都刪掉。<br />
沒有的話就直接回傳 <code>false</code> 。</p>
<ul>
<li>程式碼</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">ransomNote</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">magazine</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> canConstruct = <span class="keyword">function</span>(<span class="params">ransomNote, magazine</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ransomNote.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (magazine.<span class="title function_">indexOf</span>(ransomNote[i]) != -<span class="number">1</span> ) &#123;</span><br><span class="line">          magazine = magazine.<span class="title function_">replace</span>(ransomNote[i],<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>成績</li>
</ul>
<p>time out ，所以這個方法失敗了</p>
<p></pre></details></p>
<h5 id="參考資料"><a class="markdownIt-Anchor" href="#參考資料"></a> 參考資料</h5>
<p><a href="https://leetcode.com/problems/ransom-note/discuss/2119993/JS-Solution-Runtime-90.53-faster">JS Solution - Runtime 90.53% faster</a></p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Data Structure I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]387. First Unique Character in a String</title>
    <url>/2022/06/07/leetcode/Data%20Structure/Data%20Structure%20I/387-first-unique-character-in-a-string/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/05/30/leetcode/Data%20Structure/Data%20Structure%20I/starting-write-data-structure-i-note/">Data Structure I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Data Structure I</code> 的第六天第一個題目，總共有三題。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 1小時</li>
<li><a href="https://leetcode.com/problems/first-unique-character-in-a-string/">題目</a></li>
</ul>
<p>給你一個字串，找到裡面第一個沒有重複的字並且回傳他的 <code>index</code> ，如果不存在，那就回傳 <code>-1</code></p>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
<pre>
<p><strong>限制:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 105</code></li>
<li><code>s</code> consists of only lowercase English letters.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;leetcode&quot;</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;loveleetcode&quot;</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;aabb&quot;</span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>解題思路是遍歷一次陣列把所有的子字符跟他的 index 都放在 Object 裡做比較，應該有更好的做法。</p>
<!-- TODO -->
<p>建立一個 Object 存放如下資料:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    字串內的每個子字符:子字符的 index</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>寫一個迴圈遍歷字串:</p>
<ol>
<li>每遇到一個文字就放入 Object</li>
<li>比較當前 index 跟 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf">String.prototype.indexOf()</a>
<ul>
<li>如果不一樣: Object 裡的值就改成 -1</li>
<li>如果一樣: 不做事<br />
迴圈結束</li>
</ul>
</li>
</ol>
<ul>
<li>如果 Object 裡還有資料: 回傳他的 index</li>
<li>如果沒有: 回傳 -1</li>
</ul>
<h2 id="程式碼"><a class="markdownIt-Anchor" href="#程式碼"></a> 程式碼</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> firstUniqChar = <span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> compareObj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (compareObj[s[i]] != <span class="literal">undefined</span> &amp;&amp; compareObj[s[i]] != i) &#123;</span><br><span class="line">            compareObj[s[i]] = -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            compareObj[s[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// console.log(&#x27;i: &#x27; + i ,compareObj)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> compareObj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (compareObj[i] != -<span class="number">1</span>) <span class="keyword">return</span> compareObj[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/FD5C6LD.png" alt="" /></p>
<!-- ##### 參考資料 -->]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Data Structure I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]53. Maximum Subarray</title>
    <url>/2022/05/30/leetcode/Data%20Structure/Data%20Structure%20I/53_Maximum_Subarray/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/05/30/leetcode/Data%20Structure/Data%20Structure%20I/starting-write-data-structure-i-note/">Data Structure I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Data Structure I</code> 的第一天第二個題目，總共有兩個。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 1小時</li>
<li><a href="https://leetcode.com/problems/maximum-subarray/">題目</a></li>
</ul>
<p>輸入一個包含數字的陣列，找出裡面總和最大的 <code>subarray</code> ，並回傳。</p>
<p><strong>限制:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 10^5</code></li>
<li><code>-10^4 &lt;= nums[i] &lt;= 10^4</code></li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [-2,1,-3,4,-1,2,1,-5,4]</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: [4,-1,2,1]</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [5,4,-1,7,8]</span><br><span class="line">Output: 23</span><br></pre></td></tr></table></figure>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>自己想了大概半小時，後來參考了評論區的做法。<br />
時間複雜度為: <code>O(n)</code><br />
重點在於最大值一定會是原陣列裡某個特定的起點以及終點，那</p>
<ul>
<li>起點以前的值相加一定會是負數(因為是負數才會導致最大總和變小)</li>
<li>終點以後的值也是同理，一定是負數。<br />
所以做法是</li>
</ul>
<ol>
<li>如果前兩個值相加是負數，那就把第二個值設為新的起點，反覆做直到不會是負數，然後把現在的總和放入 <code>currentSum</code> 及 <code>maxSum</code></li>
<li>把 <code>currentSum</code> 跟後面那個值一樣做比較，如果後面的值比 <code>currentSum</code> 大，那就再設定新的起點。</li>
<li>後面就沒有特別找終點，單純把數值加上去，如果有大過 <code>maxSum</code> 就覆蓋過去。</li>
<li>最後回傳。</li>
</ol>
<h2 id="程式碼"><a class="markdownIt-Anchor" href="#程式碼"></a> 程式碼</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">var</span> maxSubArray = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> currentSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> maxSum = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        currentSum = <span class="title class_">Math</span>.<span class="title function_">max</span>((currentSum + nums[i]), nums[i]);</span><br><span class="line">        maxSum = <span class="title class_">Math</span>.<span class="title function_">max</span>(currentSum, maxSum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxSum</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/bGaqF9C.png" alt="" /></p>
<!-- ##### 參考資料 -->
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Data Structure I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]566. Reshape the Matrix</title>
    <url>/2022/06/02/leetcode/Data%20Structure/Data%20Structure%20I/566_Reshape_the_Matrix/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/05/30/leetcode/Data%20Structure/Data%20Structure%20I/starting-write-data-structure-i-note/">Data Structure I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Data Structure I</code> 的第四天第二個題目，總共有兩題。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 1小時</li>
<li><a href="https://leetcode.com/problems/reshape-the-matrix/">題目</a></li>
</ul>
<blockquote>
<p>在 MATLAB 裡有一個很好用的 function 叫做 <code>reshape</code> ，用途是把一個 <code>m x n matrix</code> 轉換成另一個不同的格式，但是資料是一樣的。</p>
</blockquote>
<span id="more"></span>
<p>傳入一個 <code>m x n matrix</code> 還有兩個數字，第一個數字代表 rows 的長度，第二個數字代表 columns 的長度，回傳轉換後的 matrix</p>
<details><summary>點我開啟限制與範例</summary>
<pre>
<p><strong>限制:</strong></p>
<ul>
<li>m == mat.length</li>
<li>n == mat[i].length</li>
<li>1 &lt;= m, n &lt;= 100</li>
<li>-1000 &lt;= mat[i][j] &lt;= 1000</li>
<li>1 &lt;= r, c &lt;= 300</li>
</ul>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/04/24/reshape1-grid.jpg" alt="" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: mat = [[1,2],[3,4]], r = 1, c = 4</span><br><span class="line">Output: [[1,2,3,4]]</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/04/24/reshape2-grid.jpg" alt="" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: mat = [[1,2],[3,4]], r = 2, c = 4</span><br><span class="line">Output: [[1,2],[3,4]]</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>原本陣列長怎樣不重要，只要陣列的 length 一樣，那就可以回傳他想要的東西。</p>
<p>這個題目我把他拆成幾部份:</p>
<h4 id="1-例外處理"><a class="markdownIt-Anchor" href="#1-例外處理"></a> 1. 例外處理</h4>
<p>比較 <code>mat</code> 跟 <code>r</code> * <code>c</code> 有沒有一樣，如果不一樣，就直接回傳原陣列。</p>
<h4 id="2-扁平化陣列"><a class="markdownIt-Anchor" href="#2-扁平化陣列"></a> 2. 扁平化陣列</h4>
<p>使用 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/flat"><code>Array.prototype.flat()</code></a> 攤平陣列</p>
<h4 id="3-放入資料"><a class="markdownIt-Anchor" href="#3-放入資料"></a> 3. 放入資料</h4>
<p>把攤平後的陣列塞進他想要的 matrix 裡，然後回傳。</p>
<h2 id="程式碼"><a class="markdownIt-Anchor" href="#程式碼"></a> 程式碼</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[][]</span>&#125; <span class="variable">mat</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">r</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">c</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> matrixReshape = <span class="keyword">function</span> (<span class="params">mat, r, c</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> reshapedMat = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> flatedMat = mat.<span class="title function_">flat</span>(<span class="title class_">Infinity</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (flatedMat.<span class="property">length</span> != r * c) <span class="keyword">return</span> mat;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; r; i++) &#123;</span><br><span class="line">        reshapedMat.<span class="title function_">push</span>([]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; c; j++) &#123;</span><br><span class="line">            reshapedMat[i].<span class="title function_">push</span>(flatedMat.<span class="title function_">shift</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> reshapedMat;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/ARIrwT2.png" alt="" /></p>
<!-- ##### 參考資料 -->]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Data Structure I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]74. Search a 2D Matrix</title>
    <url>/2022/06/06/leetcode/Data%20Structure/Data%20Structure%20I/74-Search-a-2D-Matrix/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/05/30/leetcode/Data%20Structure/Data%20Structure%20I/starting-write-data-structure-i-note/">Data Structure I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Data Structure I</code> 的第五天第二個題目，總共有兩題。</p>
<ul>
<li>難度: <code>Medium</code></li>
<li>花費時間: 10分鐘</li>
<li><a href="https://leetcode.com/problems/search-a-2d-matrix/">題目</a></li>
</ul>
<p>傳入一個 <code>mxn matrix</code> 與一個目標 ，你要寫出一個盡量高效的算法在 <code>mxn matrix</code> 裡找出他要的目標，並且只要回傳目標是否存在， <code>mxn matrix</code> 有以下特性:</p>
<ul>
<li><code>mxn matrix</code> 裡的所有值都是由左到右順序排序的。</li>
<li>每一行的第一個值都會比上一行的最後一個值大。</li>
</ul>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
<pre>
<p><strong>限制:</strong></p>
<ul>
<li><code>m == matrix.length</code></li>
<li><code>n == matrix[i].length</code></li>
<li><code>1 &lt;= m, n &lt;= 100</code></li>
<li><code>-104 &lt;= matrix[i][j], target &lt;= 104</code></li>
</ul>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/10/05/mat.jpg" alt="example-image-1" /></p>
<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/10/05/mat2.jpg" alt="example-image-2" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>看到他上面的特性我就很有想法，遍歷外圈陣列，比較每個內圈陣列的最後一個值，直到那個值比 <code>target</code> 大，再進入內圈找有沒有值，如果沒有值就回傳 <code>true</code> ，有就回傳 <code>false</code> 。</p>
<h4 id="範例"><a class="markdownIt-Anchor" href="#範例"></a> 範例</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">matrix = </span><br><span class="line">[[1,3,5,7],</span><br><span class="line">[10,11,16,20],</span><br><span class="line">[23,30,34,60]], </span><br><span class="line">target = 11</span><br></pre></td></tr></table></figure>
<p>我們要在這個 matrix 裡面找 11:</p>
<ol>
<li>第一個陣列最後一個值: 7</li>
<li>7 &lt; 11 =&gt; 跳過這個陣列</li>
<li>第二個陣列最後一個值: 20</li>
<li>20 &gt; 11 =&gt; 遍歷這個陣列:
<ul>
<li>如果有找到 11 =&gt; 回傳 <code>true</code></li>
<li>如果沒有找到 11 =&gt; 回傳 <code>false</code></li>
</ul>
</li>
</ol>
<h2 id="程式碼"><a class="markdownIt-Anchor" href="#程式碼"></a> 程式碼</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[][]</span>&#125; <span class="variable">matrix</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> searchMatrix = <span class="keyword">function</span>(<span class="params">matrix, target</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; matrix.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix[i][matrix[i].<span class="property">length</span> - <span class="number">1</span>] == target) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (matrix[i][matrix[i].<span class="property">length</span> - <span class="number">1</span>] &gt; target)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j =  <span class="number">0</span>; j &lt; matrix[i].<span class="property">length</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j] == target) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/tSDmWAX.png" alt="" /></p>
<!-- ##### 參考資料 -->]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Data Structure I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]88. Merge Sorted Array</title>
    <url>/2022/05/31/leetcode/Data%20Structure/Data%20Structure%20I/88_Merge_Sorted_Array/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/05/30/leetcode/Data%20Structure/Data%20Structure%20I/starting-write-data-structure-i-note/">Data Structure I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>Data Structure I</code> 的第二天第二個題目，總共有兩個。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 3小時</li>
<li><a href="https://leetcode.com/problems/merge-sorted-array/">題目</a></li>
</ul>
<p>輸入兩個由小到大排序好的陣列及各自的長度，把第二個陣列的值放入第一個陣列中並且排序好即可，不用回傳。</p>
<p>第一個陣列後面已經按照結果大小把0補齊了，方便原地計算 <code>in-place</code></p>
<p><strong>限制:</strong></p>
<ul>
<li><code>nums1.length == m + n</code></li>
<li><code>nums2.length == n</code></li>
<li><code>0 &lt;= m, n &lt;= 200</code></li>
<li><code>1 &lt;= m + n &lt;= 200</code></li>
<li><code>-10^9 &lt;= nums1[i], nums2[j] &lt;= 10^9</code></li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3</span><br><span class="line">Output: [1,2,2,3,5,6]</span><br><span class="line">Explanation: The arrays we are merging are [1,2,3] and [2,5,6].</span><br><span class="line">The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [1], m = 1, nums2 = [], n = 0</span><br><span class="line">Output: [1]</span><br><span class="line">Explanation: The arrays we are merging are [1] and [].</span><br><span class="line">The result of the merge is [1].</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [0], m = 0, nums2 = [1], n = 1</span><br><span class="line">Output: [1]</span><br><span class="line">Explanation: The arrays we are merging are [] and [1].</span><br><span class="line">The result of the merge is [1].</span><br><span class="line">Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.</span><br></pre></td></tr></table></figure>
<p><strong>Follow-Up:</strong> 這道題時間複雜度可以寫到 <code>O(m + n)</code></p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>這題其實就是 <code>Marge Sort</code> 最後合併的部分，所以我們就使用 <code>Marge Sort</code> 的方式，比較每個陣列的第一筆資料，比較小的放入 <code>nums1</code> 比較大的繼續比較，直到全部比較完，這樣就完成時間複雜度 <code>O(m + n)</code> 啦。</p>
<p>實際花費的時間比想像中的久很多，最後卡在 <code>in-place</code> 做不出來，所以只好去評論區看看大家是怎麼寫的。</p>
<h2 id="程式碼"><a class="markdownIt-Anchor" href="#程式碼"></a> 程式碼</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">m</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums2</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125; Do not return anything, modify nums1 in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> merge = <span class="keyword">function</span> (<span class="params">nums1, m, nums2, n</span>) &#123;</span><br><span class="line">    m -= <span class="number">1</span>;</span><br><span class="line">    n -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = nums1.<span class="property">length</span> -<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果這次比較 nums1 比 nums2 大，那就把 nums1 當前 index 的 element 取出來然後塞入 nums1 的當前 index</span></span><br><span class="line">        <span class="keyword">if</span> ( m &gt; -<span class="number">1</span> &amp;&amp; nums1[m] &gt;= nums2[n]) &#123;</span><br><span class="line">            nums1[i] = nums1[m];</span><br><span class="line">            m -= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果這次比較 nums2 比 nums1 大，那就把 nums2 當前 index 的 element 取出來然後塞入 nums1 的當前 index ，然後把 nums1 放進 nums2 原來的位置</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">            nums1[i] = nums2[n];</span><br><span class="line">            n -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/iWPgv0k.png" alt="" /></p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Data Structure I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]83. Remove Duplicates from Sorted List</title>
    <url>/2022/09/22/leetcode/Data%20Structure/Data%20Structure%20I/83-remove-duplicates-from-sorted-list/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/14/leetcode/Algorithm/Algorithm%20I/Starting-write-Algorithm-I-Note/#09-x2F-13-Day-12-Dynamic-Programming">Algorithm I 筆記撰寫計畫</a> 第八天第二題，共兩題。</p>
</blockquote>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 30 min</li>
<li>題目: <a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list/">83. Remove Duplicates from Sorted List</a></li>
</ul>
<p>給你一個 <code>Linked List</code> 的 <code>head</code> ，刪除所有重複的節點，然後回傳新的 <code>Linked List</code></p>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
<p><strong>限制:</strong></p>
<ul>
<li>The number of nodes in the list is in the range <code>[0, 300]</code>.</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
<li>The list is guaranteed to be <strong>sorted</strong> in ascending order.</li>
</ul>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/01/04/list1.jpg" alt="example-image-1" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: head = [1,1,2]</span><br><span class="line">Output: [1,2]</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/01/04/list2.jpg" alt="example-image-2" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: head = [1,1,2,3,3]</span><br><span class="line">Output: [1,2,3]</span><br></pre></td></tr></table></figure>
<p><strong>Definition for singly-linked list.</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">  <span class="attr">val</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">next</span>: <span class="title class_">ListNode</span> | <span class="literal">null</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">val?: <span class="built_in">number</span>, next?: ListNode | <span class="literal">null</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">val</span> = (val === <span class="literal">undefined</span> ? <span class="number">0</span> : val)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">next</span> = (next === <span class="literal">undefined</span> ? <span class="literal">null</span> : next)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>這題簡單的讓我們練習了一下 <code>Linked List</code></p>
<p>步驟如下</p>
<ol>
<li>遍歷 <code>List</code></li>
<li>每個 <code>Node</code> 都跟 <code>Node.next</code> 做比較
<ul>
<li>如果相等: 把 <code>Node.next</code> 指向 <code>Node.next.next</code> 重複直到不相等</li>
</ul>
</li>
<li>回傳 <code>Head</code></li>
</ol>
<p>TS iterative solution.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deleteDuplicates</span>(<span class="params">head: ListNode | <span class="literal">null</span></span>): <span class="title class_">ListNode</span> | <span class="literal">null</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> node = head;<span class="comment">// 當前節點</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍歷 list</span></span><br><span class="line">  <span class="keyword">while</span> (node?.<span class="property">next</span>) &#123;</span><br><span class="line">    <span class="comment">// 重複把 node.next 指向 node.next.next 直到 val 不相等</span></span><br><span class="line">    <span class="keyword">while</span> (node.<span class="property">next</span> &amp;&amp; node.<span class="property">val</span> === node.<span class="property">next</span>.<span class="property">val</span>) &#123;</span><br><span class="line">      node.<span class="property">next</span> = node.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    node = node.<span class="property">next</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> head;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Java recursive solution.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> ListNode <span class="title function_">deleteDuplicates</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    traverse(head);</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">traverse</span><span class="params">(ListNode node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span> || node.next == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (node.val == node.next.val) &#123;</span><br><span class="line">      node.next = node.next.next;</span><br><span class="line">      traverse(node);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      node = node.next;</span><br><span class="line">      traverse(node);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<table>
<thead>
<tr>
<th>Language</th>
<th>Runtime</th>
<th>Beats</th>
<th>Memory Usage</th>
<th>Beats</th>
</tr>
</thead>
<tbody>
<tr>
<td>Java</td>
<td>1 ms</td>
<td>80.63%</td>
<td>43.9 MB</td>
<td>73.27%</td>
</tr>
<tr>
<td>TypeScript</td>
<td>77 ms</td>
<td>95.35%</td>
<td>45.4 MB</td>
<td>22.74%</td>
</tr>
</tbody>
</table>
<p><img src="https://i.imgur.com/8bC4qQ9.png" alt="score-image" /></p>
<!-- ##### 參考資料

+ [discuss]

[discuss]: https://leetcode.com/problems/house-robber/discuss/156523/From-good-to-great.-How-to-approach-most-of-DP-problems. -->
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Data Structure I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Linked List</tag>
        <tag>Iteration</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]94. Binary Tree Inorder Traversal</title>
    <url>/2022/09/30/leetcode/Data%20Structure/Data%20Structure%20I/94-binary-tree-inorder-traversal/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/05/30/leetcode/Data%20Structure/Data%20Structure%20I/starting-write-data-structure-i-note/#09-x2F-27-Day-10-Tree">Algorithm I 筆記撰寫計畫</a> 第十天第二題，共三題。</p>
</blockquote>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 30 min</li>
<li>題目: <a href="https://leetcode.com/problems/binary-tree-inorder-traversal/">94. Binary Tree Inorder Traversal</a></li>
</ul>
<p>中續遍歷一個二元樹，然後把結果回傳。</p>
<span id="more"></span>
<details><summary>點我開啟限制與範例</summary>
<p><strong>限制:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
</ul>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg" alt="example-image-1" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = [1,null,2,3]</span><br><span class="line">Output: [1,3,2]</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = []</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = [1]</span><br><span class="line">Output: [1]</span><br></pre></td></tr></table></figure>
</details>
<!-- <details><summary>點我開啟思路</summary>

<p class="text-h2"> 思路 </p>

</details> -->
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>這題要練習樹的中序走訪，遵照以下步驟：</p>
<ol>
<li>有左子節點拿左子節點</li>
<li>沒有左子結點就退回去父節點，拿退回去的那個節點</li>
<li>拿右節點</li>
</ol>
<p>題目有要求要用迴圈的作法，所以遞迴跟迴圈各寫一個解答。</p>
<h3 id="recursive"><a class="markdownIt-Anchor" href="#recursive"></a> Recursive</h3>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">inorderTraversal</span>(<span class="params">root: TreeNode | <span class="literal">null</span>, result: <span class="built_in">number</span>[] = []</span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">  <span class="keyword">if</span> (root) &#123;</span><br><span class="line">    <span class="comment">// 有左節點找左節點</span></span><br><span class="line">    <span class="title function_">inorderTraversal</span>(root.<span class="property">left</span>, result);</span><br><span class="line">    <span class="comment">// 沒有左節點了就把當前值塞進去</span></span><br><span class="line">    result.<span class="title function_">push</span>(root.<span class="property">val</span>);</span><br><span class="line">    <span class="comment">// 找右節點</span></span><br><span class="line">    <span class="title function_">inorderTraversal</span>(root.<span class="property">right</span>, result);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="iterative"><a class="markdownIt-Anchor" href="#iterative"></a> iterative</h3>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">inorderTraversal</span>(<span class="params">root: TreeNode | <span class="literal">null</span></span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">  <span class="comment">// 答案陣列</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">result</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line">  <span class="comment">// 儲存走過的父節點</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">traverseds</span>: <span class="title class_">TreeNode</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 只要現在的 head 還有值，或是走過的節點還有值，就繼續跑</span></span><br><span class="line">  <span class="keyword">while</span> (root || traverseds.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 節點還有值，就把節點塞進去，然後往左走。</span></span><br><span class="line">    <span class="keyword">if</span> (root) &#123;</span><br><span class="line">      traverseds.<span class="title function_">push</span>(root);</span><br><span class="line">      root = root.<span class="property">left</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 當節點沒有值了，就把當前節點的上個節點的值拿出來，然後往右節點走。</span></span><br><span class="line">      root = traverseds.<span class="title function_">pop</span>()!;</span><br><span class="line">      result.<span class="title function_">push</span>(root.<span class="property">val</span>);</span><br><span class="line">      root = root.<span class="property">right</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<table>
<thead>
<tr>
<th>Language</th>
<th>Runtime</th>
<th>Beats</th>
<th>Memory Usage</th>
<th>Beats</th>
</tr>
</thead>
<tbody>
<tr>
<td>TS iterative</td>
<td>73 ms</td>
<td>90.15%</td>
<td>44.4 MB</td>
<td>53.69%</td>
</tr>
<tr>
<td>TS recursive</td>
<td>88 ms</td>
<td>73.51%</td>
<td>43.8 MB</td>
<td>96.60%</td>
</tr>
</tbody>
</table>
<p><img src="https://i.imgur.com/NnAlRoZ.png" alt="score-image" /></p>
<!-- ##### 參考資料

+ [discuss]

[discuss]: https://leetcode.com/problems/house-robber/discuss/156523/From-good-to-great.-How-to-approach-most-of-DP-problems. -->
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Data Structure I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Depth-First Search</tag>
        <tag>Tree</tag>
        <tag>Binary Tree</tag>
        <tag>Iteration</tag>
        <tag>Recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]Data Structure I 筆記撰寫計畫</title>
    <url>/2022/05/30/leetcode/Data%20Structure/Data%20Structure%20I/starting-write-data-structure-i-note/</url>
    <content><![CDATA[<blockquote>
<p>計畫: <a href="https://leetcode.com/study-plan/data-structure/?progress=6ofm59r">Data Structure I</a></p>
</blockquote>
<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2>
<p>以前有曾經想要跟著 LeetCode 做他的 <a href="https://leetcode.com/discuss/general-discussion/655704/">Daily Challenge</a> ，但是後來發現裡面有些題目對我來說難度太高了，導致我可能一題難的要做三四個小時，這樣的狀況持續了大概兩個月之後我覺得不行，應該要換個學習方法，所以我就找到了 LeetCode 有這個 <a href="https://leetcode.com/study-plan/">Study Plan</a> ，我覺得很適合我這種初學者，於是從今天開始就照著這個學習計畫每天學習並把做到的題目紀錄在這個 Blog 上！</p>
<ul>
<li>跟著進度每天做答，並記錄在這個 Blog 上。</li>
<li>如果半小時內沒有頭緒，就參考評論區的解法，力求半小時內解完一題！</li>
</ul>
<span id="more"></span>
<h2 id="0530-第一天"><a class="markdownIt-Anchor" href="#0530-第一天"></a> 05/30 第一天</h2>
<ul>
<li>Day1: Array
<ul>
<li>217. Contains Duplicate <code>Easy</code> <a href="https://leetcode.com/problems/contains-duplicate/">題目</a> <a href="/2022/05/30/leetcode/Data%20Structure/Data%20Structure%20I/217_Contains_Duplicate/">筆記</a></li>
<li>53. Maximum Subarray <code>Easy</code> <a href="https://leetcode.com/problems/maximum-subarray/">題目</a> <a href="/2022/05/30/leetcode/Data%20Structure/Data%20Structure%20I/53_Maximum_Subarray/">筆記</a></li>
</ul>
</li>
</ul>
<p>今天的兩題題目都是 <code>Easy</code> ，第一題算簡單，第二題想了很久沒有想到做法，於是參考了一下評論區，可能是因為第一天寫，總共花費的時間有點多，希望明天會有進步~~</p>
<h2 id="0531-第二天"><a class="markdownIt-Anchor" href="#0531-第二天"></a> 05/31 第二天</h2>
<ul>
<li>Day2: Array
<ul>
<li>1. Two Sum <code>Easy</code> <a href="https://leetcode.com/problems/two-sum/">題目</a> <a href="/2022/05/31/leetcode/Data%20Structure/Data%20Structure%20I/1_Two_Sum/">筆記</a></li>
<li>88. Merge Sorted Array <code>Easy</code> <a href="https://leetcode.com/problems/merge-sorted-array/">題目</a> <a href="/2022/05/31/leetcode/Data%20Structure/Data%20Structure%20I/88_Merge_Sorted_Array/">筆記</a></li>
</ul>
</li>
</ul>
<p>今天的兩題題目都是 <code>Easy</code> ，今天一樣花費了很多時間在解題，大概四小時，所以從今天起嘗試加入新規則，如果題目半小時沒有進展，就參考一下評論區的解法，力求快速的掌握解題手感！</p>
<h2 id="0601-第三天"><a class="markdownIt-Anchor" href="#0601-第三天"></a> 06/01 第三天</h2>
<ul>
<li>Day3: Array
<ul>
<li>350. Intersection of Two Arrays II <code>Easy</code> <a href="https://leetcode.com/problems/intersection-of-two-arrays-ii/">題目</a> <a href="/2022/06/01/leetcode/Data%20Structure/Data%20Structure%20I/350_Intersection_of_Two_Arrays_II/">筆記</a></li>
<li>121. Best Time to Buy and Sell Stock <code>Easy</code> <a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/">題目</a> <a href="/2022/06/01/leetcode/Data%20Structure/Data%20Structure%20I/121_Best_Time_to_Buy_and_Sell_Stock/">筆記</a></li>
</ul>
</li>
</ul>
<p>今天第一題算簡單，第二題算是我第一次接觸 <code>Dynamic Programming</code> ，所以卡了有點久，所幸最後算是有學到一點感覺~</p>
<h2 id="0602-第四天"><a class="markdownIt-Anchor" href="#0602-第四天"></a> 06/02 第四天</h2>
<ul>
<li>Day4: Array
<ul>
<li>118. Pascal’s Triangle <code>Easy</code> <a href="https://leetcode.com/problems/pascals-triangle/">題目</a> <a href="/2022/06/02/leetcode/Data%20Structure/Data%20Structure%20I/118_Pascal's_Triangle/">筆記</a></li>
<li>566. Reshape the Matrix <code>Easy</code> <a href="https://leetcode.com/problems/reshape-the-matrix/">題目</a> <a href="/2022/06/02/leetcode/Data%20Structure/Data%20Structure%20I/566_Reshape_the_Matrix/">筆記</a></li>
</ul>
</li>
</ul>
<p>今天我是先做第二題再做第一題，今天雖然提不太起勁做，但是第一題讓我第一次有真的只靠自己寫出 <code>Dynamic Programming</code> 的感覺，非常的棒，第二題的話，感覺他給的提示有點誤導，最後我有參考評論區，其實算是非常簡單。</p>
<h2 id="0606-第五天"><a class="markdownIt-Anchor" href="#0606-第五天"></a> 06/06 第五天</h2>
<ul>
<li>Day5: Array
<ul>
<li>36. Valid Sudoku <code>Medium</code> <a href="https://leetcode.com/problems/valid-sudoku/">題目</a> <a href="/2022/06/06/leetcode/Data%20Structure/Data%20Structure%20I/36-Valid-Sudoku/">筆記</a></li>
<li>74. Search a 2D Matrix <code>Medium</code> <a href="https://leetcode.com/problems/search-a-2d-matrix/">題目</a> <a href="/2022/06/06/leetcode/Data%20Structure/Data%20Structure%20I/74-Search-a-2D-Matrix/">筆記</a></li>
</ul>
</li>
</ul>
<p>距離上次寫這個計畫過了一個端午聯假，本來打算騎腳踏車上武嶺的，結果半路上被淋成了落湯雞zzz</p>
<p>今天是 Array 系列的最後一天，並且今天重磅祭出了兩題的 <code>Medium</code> ，但是實際做完的感覺… 好像沒有想像中的難嘛，<br />
我覺得歸根究底還是因為這些題目都是一些比較早期出的題目，所以雖然是 <code>Medium</code> 但是邏輯其實都很好去想像。</p>
<p>今天第一題有稍微參考下評論區，不然我只想得出暴力解，事實證明評論區的解法也挺暴力，但比我本來想的好看多了，<br />
第二題我花了10分鐘就做完了，出題者的邏輯還挺好猜的，今天解題很愉快~~</p>
<h2 id="0607-第六天"><a class="markdownIt-Anchor" href="#0607-第六天"></a> 06/07 第六天</h2>
<ul>
<li>Day6: String
<ul>
<li>387. First Unique Character in a String <code>Easy</code> <a href="https://leetcode.com/problems/first-unique-character-in-a-string/">題目</a> <a href="/2022/06/07/leetcode/Data%20Structure/Data%20Structure%20I/387-first-unique-character-in-a-string/">筆記</a></li>
<li>383. Ransom Note <code>Easy</code> <a href="https://leetcode.com/problems/ransom-note/">題目</a> <a href="/2022/06/07/leetcode/Data%20Structure/Data%20Structure%20I/383-ransom-note/">筆記</a></li>
<li>242. Valid Anagram <code>Easy</code> <a href="https://leetcode.com/problems/valid-anagram/">題目</a> <a href="/2022/06/07/leetcode/Data%20Structure/Data%20Structure%20I/242-valid-anagram/">筆記</a></li>
</ul>
</li>
</ul>
<p>今天是 String 系列的第一天(其實也是最後一天，明天變成 Linked List 了)，從今天開始很多題目都會變成一天三題，我要瘋啦！</p>
<p>今天三題都是差不多的模式，做出字串的 <code>Hash Table</code> ，然後再針對 <code>Hash Table</code> 去做處理。</p>
<p>第一題 <a href="/2022/06/07/leetcode/Data%20Structure/Data%20Structure%20I/387-first-unique-character-in-a-string/">387. First Unique Character in a String</a> 跟第二題 <a href="/2022/06/07/leetcode/Data%20Structure/Data%20Structure%20I/383-ransom-note/">383. Ransom Note</a> 我都是用 JS Object 去做 <code>Hash Table</code> ，<br />
第三題 <a href="/2022/06/07/leetcode/Data%20Structure/Data%20Structure%20I/242-valid-anagram/">242. Valid Anagram</a> 則是使用 JS Map ，三題最後出來的成績差異有點大，<br />
以後 <code>Hash Table</code> 我會盡量用 JS Map 來實做。</p>
<h2 id="0613-第七天"><a class="markdownIt-Anchor" href="#0613-第七天"></a> 06/13 第七天</h2>
<ul>
<li>Day7: Linked List
<ul>
<li>141. Linked List Cycle <code>Easy</code> <a href="https://leetcode.com/problems/linked-list-cycle/">題目</a> <a href="/2022/06/09/leetcode/Data%20Structure/Data%20Structure%20I/141-linked-list-cycle/">筆記</a></li>
<li>21. Merge Two Sorted Lists <code>Easy</code> <a href="https://leetcode.com/problems/merge-two-sorted-lists/">題目</a> <a href="/2022/06/10/leetcode/Data%20Structure/Data%20Structure%20I/21-merge-two-sorted-lists/">筆記</a></li>
<li>203. Remove Linked List Elements <code>Easy</code> <a href="https://leetcode.com/problems/remove-linked-list-elements/">題目</a> <a href="/2022/06/10/leetcode/Data%20Structure/Data%20Structure%20I/203-remove-linked-list-elements/">筆記</a></li>
</ul>
</li>
</ul>
<p>今天學的是 <a href="http://alrightchiu.github.io/SecondRound/linked-list-introjian-jie.html">Linked List</a> ，原理非常的好懂，但是實際在做的時候需要思路需要轉變一下，整體來說是非常有趣的資料節構。</p>
<h2 id="0922-day-8-linked-list"><a class="markdownIt-Anchor" href="#0922-day-8-linked-list"></a> 09/22 Day 8 Linked List</h2>
<ul>
<li>206. Reverse Linked List <code>Easy</code> <a href="https://leetcode.com/problems/reverse-linked-list/">題目</a> <a href="/2022/09/01/leetcode/Algorithm/Algorithm%20I/206-reverse-linked-list/">筆記</a></li>
<li>83. Remove Duplicates from Sorted List <code>Easy</code> <a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list/">題目</a> <a href="/2022/09/22/leetcode/Data%20Structure/Data%20Structure%20I/83-remove-duplicates-from-sorted-list/">筆記</a></li>
</ul>
<p>206. 之前在<a href="/2022/06/14/leetcode/Algorithm/Algorithm%20I/Starting-write-Algorithm-I-Note/">Algorithm I 筆記撰寫計畫</a>已經做過了~</p>
<h2 id="0923-day-9-linked-list"><a class="markdownIt-Anchor" href="#0923-day-9-linked-list"></a> 09/23 Day 9 Linked List</h2>
<ul>
<li>20. Valid Parentheses <code>Easy</code> <a href="https://leetcode.com/problems/valid-parentheses/">題目</a> <a href="/2022/09/22/leetcode/Data%20Structure/Data%20Structure%20I/20-valid-parentheses/">筆記</a></li>
<li>232. Implement Queue using Stacks <code>Easy</code> <a href="https://leetcode.com/problems/implement-queue-using-stacks/">題目</a> <a href="/2022/09/26/leetcode/Data%20Structure/Data%20Structure%20I/232-implement-queue-using-stacks/">筆記</a></li>
</ul>
<h2 id="0927-day-10-tree"><a class="markdownIt-Anchor" href="#0927-day-10-tree"></a> 09/27 Day 10 Tree</h2>
<ul>
<li>144. Binary Tree Preorder Traversal <code>Easy</code> <a href="https://leetcode.com/problems/binary-tree-preorder-traversal/">題目</a> <a href="/2022/09/27/leetcode/Data%20Structure/Data%20Structure%20I/144-binary-tree-preorder-traversal/">筆記</a></li>
<li>94. Binary Tree Inorder Traversal <code>Easy</code> <a href="https://leetcode.com/problems/binary-tree-inorder-traversal/">題目</a> <a href="/2022/09/30/leetcode/Data%20Structure/Data%20Structure%20I/94-binary-tree-inorder-traversal/">筆記</a></li>
<li>145. Binary Tree Postorder Traversal <code>Easy</code> <a href="https://leetcode.com/problems/binary-tree-postorder-traversal/">題目</a> <a href="/2022/10/03/leetcode/Data%20Structure/Data%20Structure%20I/145-binary-tree-postorder-traversal/">筆記</a></li>
</ul>
<h2 id="1005-day-11-tree"><a class="markdownIt-Anchor" href="#1005-day-11-tree"></a> 10/05 Day 11 Tree</h2>
<ul>
<li>102. Binary Tree Level Order Traversal <code>Easy</code> <a href="https://leetcode.com/problems/binary-tree-postorder-traversal/">題目</a> <a href="/2022/10/05/leetcode/Data%20Structure/Data%20Structure%20I/102-binary-tree-level-order-traversal/">筆記</a></li>
<li>104. Maximum Depth of Binary Tree <code>Easy</code> <a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/">題目</a> <a href="/2022/10/05/leetcode/Data%20Structure/Data%20Structure%20I/104-maximum-depth-of-binary-tree/">筆記</a></li>
<li>101. Symmetric Tree <code>Easy</code> 題目 筆記</li>
</ul>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Data Structure I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]1484. Group Sold Products By The Date</title>
    <url>/2022/06/30/leetcode/SQL/SQL%20I/1484-group-sold-products-by-the-date/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/27/leetcode/SQL/SQL%20I/Starting_write_SQL_I_note/">SQL I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>SQL I</code> 的第三天第二個題目，總共有三題。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 30</li>
<li><a href="https://leetcode.com/problems/group-sold-products-by-the-date/">題目</a></li>
</ul>
<p>老闆給你一張表 <code>Activities</code> ，裡面記載了他在某天賣出了什麼產品，他現在希望你針對這張表作出一張報表，符合以下格式…</p>
<span id="more"></span>
<p>Table: <code>Activities</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| sell_date   | date    |</span><br><span class="line">| product     | varchar |</span><br><span class="line">+-------------+---------+</span><br><span class="line">There is no primary key for this table, it may contain duplicates.</span><br><span class="line">Each row of this table contains the product name and the date it was sold in a market.</span><br></pre></td></tr></table></figure>
<p>格式如下:</p>
<ul>
<li>按照 sell_date 統計當天賣出多少產品，然後把賣出的產品放在 products 欄位。</li>
<li>一天同一件產品只計算一次。</li>
<li>products 欄位內的產品必須按照 lexicographically order 來排序。</li>
<li>整個 select 按照 sell_date 由小到大排序。</li>
</ul>
<p>lexicographically</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">Activities table:</span><br><span class="line">+------------+------------+</span><br><span class="line">| sell_date  | product     |</span><br><span class="line">+------------+------------+</span><br><span class="line">| 2020-05-30 | Headphone  |</span><br><span class="line">| 2020-06-01 | Pencil     |</span><br><span class="line">| 2020-06-02 | Mask       |</span><br><span class="line">| 2020-05-30 | Basketball |</span><br><span class="line">| 2020-06-01 | Bible      |</span><br><span class="line">| 2020-06-02 | Mask       |</span><br><span class="line">| 2020-05-30 | T-Shirt    |</span><br><span class="line">+------------+------------+</span><br><span class="line">Output: </span><br><span class="line">+------------+----------+------------------------------+</span><br><span class="line">| sell_date  | num_sold | products                     |</span><br><span class="line">+------------+----------+------------------------------+</span><br><span class="line">| 2020-05-30 | 3        | Basketball,Headphone,T-shirt |</span><br><span class="line">| 2020-06-01 | 2        | Bible,Pencil                 |</span><br><span class="line">| 2020-06-02 | 1        | Mask                         |</span><br><span class="line">+------------+----------+------------------------------+</span><br><span class="line">Explanation: </span><br><span class="line">For 2020-05-30, Sold items were (Headphone, Basketball, T-shirt), we sort them lexicographically and separate them by a comma.</span><br><span class="line">For 2020-06-01, Sold items were (Pencil, Bible), we sort them lexicographically and separate them by a comma.</span><br><span class="line">For 2020-06-02, the Sold item is (Mask), we just return it.</span><br></pre></td></tr></table></figure>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>這邊用到三個 <code>built-in functions</code> 分別是:</p>
<ul>
<li><a href="https://www.w3schools.com/sql/sql_count_avg_sum.asp">COUNT()</a>: 計算筆數</li>
<li><a href="https://www.w3resource.com/mysql/aggregate-functions-and-grouping/aggregate-functions-and-grouping-group_concat.php">GROUP_CONCAT()</a>: (這是 MySQL 特有的 function) 把 GROUP BY 的所有欄位用 <code>,</code> 組合起來。</li>
</ul>
<p>先 SELECT GROUP BY sell_date ，然後 product 的部分需要 DISTINCT ，因為一天同一件產品只計算一次。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    sell_date,</span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> product) <span class="keyword">as</span> num_sold, # 算出產品數量</span><br><span class="line">    GROUP_CONCAT(<span class="keyword">DISTINCT</span> product) <span class="keyword">as</span> products # 把當天賣出的產品列出來</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    Activities</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">    sell_date;</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/qbaUlsX.png" alt="" /></p>
<h5 id="參考資料"><a class="markdownIt-Anchor" href="#參考資料"></a> 參考資料</h5>
<p><a href="https://leetcode.com/problems/group-sold-products-by-the-date/discuss/692814/MySQL-Order-by-Product-name-AND-Sell-date">MySQL Order by Product name AND Sell date</a></p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>SQL I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>SQL I</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]1527. Patients With a Condition</title>
    <url>/2022/06/30/leetcode/SQL/SQL%20I/1527-patients-with-a-condition/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/27/leetcode/SQL/SQL%20I/Starting_write_SQL_I_note/">SQL I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>SQL I</code> 的第三天第三個題目，總共有三題。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 5min</li>
<li><a href="https://leetcode.com/problems/patients-with-a-condition/">題目</a></li>
</ul>
<p>你有一張表 <code>Patients</code> 裡面記載了許多病人的名字還有他們有什麼病，現在你只想看到那些有型一糖尿病的病人…</p>
<span id="more"></span>
<p>Table: <code>Activities</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| patient_id   | int     |</span><br><span class="line">| patient_name | varchar |</span><br><span class="line">| conditions   | varchar |</span><br><span class="line">+--------------+---------+</span><br><span class="line">patient_id is the primary key for this table.</span><br><span class="line">&#x27;conditions&#x27; contains 0 or more code separated by spaces. </span><br><span class="line">This table contains information of the patients in the hospital.</span><br></pre></td></tr></table></figure>
<p>有型一糖尿病的病人，他們的病症裡一定會有以 <code>DIAB1</code> 開頭的病症。</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">Patients table:</span><br><span class="line">+------------+--------------+--------------+</span><br><span class="line">| patient_id | patient_name | conditions   |</span><br><span class="line">+------------+--------------+--------------+</span><br><span class="line">| 1          | Daniel       | YFEV COUGH   |</span><br><span class="line">| 2          | Alice        |              |</span><br><span class="line">| 3          | Bob          | DIAB100 MYOP |</span><br><span class="line">| 4          | George       | ACNE DIAB100 |</span><br><span class="line">| 5          | Alain        | DIAB201      |</span><br><span class="line">+------------+--------------+--------------+</span><br><span class="line">Output: </span><br><span class="line">+------------+--------------+--------------+</span><br><span class="line">| patient_id | patient_name | conditions   |</span><br><span class="line">+------------+--------------+--------------+</span><br><span class="line">| 3          | Bob          | DIAB100 MYOP |</span><br><span class="line">| 4          | George       | ACNE DIAB100 | </span><br><span class="line">+------------+--------------+--------------+</span><br><span class="line">Explanation: Bob and George both have a condition that starts with DIAB1.</span><br></pre></td></tr></table></figure>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>這題還滿無腦的，兩種狀況</p>
<ol>
<li>DIAB1 在中間，那他就會是 <code> DIAB1</code> 的形式，前後再加上 % 就可以捕捉這類狀況</li>
<li>DIAB1 在最前面，換句話說前面會沒有空格，於是我們用 <code>DIAB1%</code> 來捕捉這類情況</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Patients</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    conditions <span class="keyword">like</span> <span class="string">&#x27;% DIAB1%&#x27;</span></span><br><span class="line"><span class="keyword">OR</span></span><br><span class="line">    conditions <span class="keyword">like</span> <span class="string">&#x27;DIAB1%&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/0TPo8wY.png" alt="" /></p>
<!-- ##### 參考資料 -->
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>SQL I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>SQL I</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]1667. Fix Names in a Table</title>
    <url>/2022/06/30/leetcode/SQL/SQL%20I/1667-fix-names-in-a-table/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/27/leetcode/SQL/SQL%20I/Starting_write_SQL_I_note/">SQL I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>SQL I</code> 的第三天第一個題目，總共有三題。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 5min</li>
<li><a href="https://leetcode.com/problems/fix-names-in-a-table/">題目</a></li>
</ul>
<p>給你一張表 <code>Users</code> ，這張表記載了很多 user 的名字，但是也包含很多的大小寫轉換錯誤，現在希望你撰寫一個 SELECT 語法，要顯示符合<strong>規範</strong>的名字。</p>
<span id="more"></span>
<p>Table: <code>Users</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----------------+---------+</span><br><span class="line">| Column Name    | Type    |</span><br><span class="line">+----------------+---------+</span><br><span class="line">| user_id        | int     |</span><br><span class="line">| name           | varchar |</span><br><span class="line">+----------------+---------+</span><br><span class="line">user_id is the primary key for this table.</span><br><span class="line">This table contains the ID and the name of the user. The name consists of only lowercase and uppercase characters.</span><br></pre></td></tr></table></figure>
<p>規範如下:</p>
<ul>
<li>首字母大寫</li>
<li>其餘的小寫</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">Users table:</span><br><span class="line">+---------+-------+</span><br><span class="line">| user_id | name  |</span><br><span class="line">+---------+-------+</span><br><span class="line">| 1       | aLice |</span><br><span class="line">| 2       | bOB   |</span><br><span class="line">+---------+-------+</span><br><span class="line">Output: </span><br><span class="line">+---------+-------+</span><br><span class="line">| user_id | name  |</span><br><span class="line">+---------+-------+</span><br><span class="line">| 1       | Alice |</span><br><span class="line">| 2       | Bob   |</span><br><span class="line">+---------+-------+</span><br></pre></td></tr></table></figure>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>這邊用到三個 <code>built-in functions</code> 分別是:</p>
<ul>
<li><a href="https://www.w3schools.com/sql/func_sqlserver_lower.asp">LOWER()</a>: 負責把括弧內的字串轉為小寫。</li>
<li><a href="https://www.w3schools.com/sql/func_sqlserver_upper.asp">UPPER()</a>: 同理，負責把括弧內的字串轉為大寫。</li>
<li><a href="https://www.w3schools.com/sql/func_sqlserver_substring.asp">SUBSTRING()</a>: 負責把字串照你要的長度切開。</li>
</ul>
<p>接著，我們搜索 name 的時候就把他的首字跟後面的字切開，然後首字轉大寫，後面的字轉小寫即可。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    user_id,</span><br><span class="line">    <span class="built_in">UPPER</span>(SUBSTR(name, <span class="number">1</span>, <span class="number">1</span>)) <span class="operator">||</span> <span class="built_in">LOWER</span>(SUBSTR(name, <span class="number">2</span>, <span class="number">99</span>)) <span class="keyword">AS</span> name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    Users</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">    user_id</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/Bp1uuVW.png" alt="" /></p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>SQL I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>SQL I</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]183. Customers Who Never Order</title>
    <url>/2022/06/27/leetcode/SQL/SQL%20I/183-customers-who-never-order/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/27/leetcode/SQL/SQL%20I/Starting_write_SQL_I_note/">SQL I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>SQL I</code> 的第一天第四個題目，總共有四題。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 5min</li>
<li><a href="https://leetcode.com/problems/customers-who-never-order/">題目</a></li>
</ul>
<p>給你兩張表，一張記錄了客人名字跟他們的編號，另一張是訂單紀錄，組合這兩張表找出<strong>沒有消費過的消費者</strong>。</p>
<span id="more"></span>
<p>Table: <code>Customers</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| id          | int     |</span><br><span class="line">| name        | varchar |</span><br><span class="line">+-------------+---------+</span><br><span class="line">id is the primary key column for this table.</span><br><span class="line">Each row of this table indicates the ID and name of a customer.</span><br></pre></td></tr></table></figure>
<p>Table: <code>Orders</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-------------+------+</span><br><span class="line">| Column Name | Type |</span><br><span class="line">+-------------+------+</span><br><span class="line">| id          | int  |</span><br><span class="line">| customerId  | int  |</span><br><span class="line">+-------------+------+</span><br><span class="line">id is the primary key column for this table.</span><br><span class="line">customerId is a foreign key of the ID from the Customers table.</span><br><span class="line">Each row of this table indicates the ID of an order and the ID of the customer who ordered it.</span><br></pre></td></tr></table></figure>
<p>寫出一個 <code>SQL query</code> 來查找那些沒買過東西的人。</p>
<details><summary>點我開啟範例</summary>
<pre>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">Customers table:</span><br><span class="line">+----+-------+</span><br><span class="line">| id | name  |</span><br><span class="line">+----+-------+</span><br><span class="line">| 1  | Joe   |</span><br><span class="line">| 2  | Henry |</span><br><span class="line">| 3  | Sam   |</span><br><span class="line">| 4  | Max   |</span><br><span class="line">+----+-------+</span><br><span class="line">Orders table:</span><br><span class="line">+----+------------+</span><br><span class="line">| id | customerId |</span><br><span class="line">+----+------------+</span><br><span class="line">| 1  | 3          |</span><br><span class="line">| 2  | 1          |</span><br><span class="line">+----+------------+</span><br><span class="line">Output: </span><br><span class="line">+-----------+</span><br><span class="line">| Customers |</span><br><span class="line">+-----------+</span><br><span class="line">| Henry     |</span><br><span class="line">| Max       |</span><br><span class="line">+-----------+</span><br></pre></td></tr></table></figure>
<p></pre></details></p>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>一樣是簡單的 select function ，需要注意的是:</p>
<ol>
<li>他要求最後顯示的 column 是 Customers 所以要在 column 那邊加上一個 <code>AS Customers</code></li>
<li>兩張表合併，簡單處理我們可以使用 <a href="https://www.w3resource.com/sql/subqueries/understanding-sql-subqueries.php">Subqueries</a> 如下方。</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">as</span> Customers <span class="keyword">from</span> Customers </span><br><span class="line"><span class="keyword">where</span> id <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> customerId <span class="keyword">from</span> Orders)</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/daF6Ose.png" alt="" /></p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>SQL I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>SQL I</tag>
        <tag>Subqueries</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]1873. Calculate Special Bonus</title>
    <url>/2022/06/28/leetcode/SQL/SQL%20I/1873-calculate-special-bonus/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/27/leetcode/SQL/SQL%20I/Starting_write_SQL_I_note/">SQL I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>SQL I</code> 的第二天第一個題目，總共有三題。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 30min</li>
<li><a href="https://leetcode.com/problems/calculate-special-bonus/">題目</a></li>
</ul>
<p>你是某公司的 PM ，你有一張表紀錄每個員工還有他們的薪水，現在你要發獎金給他們，而且是一個很有趣的分配方式…</p>
<span id="more"></span>
<p>Table: <code>Employees</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| employee_id | int     |</span><br><span class="line">| name        | varchar |</span><br><span class="line">| salary      | int     |</span><br><span class="line">+-------------+---------+</span><br><span class="line">employee_id is the primary key for this table.</span><br><span class="line">Each row of this table indicates the employee ID, employee name, and salary.</span><br></pre></td></tr></table></figure>
<p>獎金只有發與不發，要發就是 100% ，不發就是 0 ，只有完全符合以下兩個條件的員工才值得得到獎金:</p>
<ol>
<li>他的名字(<code>name</code>)不能是以 M 開頭。</li>
<li>他的編號(<code>employee_id</code>)不能是偶數。</li>
</ol>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">Employees table:</span><br><span class="line">+-------------+---------+--------+</span><br><span class="line">| employee_id | name    | salary |</span><br><span class="line">+-------------+---------+--------+</span><br><span class="line">| 2           | Meir    | 3000   |</span><br><span class="line">| 3           | Michael | 3800   |</span><br><span class="line">| 7           | Addilyn | 7400   |</span><br><span class="line">| 8           | Juan    | 6100   |</span><br><span class="line">| 9           | Kannon  | 7700   |</span><br><span class="line">+-------------+---------+--------+</span><br><span class="line">Output: </span><br><span class="line">+-------------+-------+</span><br><span class="line">| employee_id | bonus |</span><br><span class="line">+-------------+-------+</span><br><span class="line">| 2           | 0     |</span><br><span class="line">| 3           | 0     |</span><br><span class="line">| 7           | 7400  |</span><br><span class="line">| 8           | 0     |</span><br><span class="line">| 9           | 7700  |</span><br><span class="line">+-------------+-------+</span><br><span class="line">Explanation: </span><br><span class="line">employee_id = 2 和 8 的員工沒有獎金，因為他們的 employee_id 是偶數(太慘了)。</span><br><span class="line">employee_id = 3 的員工沒有獎金，因為他名字是 M 開頭(太慘了)。</span><br><span class="line">其他的人都可以享有 100% 薪水的獎金</span><br></pre></td></tr></table></figure>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<h3 id="case-方法"><a class="markdownIt-Anchor" href="#case-方法"></a> case 方法</h3>
<p>在查詢欄位寫 case ，滿足就代入薪水，不滿足就代入 0 。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    employee_id,</span><br><span class="line">    <span class="keyword">case</span></span><br><span class="line">        <span class="keyword">when</span> (<span class="built_in">MOD</span>(employee_id, <span class="number">2</span>) <span class="operator">&lt;&gt;</span> <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">and</span> (name <span class="keyword">not</span> <span class="keyword">like</span> <span class="string">&#x27;M%&#x27;</span>) <span class="keyword">then</span> salary</span><br><span class="line">        <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">end</span> bonus</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    Employees</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">    employee_id</span><br></pre></td></tr></table></figure>
<h3 id="math-方法"><a class="markdownIt-Anchor" href="#math-方法"></a> math 方法</h3>
<p>這個方法很微妙，查出來的薪水欄位乘於(薪水欄位除於二的餘數)，然後再乘於(名字不包含M的人)，具體 SQL 如下:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    employee_id,</span><br><span class="line">    salary <span class="operator">*</span> <span class="built_in">MOD</span>(employee_id, <span class="number">2</span>) <span class="operator">*</span> (name <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">&#x27;M%&#x27;</span>) <span class="keyword">as</span> bonus</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    Employees</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">    employee_id</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p>case 方法<br />
<img src="https://i.imgur.com/kkZf8QF.png" alt="" /></p>
<p>math 方法<br />
<img src="https://i.imgur.com/Ez5NPBj.png" alt="" /></p>
<h5 id="參考資料"><a class="markdownIt-Anchor" href="#參考資料"></a> 參考資料</h5>
<p><a href="https://leetcode.com/problems/calculate-special-bonus/discuss/2205261/Two-solutions-MSSQL">Two solutions - MSSQL</a><br />
<a href="https://leetcode.com/problems/calculate-special-bonus/discuss/2204003/MySQL-or-Without-Case-And-IF-or-100-Runtime">MySQL | Without Case And IF | 100 % Runtime</a></p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>SQL I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>SQL I</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]1757. Recyclable and Low Fat Products</title>
    <url>/2022/06/27/leetcode/SQL/SQL%20I/1757-recyclable-and-low-fat-products/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/27/leetcode/SQL/SQL%20I/Starting_write_SQL_I_note/">SQL I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>SQL I</code> 的第一天第二個題目，總共有四題。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 1min</li>
<li><a href="https://leetcode.com/problems/recyclable-and-low-fat-products/">題目</a></li>
</ul>
<p>因為你很環保，而且你不想要吃會變胖的食物，所以<br />
給你一張表 <code>Products</code> 找出這張表裡符合:</p>
<ol>
<li>low_fats 等於 ‘Y’</li>
<li>recyclable 等於 ‘Y’</li>
</ol>
<p>的食物，然後你就可以開心的把他們吃下肚</p>
<span id="more"></span>
<p>Table: <code>Products</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| product_id  | int     |</span><br><span class="line">| low_fats    | enum    |</span><br><span class="line">| recyclable  | enum    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">product_id is the primary key for this table.</span><br><span class="line">low_fats is an ENUM of type (&#x27;Y&#x27;, &#x27;N&#x27;) where &#x27;Y&#x27; means this product is low fat and &#x27;N&#x27; means it is not.</span><br><span class="line">recyclable is an ENUM of types (&#x27;Y&#x27;, &#x27;N&#x27;) where &#x27;Y&#x27; means this product is recyclable and &#x27;N&#x27; means it is not.</span><br></pre></td></tr></table></figure>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">Products table:</span><br><span class="line">+-------------+----------+------------+</span><br><span class="line">| product_id  | low_fats | recyclable |</span><br><span class="line">+-------------+----------+------------+</span><br><span class="line">| 0           | Y        | N          |</span><br><span class="line">| 1           | Y        | Y          |</span><br><span class="line">| 2           | N        | Y          |</span><br><span class="line">| 3           | Y        | Y          |</span><br><span class="line">| 4           | N        | N          |</span><br><span class="line">+-------------+----------+------------+</span><br><span class="line">Output: </span><br><span class="line">+-------------+</span><br><span class="line">| product_id  |</span><br><span class="line">+-------------+</span><br><span class="line">| 1           |</span><br><span class="line">| 3           |</span><br><span class="line">+-------------+</span><br><span class="line">Explanation: Only products 1 and 3 are both low fat and recyclable.</span><br></pre></td></tr></table></figure>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>簡單的 select function:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> product_id <span class="keyword">from</span> Products </span><br><span class="line"><span class="keyword">where</span> low_fats <span class="operator">=</span> &quot;Y&quot; # 如果 low_fats 欄位是 Y </span><br><span class="line"><span class="keyword">and</span> recyclable <span class="operator">=</span> &quot;Y&quot; # 而且 如果 recyclable 欄位是 Y   我就把他抓出來</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/jMHSLNG.png" alt="" /></p>
<!-- ##### 參考資料 -->]]></content>
      <categories>
        <category>LeetCode</category>
        <category>SQL I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>SQL I</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]196. Delete Duplicate Emails</title>
    <url>/2022/06/30/leetcode/SQL/SQL%20I/196-delete-duplicate-emails/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/27/leetcode/SQL/SQL%20I/Starting_write_SQL_I_note/">SQL I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>SQL I</code> 的第二天第三個題目，總共有三題。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 10min</li>
<li><a href="https://leetcode.com/problems/delete-duplicate-emails/">題目</a></li>
</ul>
<p>給你一張表 <code>Person</code> ，這張表裡存了一堆 email ，但是裡面有些 email 是重複的，現在請你撰寫一個 DELETE 語法來刪除這些重複的 email 資料。</p>
<span id="more"></span>
<p>Table: <code>Person</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| id          | int     |</span><br><span class="line">| email       | varchar |</span><br><span class="line">+-------------+---------+</span><br><span class="line">id is the primary key column for this table.</span><br><span class="line">Each row of this table contains an email. The emails will not contain uppercase letters.</span><br></pre></td></tr></table></figure>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">Person table:</span><br><span class="line">+----+------------------+</span><br><span class="line">| id | email            |</span><br><span class="line">+----+------------------+</span><br><span class="line">| 1  | john@example.com |</span><br><span class="line">| 2  | bob@example.com  |</span><br><span class="line">| 3  | john@example.com |</span><br><span class="line">+----+------------------+</span><br><span class="line">Output: </span><br><span class="line">+----+------------------+</span><br><span class="line">| id | email            |</span><br><span class="line">+----+------------------+</span><br><span class="line">| 1  | john@example.com |</span><br><span class="line">| 2  | bob@example.com  |</span><br><span class="line">+----+------------------+</span><br><span class="line">Explanation: john@example.com is repeated two times. We keep the row with the smallest Id = 1.</span><br></pre></td></tr></table></figure>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<ol>
<li>先 SELECT 出不重複的 email ，這邊使用的是 <code>GROUP BY email</code> 再加上 <code>MIN(id)</code> ，同理，使用 MAX() 也可以。</li>
<li>遍歷 Person 這張表，如果這行資料並不在第一步 SELECT 出來的表裡，就把他刪掉。</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span></span><br><span class="line">    Person</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    id <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">        <span class="keyword">SELECT</span></span><br><span class="line">            <span class="built_in">MIN</span>(id)</span><br><span class="line">        <span class="keyword">FROM</span></span><br><span class="line">            Person</span><br><span class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">            email</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/DVMLUZt.png" alt="" /></p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>SQL I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>SQL I</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]584. Find Customer Referee</title>
    <url>/2022/06/27/leetcode/SQL/SQL%20I/584-find-customer-referee/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/27/leetcode/SQL/SQL%20I/Starting_write_SQL_I_note/">SQL I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>SQL I</code> 的第一天第三個題目，總共有四題。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 1min</li>
<li><a href="https://leetcode.com/problems/find-customer-referee/">題目</a></li>
</ul>
<p>給你一張表 Customer ，找出裡面 referee_id 不是 2 的。</p>
<span id="more"></span>
<p>Table: <code>Customer</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| id          | int     |</span><br><span class="line">| name        | varchar |</span><br><span class="line">| referee_id  | int     |</span><br><span class="line">+-------------+---------+</span><br><span class="line">id is the primary key column for this table.</span><br><span class="line">Each row of this table indicates the id of a customer, their name, and the id of the customer who referred them.</span><br></pre></td></tr></table></figure>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">Customer table:</span><br><span class="line">+----+------+------------+</span><br><span class="line">| id | name | referee_id |</span><br><span class="line">+----+------+------------+</span><br><span class="line">| 1  | Will | null       |</span><br><span class="line">| 2  | Jane | null       |</span><br><span class="line">| 3  | Alex | 2          |</span><br><span class="line">| 4  | Bill | null       |</span><br><span class="line">| 5  | Zack | 1          |</span><br><span class="line">| 6  | Mark | 2          |</span><br><span class="line">+----+------+------------+</span><br><span class="line">Output: </span><br><span class="line">+------+</span><br><span class="line">| name |</span><br><span class="line">+------+</span><br><span class="line">| Will |</span><br><span class="line">| Jane |</span><br><span class="line">| Bill |</span><br><span class="line">| Zack |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>簡單的 select function 如下:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> Customer</span><br><span class="line"><span class="keyword">where</span> referee_id <span class="operator">&lt;&gt;</span> <span class="number">2</span> # 大於小於 <span class="number">2</span> 的</span><br><span class="line"><span class="keyword">or</span> referee_id <span class="keyword">is</span> <span class="keyword">null</span> # <span class="keyword">null</span> 並不大於小於 <span class="number">2</span> 因此單獨處理</span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/gbGhiUH.png" alt="" /></p>
<!-- ##### 參考資料 -->]]></content>
      <categories>
        <category>LeetCode</category>
        <category>SQL I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>SQL I</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]595. Big Countries</title>
    <url>/2022/06/27/leetcode/SQL/SQL%20I/595-big-countries/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/27/leetcode/SQL/SQL%20I/Starting_write_SQL_I_note/">SQL I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>SQL I</code> 的第一天第一個題目，總共有四題。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 1min</li>
<li><a href="https://leetcode.com/problems/big-countries/">題目</a></li>
</ul>
<p>給你一張表 <code>World</code> ，找出裡面的 <code>Big</code> 國。</p>
<p>一個 <code>Big</code> 國的定義:</p>
<ul>
<li>面積超過三百萬平方公里<br />
<strong>或是</strong></li>
<li>人口超過兩千五百萬人</li>
</ul>
<span id="more"></span>
<p>Table: <code>World</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| name        | varchar |</span><br><span class="line">| continent   | varchar |</span><br><span class="line">| area        | int     |</span><br><span class="line">| population  | int     |</span><br><span class="line">| gdp         | int     |</span><br><span class="line">+-------------+---------+</span><br><span class="line">name is the primary key column for this table.</span><br><span class="line">Each row of this table gives information about the name of a country, the continent to which it belongs, its area, the population, and its GDP value.</span><br></pre></td></tr></table></figure>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">World table:</span><br><span class="line">+-------------+-----------+---------+------------+--------------+</span><br><span class="line">| name        | continent | area    | population | gdp          |</span><br><span class="line">+-------------+-----------+---------+------------+--------------+</span><br><span class="line">| Afghanistan | Asia      | 652230  | 25500100   | 20343000000  |</span><br><span class="line">| Albania     | Europe    | 28748   | 2831741    | 12960000000  |</span><br><span class="line">| Algeria     | Africa    | 2381741 | 37100000   | 188681000000 |</span><br><span class="line">| Andorra     | Europe    | 468     | 78115      | 3712000000   |</span><br><span class="line">| Angola      | Africa    | 1246700 | 20609294   | 100990000000 |</span><br><span class="line">+-------------+-----------+---------+------------+--------------+</span><br><span class="line">Output: </span><br><span class="line">+-------------+------------+---------+</span><br><span class="line">| name        | population | area    |</span><br><span class="line">+-------------+------------+---------+</span><br><span class="line">| Afghanistan | 25500100   | 652230  |</span><br><span class="line">| Algeria     | 37100000   | 2381741 |</span><br><span class="line">+-------------+------------+---------+</span><br></pre></td></tr></table></figure>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>這個題目出的比較嚴謹，給你很多沒用的欄位，當然我們只要注意在那些影響成為大國條件的欄位就好。<br />
<code>or</code> 條件代表 or 之前的條件成立，或是之後的條件成立，都把資料抓出來。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name, population, area <span class="keyword">from</span> World </span><br><span class="line"><span class="keyword">where</span> area <span class="operator">&gt;=</span> <span class="number">3000000</span></span><br><span class="line"><span class="keyword">or</span> population <span class="operator">&gt;=</span> <span class="number">25000000</span></span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/wW9fYlD.png" alt="" /></p>
<!-- ##### 參考資料 -->]]></content>
      <categories>
        <category>LeetCode</category>
        <category>SQL I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>SQL I</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]627. Swap Salary</title>
    <url>/2022/06/30/leetcode/SQL/SQL%20I/627-swap-salary/</url>
    <content><![CDATA[<blockquote>
<p><a href="/2022/06/27/leetcode/SQL/SQL%20I/Starting_write_SQL_I_note/">SQL I 筆記撰寫計畫</a></p>
</blockquote>
<h2 id="敘述"><a class="markdownIt-Anchor" href="#敘述"></a> 敘述</h2>
<p>這是 <code>SQL I</code> 的第二天第二個題目，總共有三題。</p>
<ul>
<li>難度: <code>Easy</code></li>
<li>花費時間: 30min</li>
<li><a href="https://leetcode.com/problems/swap-salary/">題目</a></li>
</ul>
<p>給你一張表 <code>Salary</code> ，這張表包含 sex 欄位註明性別，但上個工程師好像粗心大意不小心把所有男性跟女性搞相反了，<br />
請<strong>使用一個 update 語法</strong>讓這張表 sex 欄位的男性與女性互換。</p>
<span id="more"></span>
<p>Table: <code>Salary</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-------------+----------+</span><br><span class="line">| Column Name | Type     |</span><br><span class="line">+-------------+----------+</span><br><span class="line">| id          | int      |</span><br><span class="line">| name        | varchar  |</span><br><span class="line">| sex         | ENUM     |</span><br><span class="line">| salary      | int      |</span><br><span class="line">+-------------+----------+</span><br><span class="line">id is the primary key for this table.</span><br><span class="line">The sex column is ENUM value of type (&#x27;m&#x27;, &#x27;f&#x27;).</span><br><span class="line">The table contains information about an employee.</span><br></pre></td></tr></table></figure>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">Salary table:</span><br><span class="line">+----+------+-----+--------+</span><br><span class="line">| id | name | sex | salary |</span><br><span class="line">+----+------+-----+--------+</span><br><span class="line">| 1  | A    | m   | 2500   |</span><br><span class="line">| 2  | B    | f   | 1500   |</span><br><span class="line">| 3  | C    | m   | 5500   |</span><br><span class="line">| 4  | D    | f   | 500    |</span><br><span class="line">+----+------+-----+--------+</span><br><span class="line">Output: </span><br><span class="line">+----+------+-----+--------+</span><br><span class="line">| id | name | sex | salary |</span><br><span class="line">+----+------+-----+--------+</span><br><span class="line">| 1  | A    | f   | 2500   |</span><br><span class="line">| 2  | B    | m   | 1500   |</span><br><span class="line">| 3  | C    | f   | 5500   |</span><br><span class="line">| 4  | D    | m   | 500    |</span><br><span class="line">+----+------+-----+--------+</span><br><span class="line">Explanation: </span><br><span class="line">(1, A) and (3, C) were changed from &#x27;m&#x27; to &#x27;f&#x27;.</span><br><span class="line">(2, B) and (4, D) were changed from &#x27;f&#x27; to &#x27;m&#x27;.</span><br></pre></td></tr></table></figure>
<h2 id="筆記"><a class="markdownIt-Anchor" href="#筆記"></a> 筆記</h2>
<p>UPDATE 語法搭配 CASE 即可</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span></span><br><span class="line">    Salary</span><br><span class="line"><span class="keyword">SET</span> sex <span class="operator">=</span> </span><br><span class="line">    <span class="keyword">CASE</span> sex</span><br><span class="line">        <span class="keyword">WHEN</span> <span class="string">&#x27;m&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;f&#x27;</span></span><br><span class="line">        <span class="keyword">WHEN</span> <span class="string">&#x27;f&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;m&#x27;</span></span><br><span class="line">    <span class="keyword">END</span></span><br></pre></td></tr></table></figure>
<h2 id="成績"><a class="markdownIt-Anchor" href="#成績"></a> 成績</h2>
<p><img src="https://i.imgur.com/ReThTib.png" alt="" /></p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>SQL I</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>SQL I</tag>
      </tags>
  </entry>
  <entry>
    <title>[LeetCode]SQL I 筆記撰寫計畫</title>
    <url>/2022/06/27/leetcode/SQL/SQL%20I/Starting_write_SQL_I_note/</url>
    <content><![CDATA[<blockquote>
<p>計畫: <a href="https://leetcode.com/study-plan/sql/">SQL I</a></p>
</blockquote>
<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2>
<p>現在任職的公司是做資料建檔的，所以會大量運用到 SQL<br />
自認自己 SQL 的能力應該不差，所以我們來嘗試看看 LeetCode 上的 SQL 題目吧~</p>
<span id="more"></span>
<h2 id="0627-第一天"><a class="markdownIt-Anchor" href="#0627-第一天"></a> 06/27 第一天</h2>
<ul>
<li>595. Big Countries <code>Easy</code> <a href="https://leetcode.com/problems/big-countries/">題目</a> <a href="/2022/06/27/leetcode/SQL/SQL%20I/595-big-countries/">筆記</a></li>
<li>1757. Recyclable and Low Fat Products <code>Easy</code> <a href="https://leetcode.com/problems/recyclable-and-low-fat-products/">題目</a> <a href="/2022/06/27/leetcode/SQL/SQL%20I/1757-recyclable-and-low-fat-products/">筆記</a></li>
<li>584. Find Customer Referee <code>Easy</code> <a href="https://leetcode.com/problems/find-customer-referee/">題目</a> <a href="/2022/06/27/leetcode/SQL/SQL%20I/584-find-customer-referee/">筆記</a></li>
<li>183. Customers Who Never Order <code>Easy</code> <a href="https://leetcode.com/problems/customers-who-never-order/">題目</a> <a href="/2022/06/27/leetcode/SQL/SQL%20I/183-customers-who-never-order/">筆記</a></li>
</ul>
<p>今天的題目普遍都非常的簡單，寫 blog 比做題的時間久，比較有趣的可以直接看 <a href="/2022/06/27/leetcode/SQL/SQL%20I/183-customers-who-never-order/">183. Customers Who Never Order</a> 這題有使用到Subqueries 的技巧，雖然也是最初階的那種。</p>
<h2 id="0629-第二天"><a class="markdownIt-Anchor" href="#0629-第二天"></a> 06/29 第二天</h2>
<ul>
<li>1873. Calculate Special Bonus <code>Easy</code> <a href="https://leetcode.com/problems/calculate-special-bonus/">題目</a> <a href="/2022/06/28/leetcode/SQL/SQL%20I/1873-calculate-special-bonus/">筆記</a></li>
<li>627. Swap Salary <code>Easy</code> <a href="https://leetcode.com/problems/swap-salary/">題目</a> <a href="/2022/06/30/leetcode/SQL/SQL%20I/627-swap-salary/">筆記</a></li>
<li>196. Delete Duplicate Emails <code>Easy</code> <a href="https://leetcode.com/problems/delete-duplicate-emails/">題目</a> <a href="/2022/06/30/leetcode/SQL/SQL%20I/196-delete-duplicate-emails/">筆記</a></li>
</ul>
<p>今天有三題，雖然都是 Easy ，但題目難度很明顯比昨天難很多，<br />
其中 <a href="/2022/06/28/leetcode/SQL/SQL%20I/1873-calculate-special-bonus/">1873. Calculate Special Bonus</a> 跟 <a href="/2022/06/30/leetcode/SQL/SQL%20I/627-swap-salary/">627. Swap Salary</a> 都有使用到 <code>CASE</code> 這算是一個我之前從未使用過的語法。</p>
<p><a href="/2022/06/30/leetcode/SQL/SQL%20I/196-delete-duplicate-emails/">196. Delete Duplicate Emails</a> 是三題中最需要動腦想想的，但我剛好有寫過類似的 Function (刪除資料表裡重複的資料到剩下一筆)，所以我就很快就解完了~</p>
<h2 id="0630-第三天"><a class="markdownIt-Anchor" href="#0630-第三天"></a> 06/30 第三天</h2>
<ul>
<li>1667. Fix Names in a Table <code>Easy</code> <a href="https://leetcode.com/problems/fix-names-in-a-table/">題目</a> <a href="/2022/06/30/leetcode/SQL/SQL%20I/1667-fix-names-in-a-table/">筆記</a></li>
<li>1484. Group Sold Products By The Date <code>Easy</code> <a href="https://leetcode.com/problems/group-sold-products-by-the-date/">題目</a> <a href="/2022/06/30/leetcode/SQL/SQL%20I/627-swap-salary/">筆記</a></li>
<li>1527. Patients With a Condition <code>Easy</code> <a href="https://leetcode.com/problems/patients-with-a-condition/">題目</a> <a href="/2022/06/30/leetcode/SQL/SQL%20I/196-delete-duplicate-emails/">筆記</a></li>
</ul>
<p><a href="/2022/06/30/leetcode/SQL/SQL%20I/1667-fix-names-in-a-table/">1667. Fix Names in a Table</a> 跟 <a href="/2022/06/30/leetcode/SQL/SQL%20I/627-swap-salary/">1484. Group Sold Products By The Date</a> 這兩題都是在考 built-in function ，<br />
其中 <a href="/2022/06/30/leetcode/SQL/SQL%20I/627-swap-salary/">1484. Group Sold Products By The Date</a> 這題真的有難到我，真的正常查 SQL 應該是不會寫到這樣啦XD</p>
<p><a href="/2022/06/30/leetcode/SQL/SQL%20I/196-delete-duplicate-emails/">1527. Patients With a Condition</a> 這題我就覺得沒什麼難度，算是飯後甜點吧~</p>
]]></content>
      <tags>
        <tag>LeetCode</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
</search>
